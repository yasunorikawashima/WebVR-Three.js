





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">



  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/frameworks-5b61aadc846f0818981ceec31b49c475fb084c163fdec5efbc2c21ef539092a9.css" integrity="sha256-W2Gq3IRvCBiYHO7DG0nEdfsITBY/3sXvvCwh71OQkqk=" media="all" rel="stylesheet" />
  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-bbe829dc9daf64ff79650ddde9d50cd28c7aff1d013210b543183ef54650fc6c.css" integrity="sha256-u+gp3J2vZP95ZQ3d6dUM0ox6/x0BMhC1Qxg+9UZQ/Gw=" media="all" rel="stylesheet" />
  
  
  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/site-f4fa6ace91e5f0fabb47e8405e5ecf6a9815949cd3958338f6578e626cd443d7.css" integrity="sha256-9PpqzpHl8Pq7R+hAXl7PapgVlJzTlYM49leOYmzUQ9c=" media="all" rel="stylesheet" />
  

  <meta name="viewport" content="width=device-width">
  
  <title>html5-exp-webvr-demo/three.min.js at master · edom18/html5-exp-webvr-demo · GitHub</title>
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta content="https://avatars0.githubusercontent.com/u/208165?v=3&amp;s=400" property="og:image" /><meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="edom18/html5-exp-webvr-demo" property="og:title" /><meta content="https://github.com/edom18/html5-exp-webvr-demo" property="og:url" /><meta content="Contribute to html5-exp-webvr-demo development by creating an account on GitHub." property="og:description" />

  <link rel="assets" href="https://assets-cdn.github.com/">
  
  <meta name="pjax-timeout" content="1000">
  
  <meta name="request-id" content="C8F2:F3E3:11CB5:1DDDF:58DDA4FE" data-pjax-transient>
  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

  <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
<meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
    <meta name="google-analytics" content="UA-3769691-2">

<meta content="collector.githubapp.com" name="octolytics-host" /><meta content="github" name="octolytics-app-id" /><meta content="https://collector.githubapp.com/github-external/browser_event" name="octolytics-event-url" /><meta content="C8F2:F3E3:11CB5:1DDDF:58DDA4FE" name="octolytics-dimension-request_id" />
<meta content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" name="analytics-location" />




  <meta class="js-ga-set" name="dimension1" content="Logged Out">


  

      <meta name="hostname" content="github.com">
  <meta name="user-login" content="">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="MWFkMTZhMTBmN2YxY2VjYjU2MDRiZmI5ZGE5Y2U5ODgyYzJhNzlkZmM3ZDJhZTljZjQ5N2M5MWUxODVkY2QxMnx7InJlbW90ZV9hZGRyZXNzIjoiMTIyLjIwOS4xMjQuNzQiLCJyZXF1ZXN0X2lkIjoiQzhGMjpGM0UzOjExQ0I1OjFERERGOjU4RERBNEZFIiwidGltZXN0YW1wIjoxNDkwOTIwNzA5LCJob3N0IjoiZ2l0aHViLmNvbSJ9">


  <meta name="html-safe-nonce" content="8666fa07809418aa55252eb6ec6404bc90a541e8">

  <meta http-equiv="x-pjax-version" content="156ba59f2572aee22b86a6cbc3f83d3d">
  

    
  <meta name="description" content="Contribute to html5-exp-webvr-demo development by creating an account on GitHub.">
  <meta name="go-import" content="github.com/edom18/html5-exp-webvr-demo git https://github.com/edom18/html5-exp-webvr-demo.git">

  <meta content="208165" name="octolytics-dimension-user_id" /><meta content="edom18" name="octolytics-dimension-user_login" /><meta content="53468072" name="octolytics-dimension-repository_id" /><meta content="edom18/html5-exp-webvr-demo" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="53468072" name="octolytics-dimension-repository_network_root_id" /><meta content="edom18/html5-exp-webvr-demo" name="octolytics-dimension-repository_network_root_nwo" />
        <link href="https://github.com/edom18/html5-exp-webvr-demo/commits/master.atom" rel="alternate" title="Recent Commits to html5-exp-webvr-demo:master" type="application/atom+xml">


    <link rel="canonical" href="https://github.com/edom18/html5-exp-webvr-demo/blob/master/js/three.min.js" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">


  <meta name="u2f-support" content="true">

  </head>

  <body class="logged-out env-production page-blob">
    


  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    



          <header class="site-header js-details-container Details" role="banner">
  <div class="container-responsive">
    <a class="header-logo-invertocat" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
      <svg aria-hidden="true" class="octicon octicon-mark-github" height="32" version="1.1" viewBox="0 0 16 16" width="32"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
    </a>

    <button class="btn-link float-right site-header-toggle js-details-target" type="button" aria-label="Toggle navigation">
      <svg aria-hidden="true" class="octicon octicon-three-bars" height="24" version="1.1" viewBox="0 0 12 16" width="18"><path fill-rule="evenodd" d="M11.41 9H.59C0 9 0 8.59 0 8c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zm0-4H.59C0 5 0 4.59 0 4c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zM.59 11H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1H.59C0 13 0 12.59 0 12c0-.59 0-1 .59-1z"/></svg>
    </button>

    <div class="site-header-menu">
      <nav class="site-header-nav">
        <a href="/features" class="js-selected-navigation-item nav-item" data-ga-click="Header, click, Nav menu - item:features" data-selected-links="/features /features">
          Features
</a>        <a href="/business" class="js-selected-navigation-item nav-item" data-ga-click="Header, click, Nav menu - item:business" data-selected-links="/business /business/security /business/customers /business">
          Business
</a>        <a href="/explore" class="js-selected-navigation-item nav-item" data-ga-click="Header, click, Nav menu - item:explore" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship /showcases /explore">
          Explore
</a>        <a href="/pricing" class="js-selected-navigation-item nav-item" data-ga-click="Header, click, Nav menu - item:pricing" data-selected-links="/pricing /pricing">
          Pricing
</a>      </nav>

      <div class="site-header-actions">
          <div class="header-search scoped-search site-scoped-search js-site-search" role="search">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/edom18/html5-exp-webvr-demo/search" class="js-site-search-form" data-scoped-search-url="/edom18/html5-exp-webvr-demo/search" data-unscoped-search-url="/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <label class="form-control header-search-wrapper js-chromeless-input-container">
        <a href="/edom18/html5-exp-webvr-demo/blob/master/js/three.min.js" class="header-search-scope no-underline">This repository</a>
      <input type="text"
        class="form-control header-search-input js-site-search-focus js-site-search-field is-clearable"
        data-hotkey="s"
        name="q"
        value=""
        placeholder="Search"
        aria-label="Search this repository"
        data-unscoped-placeholder="Search GitHub"
        data-scoped-placeholder="Search"
        autocapitalize="off">
        <input type="hidden" class="js-site-search-type-field" name="type" >
    </label>
</form></div>


          <a class="text-bold site-header-link" href="/login?return_to=%2Fedom18%2Fhtml5-exp-webvr-demo%2Fblob%2Fmaster%2Fjs%2Fthree.min.js" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">Sign in</a>
            <span class="text-gray">or</span>
            <a class="text-bold site-header-link" href="/join?source=header-repo" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up">Sign up</a>
      </div>
    </div>
  </div>
</header>


  </div>

  <div id="start-of-content" class="accessibility-aid"></div>

    <div id="js-flash-container">
</div>



  <div role="main">
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode">
    <div id="js-repo-pjax-container" data-pjax-container>
        


  <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav">
    <div class="container repohead-details-container">


      <ul class="pagehead-actions">
  <li>
      <a href="/login?return_to=%2Fedom18%2Fhtml5-exp-webvr-demo"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to watch a repository" rel="nofollow">
    <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
    Watch
  </a>
  <a class="social-count" href="/edom18/html5-exp-webvr-demo/watchers"
     aria-label="1 user is watching this repository">
    1
  </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fedom18%2Fhtml5-exp-webvr-demo"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <svg aria-hidden="true" class="octicon octicon-star" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
    Star
  </a>

    <a class="social-count js-social-count" href="/edom18/html5-exp-webvr-demo/stargazers"
      aria-label="2 users starred this repository">
      2
    </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fedom18%2Fhtml5-exp-webvr-demo"
        class="btn btn-sm btn-with-count tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <svg aria-hidden="true" class="octicon octicon-repo-forked" height="16" version="1.1" viewBox="0 0 10 16" width="10"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
        Fork
      </a>

    <a href="/edom18/html5-exp-webvr-demo/network" class="social-count"
       aria-label="1 user forked this repository">
      1
    </a>
  </li>
</ul>

      <h1 class="public ">
  <svg aria-hidden="true" class="octicon octicon-repo" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
  <span class="author" itemprop="author"><a href="/edom18" class="url fn" rel="author">edom18</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a href="/edom18/html5-exp-webvr-demo" data-pjax="#js-repo-pjax-container">html5-exp-webvr-demo</a></strong>

</h1>

    </div>
    <div class="container">
      
<nav class="reponav js-repo-nav js-sidenav-container-pjax"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
     role="navigation"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/edom18/html5-exp-webvr-demo" class="js-selected-navigation-item selected reponav-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /edom18/html5-exp-webvr-demo" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-code" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a href="/edom18/html5-exp-webvr-demo/issues" class="js-selected-navigation-item reponav-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /edom18/html5-exp-webvr-demo/issues" itemprop="url">
        <svg aria-hidden="true" class="octicon octicon-issue-opened" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="counter">0</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/edom18/html5-exp-webvr-demo/pulls" class="js-selected-navigation-item reponav-item" data-hotkey="g p" data-selected-links="repo_pulls /edom18/html5-exp-webvr-demo/pulls" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-git-pull-request" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="counter">0</span>
      <meta itemprop="position" content="3">
</a>  </span>

    <a href="/edom18/html5-exp-webvr-demo/projects" class="js-selected-navigation-item reponav-item" data-selected-links="repo_projects new_repo_project repo_project /edom18/html5-exp-webvr-demo/projects">
      <svg aria-hidden="true" class="octicon octicon-project" height="16" version="1.1" viewBox="0 0 15 16" width="15"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"/></svg>
      Projects
      <span class="counter">0</span>
</a>


  <a href="/edom18/html5-exp-webvr-demo/pulse" class="js-selected-navigation-item reponav-item" data-selected-links="pulse /edom18/html5-exp-webvr-demo/pulse">
    <svg aria-hidden="true" class="octicon octicon-pulse" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M11.5 8L8.8 5.4 6.6 8.5 5.5 1.6 2.38 8H0v2h3.6l.9-1.8.9 5.4L9 8.5l1.6 1.5H14V8z"/></svg>
    Pulse
</a>
  <a href="/edom18/html5-exp-webvr-demo/graphs" class="js-selected-navigation-item reponav-item" data-selected-links="repo_graphs repo_contributors /edom18/html5-exp-webvr-demo/graphs">
    <svg aria-hidden="true" class="octicon octicon-graph" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
    Graphs
</a>

</nav>

    </div>
  </div>

<div class="container new-discussion-timeline experiment-repo-nav">
  <div class="repository-content">

    

<a href="/edom18/html5-exp-webvr-demo/blob/7f40646f55704b72de0f2339d9a5b06a4ba783f4/js/three.min.js" class="d-none js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:bb0d9fc9841c2976938e894c34cdc443 -->

<div class="file-navigation js-zeroclipboard-container">
  
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    
    type="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">master</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg aria-label="Close" class="octicon octicon-x js-menu-close" height="16" role="img" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/edom18/html5-exp-webvr-demo/blob/gh-pages/js/three.min.js"
               data-name="gh-pages"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                gh-pages
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/edom18/html5-exp-webvr-demo/blob/master/js/three.min.js"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

  <div class="BtnGroup float-right">
    <a href="/edom18/html5-exp-webvr-demo/find/master"
          class="js-pjax-capture-input btn btn-sm BtnGroup-item"
          data-pjax
          data-hotkey="t">
      Find file
    </a>
    <button aria-label="Copy file path to clipboard" class="js-zeroclipboard btn btn-sm BtnGroup-item tooltipped tooltipped-s" data-copied-hint="Copied!" type="button">Copy path</button>
  </div>
  <div class="breadcrumb js-zeroclipboard-target">
    <span class="repo-root js-repo-root"><span class="js-path-segment"><a href="/edom18/html5-exp-webvr-demo"><span>html5-exp-webvr-demo</span></a></span></span><span class="separator">/</span><span class="js-path-segment"><a href="/edom18/html5-exp-webvr-demo/tree/master/js"><span>js</span></a></span><span class="separator">/</span><strong class="final-path">three.min.js</strong>
  </div>
</div>


<include-fragment class="commit-tease" src="/edom18/html5-exp-webvr-demo/contributors/master/js/three.min.js">
  <div>
    Fetching contributors&hellip;
  </div>

  <div class="commit-tease-contributors">
    <img alt="" class="loader-loading float-left" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" />
    <span class="loader-error">Cannot retrieve contributors at this time</span>
  </div>
</include-fragment>
<div class="file">
  <div class="file-header">
  <div class="file-actions">

    <div class="BtnGroup">
      <a href="/edom18/html5-exp-webvr-demo/raw/master/js/three.min.js" class="btn btn-sm BtnGroup-item" id="raw-url">Raw</a>
        <a href="/edom18/html5-exp-webvr-demo/blame/master/js/three.min.js" class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b">Blame</a>
      <a href="/edom18/html5-exp-webvr-demo/commits/master/js/three.min.js" class="btn btn-sm BtnGroup-item" rel="nofollow">History</a>
    </div>

        <a class="btn-octicon tooltipped tooltipped-nw"
           href="https://windows.github.com"
           aria-label="Open this file in GitHub Desktop"
           data-ga-click="Repository, open with desktop, type:windows">
            <svg aria-hidden="true" class="octicon octicon-device-desktop" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M15 2H1c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5.34c-.25.61-.86 1.39-2.34 2h8c-1.48-.61-2.09-1.39-2.34-2H15c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm0 9H1V3h14v8z"/></svg>
        </a>

        <button type="button" class="btn-octicon disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg aria-hidden="true" class="octicon octicon-pencil" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 0 1 1.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"/></svg>
        </button>
        <button type="button" class="btn-octicon btn-octicon-danger disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg aria-hidden="true" class="octicon octicon-trashcan" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"/></svg>
        </button>
  </div>

  <div class="file-info">
      <span class="file-mode" title="File mode">executable file</span>
      <span class="file-info-divider"></span>
      884 lines (882 sloc)
      <span class="file-info-divider"></span>
    422 KB
  </div>
</div>

  

  <div itemprop="text" class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> self <span class="pl-k">=</span> self <span class="pl-k">||</span> {};<span class="pl-c"><span class="pl-c">//</span> threejs.org/license</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&#39;</span>use strict<span class="pl-pds">&#39;</span></span>;<span class="pl-k">var</span> <span class="pl-c1">THREE</span><span class="pl-k">=</span>{<span class="pl-c1">REVISION</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>73<span class="pl-pds">&quot;</span></span>};<span class="pl-s"><span class="pl-pds">&quot;</span>function<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> define<span class="pl-k">&amp;&amp;</span><span class="pl-smi">define</span>.<span class="pl-smi">amd</span><span class="pl-k">?</span><span class="pl-en">define</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>three<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-k">typeof</span> <span class="pl-c1">exports</span><span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-k">typeof</span> <span class="pl-c1">module</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">module</span>.<span class="pl-smi">exports</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>);</td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">self</span>.<span class="pl-smi">requestAnimationFrame</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">self</span>.<span class="pl-smi">cancelAnimationFrame</span><span class="pl-k">||</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>ms<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>moz<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>webkit<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>o<span class="pl-pds">&quot;</span></span>],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">self</span>.<span class="pl-smi">requestAnimationFrame</span>;<span class="pl-k">++</span>c)<span class="pl-smi">self</span>.<span class="pl-smi">requestAnimationFrame</span><span class="pl-k">=</span>self[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>RequestAnimationFrame<span class="pl-pds">&quot;</span></span>],<span class="pl-smi">self</span>.<span class="pl-smi">cancelAnimationFrame</span><span class="pl-k">=</span>self[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>CancelAnimationFrame<span class="pl-pds">&quot;</span></span>]<span class="pl-k">||</span>self[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>CancelRequestAnimationFrame<span class="pl-pds">&quot;</span></span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">self</span>.<span class="pl-smi">requestAnimationFrame</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">self</span>.<span class="pl-smi">setTimeout</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">self</span>.<span class="pl-en">requestAnimationFrame</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Date</span>.<span class="pl-en">now</span>(),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">16</span><span class="pl-k">-</span>(c<span class="pl-k">-</span>a)),f<span class="pl-k">=</span><span class="pl-smi">self</span>.<span class="pl-en">setTimeout</span>(<span class="pl-k">function</span>(){<span class="pl-en">b</span>(c<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line">g)},g);a<span class="pl-k">=</span>c<span class="pl-k">+</span>g;<span class="pl-k">return</span> f});<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">self</span>.<span class="pl-smi">cancelAnimationFrame</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">self</span>.<span class="pl-smi">clearTimeout</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">self</span>.<span class="pl-en">cancelAnimationFrame</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">self</span>.<span class="pl-en">clearTimeout</span>(a)})}();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">self</span>.<span class="pl-smi">performance</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">self</span>.<span class="pl-smi">performance</span><span class="pl-k">=</span>{});<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">self</span>.<span class="pl-smi">performance</span>.<span class="pl-smi">now</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">Date</span>.<span class="pl-en">now</span>();<span class="pl-smi">self</span>.<span class="pl-smi">performance</span>.<span class="pl-en">now</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>()<span class="pl-k">-</span>a}}();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">52</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Math</span>.<span class="pl-smi">sign</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Math</span>.<span class="pl-en">sign</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">?</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">+</span>a});</td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">Object</span>.<span class="pl-smi">defineProperty</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>name<span class="pl-pds">&quot;</span></span>,{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">toString</span>().<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">\s</span><span class="pl-k">*</span>function<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\S</span><span class="pl-k">*</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-cce">\(</span><span class="pl-pds">/</span></span>)[<span class="pl-c1">1</span>]}});<span class="pl-c1">THREE</span>.<span class="pl-c1">MOUSE</span><span class="pl-k">=</span>{<span class="pl-c1">LEFT</span><span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">MIDDLE</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-c1">RIGHT</span><span class="pl-k">:</span><span class="pl-c1">2</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceNone</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceBack</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceFront</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceFrontBack</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FrontFaceDirectionCW</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FrontFaceDirectionCCW</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">BasicShadowMap</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">PCFShadowMap</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">PCFSoftShadowMap</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span><span class="pl-k">=</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FlatShading</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NoBlending</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AdditiveBlending</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractiveBlending</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyBlending</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CustomBlending</span><span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AddEquation</span><span class="pl-k">=</span><span class="pl-c1">100</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractEquation</span><span class="pl-k">=</span><span class="pl-c1">101</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ReverseSubtractEquation</span><span class="pl-k">=</span><span class="pl-c1">102</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MinEquation</span><span class="pl-k">=</span><span class="pl-c1">103</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MaxEquation</span><span class="pl-k">=</span><span class="pl-c1">104</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ZeroFactor</span><span class="pl-k">=</span><span class="pl-c1">200</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneFactor</span><span class="pl-k">=</span><span class="pl-c1">201</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SrcColorFactor</span><span class="pl-k">=</span><span class="pl-c1">202</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcColorFactor</span><span class="pl-k">=</span><span class="pl-c1">203</span>;</td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">204</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">205</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">DstAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">206</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">207</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">DstColorFactor</span><span class="pl-k">=</span><span class="pl-c1">208</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstColorFactor</span><span class="pl-k">=</span><span class="pl-c1">209</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaSaturateFactor</span><span class="pl-k">=</span><span class="pl-c1">210</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NeverDepth</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AlwaysDepth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LessDepth</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LessEqualDepth</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">EqualDepth</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">GreaterEqualDepth</span><span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">GreaterDepth</span><span class="pl-k">=</span><span class="pl-c1">6</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NotEqualDepth</span><span class="pl-k">=</span><span class="pl-c1">7</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MixOperation</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AddOperation</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UVMapping</span><span class="pl-k">=</span><span class="pl-c1">300</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeReflectionMapping</span><span class="pl-k">=</span><span class="pl-c1">301</span>;</td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CubeRefractionMapping</span><span class="pl-k">=</span><span class="pl-c1">302</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">EquirectangularReflectionMapping</span><span class="pl-k">=</span><span class="pl-c1">303</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">EquirectangularRefractionMapping</span><span class="pl-k">=</span><span class="pl-c1">304</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SphericalReflectionMapping</span><span class="pl-k">=</span><span class="pl-c1">305</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span><span class="pl-k">=</span><span class="pl-c1">1E3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span><span class="pl-k">=</span><span class="pl-c1">1001</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span><span class="pl-k">=</span><span class="pl-c1">1002</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span><span class="pl-k">=</span><span class="pl-c1">1003</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapNearestFilter</span><span class="pl-k">=</span><span class="pl-c1">1004</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapLinearFilter</span><span class="pl-k">=</span><span class="pl-c1">1005</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span><span class="pl-k">=</span><span class="pl-c1">1006</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapNearestFilter</span><span class="pl-k">=</span><span class="pl-c1">1007</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span><span class="pl-k">=</span><span class="pl-c1">1008</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span><span class="pl-k">=</span><span class="pl-c1">1009</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ByteType</span><span class="pl-k">=</span><span class="pl-c1">1010</span>;</td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShortType</span><span class="pl-k">=</span><span class="pl-c1">1011</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShortType</span><span class="pl-k">=</span><span class="pl-c1">1012</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">IntType</span><span class="pl-k">=</span><span class="pl-c1">1013</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedIntType</span><span class="pl-k">=</span><span class="pl-c1">1014</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span><span class="pl-k">=</span><span class="pl-c1">1015</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">HalfFloatType</span><span class="pl-k">=</span><span class="pl-c1">1025</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort4444Type</span><span class="pl-k">=</span><span class="pl-c1">1016</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort5551Type</span><span class="pl-k">=</span><span class="pl-c1">1017</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort565Type</span><span class="pl-k">=</span><span class="pl-c1">1018</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AlphaFormat</span><span class="pl-k">=</span><span class="pl-c1">1019</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span><span class="pl-k">=</span><span class="pl-c1">1020</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span><span class="pl-k">=</span><span class="pl-c1">1021</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceFormat</span><span class="pl-k">=</span><span class="pl-c1">1022</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceAlphaFormat</span><span class="pl-k">=</span><span class="pl-c1">1023</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBEFormat</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_S3TC_DXT1_Format</span><span class="pl-k">=</span><span class="pl-c1">2001</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT1_Format</span><span class="pl-k">=</span><span class="pl-c1">2002</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT3_Format</span><span class="pl-k">=</span><span class="pl-c1">2003</span>;</td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT5_Format</span><span class="pl-k">=</span><span class="pl-c1">2004</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_PVRTC_4BPPV1_Format</span><span class="pl-k">=</span><span class="pl-c1">2100</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_PVRTC_2BPPV1_Format</span><span class="pl-k">=</span><span class="pl-c1">2101</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_PVRTC_4BPPV1_Format</span><span class="pl-k">=</span><span class="pl-c1">2102</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_PVRTC_2BPPV1_Format</span><span class="pl-k">=</span><span class="pl-c1">2103</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LoopOnce</span><span class="pl-k">=</span><span class="pl-c1">2200</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LoopRepeat</span><span class="pl-k">=</span><span class="pl-c1">2201</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LoopPingPong</span><span class="pl-k">=</span><span class="pl-c1">2202</span>;</td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Projector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector has been moved to /examples/js/renderers/Projector.js.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">projectVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector: .projectVector() is now vector.project().<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">a</span>.<span class="pl-en">project</span>(b)};<span class="pl-c1">this</span>.<span class="pl-en">unprojectVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector: .unprojectVector() is now vector.unproject().<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">a</span>.<span class="pl-en">unproject</span>(b)};<span class="pl-c1">this</span>.<span class="pl-en">pickingRay</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector: .pickingRay() is now raycaster.setFromCamera().<span class="pl-pds">&quot;</span></span>)}};</td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CanvasRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">domElement</span><span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">setClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">setSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}};<span class="pl-c1">THREE</span>.<span class="pl-en">Color</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-c1">arguments</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">fromArray</span>(<span class="pl-c1">arguments</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(a)};</td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Color,r:1,g:1,b:1,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">copy</span>(a)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> a<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">setHex</span>(a)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">setStyle</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setHex</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>(a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>(a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setRGB</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setHSL</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">+=</span><span class="pl-c1">1</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">-=</span><span class="pl-c1">1</span>);<span class="pl-k">return</span> d<span class="pl-k">&lt;</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">6</span><span class="pl-k">?</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a)<span class="pl-k">*</span>d<span class="pl-k">:</span><span class="pl-c1">.5</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span>c<span class="pl-k">:</span>d<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">?</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">-</span>d)<span class="pl-k">:</span>a}<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,</td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>,<span class="pl-smi">d</span>){b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">euclideanModulo</span>(b,<span class="pl-c1">1</span>);c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(d,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>d<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">&gt;=</span>d<span class="pl-k">?</span>d<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>c)<span class="pl-k">:</span>d<span class="pl-k">+</span>c<span class="pl-k">-</span>d<span class="pl-k">*</span>c,d<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>d<span class="pl-k">-</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-en">a</span>(d,c,b<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>),<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-en">a</span>(d,c,b),<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-en">a</span>(d,c,b<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">setStyle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-c1">parseFloat</span>(b)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Color: Alpha component of <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> will be ignored.<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">var</span> c;<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>((?:rgb<span class="pl-k">|</span>hsl)a<span class="pl-k">?</span>)<span class="pl-cce">\(</span><span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-k">^</span><span class="pl-cce">\)</span>]</span><span class="pl-k">*</span>)<span class="pl-cce">\)</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(a)){<span class="pl-k">var</span> d<span class="pl-k">=</span>c[<span class="pl-c1">2</span>];<span class="pl-k">switch</span>(c[<span class="pl-c1">1</span>]){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>rgb<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>rgba<span class="pl-pds">&quot;</span></span>:<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>(,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>)<span class="pl-k">?</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d))<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-en">b</span>(c[<span class="pl-c1">5</span>]),<span class="pl-c1">this</span>;<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>(,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>)<span class="pl-k">?</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d))<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-en">b</span>(c[<span class="pl-c1">5</span>]),<span class="pl-c1">this</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>hsl<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>hsla<span class="pl-pds">&quot;</span></span>:<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>(,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>)<span class="pl-k">?</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d)){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">parseFloat</span>(c[<span class="pl-c1">1</span>])<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">360</span>,e<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>)<span class="pl-k">/</span><span class="pl-c1">100</span>,g<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>)<span class="pl-k">/</span><span class="pl-c1">100</span>;<span class="pl-en">b</span>(c[<span class="pl-c1">5</span>]);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">setHSL</span>(d,e,g)}}}<span class="pl-k">else</span> <span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\#</span>(<span class="pl-c1">[<span class="pl-c1">A-Fa-f0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(a)){c<span class="pl-k">=</span>c[<span class="pl-c1">1</span>];d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">===</span>d)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">2</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>;<span class="pl-k">if</span>(<span class="pl-c1">6</span><span class="pl-k">===</span>d)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">3</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">4</span>)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">5</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-c1">this</span>}a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ColorKeywords</span>[a],</td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">setHex</span>(c)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Color: Unknown color <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span>,<span class="pl-c1">this</span>.<span class="pl-smi">g</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyGammaToLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">2</span>);<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">a</span>.<span class="pl-smi">r</span>,b);<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">a</span>.<span class="pl-smi">g</span>,b);<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">a</span>.<span class="pl-smi">b</span>,b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyLinearToGamma</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">2</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">a</span>.<span class="pl-smi">r</span>,c);<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">a</span>.<span class="pl-smi">g</span>,c);<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">a</span>.<span class="pl-smi">b</span>,c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">convertGammaToLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">r</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span>;<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>a<span class="pl-k">*</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>b<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c<span class="pl-k">*</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">convertLinearToGamma</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span>);<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">g</span>);<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">b</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getHex</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span><span class="pl-k">^</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span><span class="pl-k">^</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">0</span>},<span class="pl-en">getHexString</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>000000<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-en">getHex</span>().<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>)).<span class="pl-c1">slice</span>(<span class="pl-k">-</span><span class="pl-c1">6</span>)},<span class="pl-en">getHSL</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span>{h<span class="pl-k">:</span><span class="pl-c1">0</span>,s<span class="pl-k">:</span><span class="pl-c1">0</span>,l<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span>,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(b,c,d),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b,c,d),f,h<span class="pl-k">=</span>(g<span class="pl-k">+</span>e)<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-k">if</span>(g<span class="pl-k">===</span>e)g<span class="pl-k">=</span>f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> l<span class="pl-k">=</span>e<span class="pl-k">-</span>g,g<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">&gt;=</span>h<span class="pl-k">?</span>l<span class="pl-k">/</span>(e<span class="pl-k">+</span>g)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">-</span>e<span class="pl-k">-</span>g);<span class="pl-k">switch</span>(e){<span class="pl-k">case</span> b:f<span class="pl-k">=</span>(c<span class="pl-k">-</span>d)<span class="pl-k">/</span>l<span class="pl-k">+</span>(c<span class="pl-k">&lt;</span>d<span class="pl-k">?</span><span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">0</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> c:f<span class="pl-k">=</span>(d<span class="pl-k">-</span>b)<span class="pl-k">/</span>l<span class="pl-k">+</span><span class="pl-c1">2</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> d:f<span class="pl-k">=</span>(b<span class="pl-k">-</span>c)<span class="pl-k">/</span>l<span class="pl-k">+</span><span class="pl-c1">4</span>}f<span class="pl-k">/=</span><span class="pl-c1">6</span>}<span class="pl-smi">a</span>.<span class="pl-smi">h</span><span class="pl-k">=</span>f;<span class="pl-smi">a</span>.<span class="pl-smi">s</span><span class="pl-k">=</span>g;<span class="pl-smi">a</span>.<span class="pl-smi">l</span><span class="pl-k">=</span>h;<span class="pl-k">return</span> a},<span class="pl-en">getStyle</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgb(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-en">offsetHSL</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getHSL</span>();<span class="pl-smi">d</span>.<span class="pl-smi">h</span><span class="pl-k">+=</span>a;<span class="pl-smi">d</span>.<span class="pl-smi">s</span><span class="pl-k">+=</span>b;<span class="pl-smi">d</span>.<span class="pl-smi">l</span><span class="pl-k">+=</span>c;<span class="pl-c1">this</span>.<span class="pl-en">setHSL</span>(<span class="pl-smi">d</span>.<span class="pl-smi">h</span>,<span class="pl-smi">d</span>.<span class="pl-smi">s</span>,<span class="pl-smi">d</span>.<span class="pl-smi">l</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addColors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">r</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">g</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">b</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line">a;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">r</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">g</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">b</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">r</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>a[b];<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">r</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span>;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span>;<span class="pl-k">return</span> a}};</td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ColorKeywords</span><span class="pl-k">=</span>{aliceblue<span class="pl-k">:</span><span class="pl-c1">15792383</span>,antiquewhite<span class="pl-k">:</span><span class="pl-c1">16444375</span>,aqua<span class="pl-k">:</span><span class="pl-c1">65535</span>,aquamarine<span class="pl-k">:</span><span class="pl-c1">8388564</span>,azure<span class="pl-k">:</span><span class="pl-c1">15794175</span>,beige<span class="pl-k">:</span><span class="pl-c1">16119260</span>,bisque<span class="pl-k">:</span><span class="pl-c1">16770244</span>,black<span class="pl-k">:</span><span class="pl-c1">0</span>,blanchedalmond<span class="pl-k">:</span><span class="pl-c1">16772045</span>,blue<span class="pl-k">:</span><span class="pl-c1">255</span>,blueviolet<span class="pl-k">:</span><span class="pl-c1">9055202</span>,brown<span class="pl-k">:</span><span class="pl-c1">10824234</span>,burlywood<span class="pl-k">:</span><span class="pl-c1">14596231</span>,cadetblue<span class="pl-k">:</span><span class="pl-c1">6266528</span>,chartreuse<span class="pl-k">:</span><span class="pl-c1">8388352</span>,chocolate<span class="pl-k">:</span><span class="pl-c1">13789470</span>,coral<span class="pl-k">:</span><span class="pl-c1">16744272</span>,cornflowerblue<span class="pl-k">:</span><span class="pl-c1">6591981</span>,cornsilk<span class="pl-k">:</span><span class="pl-c1">16775388</span>,crimson<span class="pl-k">:</span><span class="pl-c1">14423100</span>,cyan<span class="pl-k">:</span><span class="pl-c1">65535</span>,darkblue<span class="pl-k">:</span><span class="pl-c1">139</span>,darkcyan<span class="pl-k">:</span><span class="pl-c1">35723</span>,darkgoldenrod<span class="pl-k">:</span><span class="pl-c1">12092939</span>,darkgray<span class="pl-k">:</span><span class="pl-c1">11119017</span>,darkgreen<span class="pl-k">:</span><span class="pl-c1">25600</span>,darkgrey<span class="pl-k">:</span><span class="pl-c1">11119017</span>,darkkhaki<span class="pl-k">:</span><span class="pl-c1">12433259</span>,darkmagenta<span class="pl-k">:</span><span class="pl-c1">9109643</span>,</td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line">darkolivegreen<span class="pl-k">:</span><span class="pl-c1">5597999</span>,darkorange<span class="pl-k">:</span><span class="pl-c1">16747520</span>,darkorchid<span class="pl-k">:</span><span class="pl-c1">10040012</span>,darkred<span class="pl-k">:</span><span class="pl-c1">9109504</span>,darksalmon<span class="pl-k">:</span><span class="pl-c1">15308410</span>,darkseagreen<span class="pl-k">:</span><span class="pl-c1">9419919</span>,darkslateblue<span class="pl-k">:</span><span class="pl-c1">4734347</span>,darkslategray<span class="pl-k">:</span><span class="pl-c1">3100495</span>,darkslategrey<span class="pl-k">:</span><span class="pl-c1">3100495</span>,darkturquoise<span class="pl-k">:</span><span class="pl-c1">52945</span>,darkviolet<span class="pl-k">:</span><span class="pl-c1">9699539</span>,deeppink<span class="pl-k">:</span><span class="pl-c1">16716947</span>,deepskyblue<span class="pl-k">:</span><span class="pl-c1">49151</span>,dimgray<span class="pl-k">:</span><span class="pl-c1">6908265</span>,dimgrey<span class="pl-k">:</span><span class="pl-c1">6908265</span>,dodgerblue<span class="pl-k">:</span><span class="pl-c1">2003199</span>,firebrick<span class="pl-k">:</span><span class="pl-c1">11674146</span>,floralwhite<span class="pl-k">:</span><span class="pl-c1">16775920</span>,forestgreen<span class="pl-k">:</span><span class="pl-c1">2263842</span>,fuchsia<span class="pl-k">:</span><span class="pl-c1">16711935</span>,gainsboro<span class="pl-k">:</span><span class="pl-c1">14474460</span>,ghostwhite<span class="pl-k">:</span><span class="pl-c1">16316671</span>,gold<span class="pl-k">:</span><span class="pl-c1">16766720</span>,goldenrod<span class="pl-k">:</span><span class="pl-c1">14329120</span>,gray<span class="pl-k">:</span><span class="pl-c1">8421504</span>,green<span class="pl-k">:</span><span class="pl-c1">32768</span>,greenyellow<span class="pl-k">:</span><span class="pl-c1">11403055</span>,</td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">grey<span class="pl-k">:</span><span class="pl-c1">8421504</span>,honeydew<span class="pl-k">:</span><span class="pl-c1">15794160</span>,hotpink<span class="pl-k">:</span><span class="pl-c1">16738740</span>,indianred<span class="pl-k">:</span><span class="pl-c1">13458524</span>,indigo<span class="pl-k">:</span><span class="pl-c1">4915330</span>,ivory<span class="pl-k">:</span><span class="pl-c1">16777200</span>,khaki<span class="pl-k">:</span><span class="pl-c1">15787660</span>,lavender<span class="pl-k">:</span><span class="pl-c1">15132410</span>,lavenderblush<span class="pl-k">:</span><span class="pl-c1">16773365</span>,lawngreen<span class="pl-k">:</span><span class="pl-c1">8190976</span>,lemonchiffon<span class="pl-k">:</span><span class="pl-c1">16775885</span>,lightblue<span class="pl-k">:</span><span class="pl-c1">11393254</span>,lightcoral<span class="pl-k">:</span><span class="pl-c1">15761536</span>,lightcyan<span class="pl-k">:</span><span class="pl-c1">14745599</span>,lightgoldenrodyellow<span class="pl-k">:</span><span class="pl-c1">16448210</span>,lightgray<span class="pl-k">:</span><span class="pl-c1">13882323</span>,lightgreen<span class="pl-k">:</span><span class="pl-c1">9498256</span>,lightgrey<span class="pl-k">:</span><span class="pl-c1">13882323</span>,lightpink<span class="pl-k">:</span><span class="pl-c1">16758465</span>,lightsalmon<span class="pl-k">:</span><span class="pl-c1">16752762</span>,lightseagreen<span class="pl-k">:</span><span class="pl-c1">2142890</span>,lightskyblue<span class="pl-k">:</span><span class="pl-c1">8900346</span>,lightslategray<span class="pl-k">:</span><span class="pl-c1">7833753</span>,lightslategrey<span class="pl-k">:</span><span class="pl-c1">7833753</span>,lightsteelblue<span class="pl-k">:</span><span class="pl-c1">11584734</span>,lightyellow<span class="pl-k">:</span><span class="pl-c1">16777184</span>,</td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line">lime<span class="pl-k">:</span><span class="pl-c1">65280</span>,limegreen<span class="pl-k">:</span><span class="pl-c1">3329330</span>,linen<span class="pl-k">:</span><span class="pl-c1">16445670</span>,magenta<span class="pl-k">:</span><span class="pl-c1">16711935</span>,maroon<span class="pl-k">:</span><span class="pl-c1">8388608</span>,mediumaquamarine<span class="pl-k">:</span><span class="pl-c1">6737322</span>,mediumblue<span class="pl-k">:</span><span class="pl-c1">205</span>,mediumorchid<span class="pl-k">:</span><span class="pl-c1">12211667</span>,mediumpurple<span class="pl-k">:</span><span class="pl-c1">9662683</span>,mediumseagreen<span class="pl-k">:</span><span class="pl-c1">3978097</span>,mediumslateblue<span class="pl-k">:</span><span class="pl-c1">8087790</span>,mediumspringgreen<span class="pl-k">:</span><span class="pl-c1">64154</span>,mediumturquoise<span class="pl-k">:</span><span class="pl-c1">4772300</span>,mediumvioletred<span class="pl-k">:</span><span class="pl-c1">13047173</span>,midnightblue<span class="pl-k">:</span><span class="pl-c1">1644912</span>,mintcream<span class="pl-k">:</span><span class="pl-c1">16121850</span>,mistyrose<span class="pl-k">:</span><span class="pl-c1">16770273</span>,moccasin<span class="pl-k">:</span><span class="pl-c1">16770229</span>,navajowhite<span class="pl-k">:</span><span class="pl-c1">16768685</span>,navy<span class="pl-k">:</span><span class="pl-c1">128</span>,oldlace<span class="pl-k">:</span><span class="pl-c1">16643558</span>,olive<span class="pl-k">:</span><span class="pl-c1">8421376</span>,olivedrab<span class="pl-k">:</span><span class="pl-c1">7048739</span>,orange<span class="pl-k">:</span><span class="pl-c1">16753920</span>,orangered<span class="pl-k">:</span><span class="pl-c1">16729344</span>,orchid<span class="pl-k">:</span><span class="pl-c1">14315734</span>,palegoldenrod<span class="pl-k">:</span><span class="pl-c1">15657130</span>,</td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line">palegreen<span class="pl-k">:</span><span class="pl-c1">10025880</span>,paleturquoise<span class="pl-k">:</span><span class="pl-c1">11529966</span>,palevioletred<span class="pl-k">:</span><span class="pl-c1">14381203</span>,papayawhip<span class="pl-k">:</span><span class="pl-c1">16773077</span>,peachpuff<span class="pl-k">:</span><span class="pl-c1">16767673</span>,peru<span class="pl-k">:</span><span class="pl-c1">13468991</span>,pink<span class="pl-k">:</span><span class="pl-c1">16761035</span>,plum<span class="pl-k">:</span><span class="pl-c1">14524637</span>,powderblue<span class="pl-k">:</span><span class="pl-c1">11591910</span>,purple<span class="pl-k">:</span><span class="pl-c1">8388736</span>,red<span class="pl-k">:</span><span class="pl-c1">16711680</span>,rosybrown<span class="pl-k">:</span><span class="pl-c1">12357519</span>,royalblue<span class="pl-k">:</span><span class="pl-c1">4286945</span>,saddlebrown<span class="pl-k">:</span><span class="pl-c1">9127187</span>,salmon<span class="pl-k">:</span><span class="pl-c1">16416882</span>,sandybrown<span class="pl-k">:</span><span class="pl-c1">16032864</span>,seagreen<span class="pl-k">:</span><span class="pl-c1">3050327</span>,seashell<span class="pl-k">:</span><span class="pl-c1">16774638</span>,sienna<span class="pl-k">:</span><span class="pl-c1">10506797</span>,silver<span class="pl-k">:</span><span class="pl-c1">12632256</span>,skyblue<span class="pl-k">:</span><span class="pl-c1">8900331</span>,slateblue<span class="pl-k">:</span><span class="pl-c1">6970061</span>,slategray<span class="pl-k">:</span><span class="pl-c1">7372944</span>,slategrey<span class="pl-k">:</span><span class="pl-c1">7372944</span>,snow<span class="pl-k">:</span><span class="pl-c1">16775930</span>,springgreen<span class="pl-k">:</span><span class="pl-c1">65407</span>,steelblue<span class="pl-k">:</span><span class="pl-c1">4620980</span>,tan<span class="pl-k">:</span><span class="pl-c1">13808780</span>,teal<span class="pl-k">:</span><span class="pl-c1">32896</span>,thistle<span class="pl-k">:</span><span class="pl-c1">14204888</span>,</td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line">tomato<span class="pl-k">:</span><span class="pl-c1">16737095</span>,turquoise<span class="pl-k">:</span><span class="pl-c1">4251856</span>,violet<span class="pl-k">:</span><span class="pl-c1">15631086</span>,wheat<span class="pl-k">:</span><span class="pl-c1">16113331</span>,white<span class="pl-k">:</span><span class="pl-c1">16777215</span>,whitesmoke<span class="pl-k">:</span><span class="pl-c1">16119285</span>,yellow<span class="pl-k">:</span><span class="pl-c1">16776960</span>,yellowgreen<span class="pl-k">:</span><span class="pl-c1">10145074</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">Quaternion</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Quaternion</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Quaternion,get <span class="pl-en">x</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_x</span>},<span class="pl-k">set</span> <span class="pl-en">x</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-k">get</span> <span class="pl-en">y</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_y</span>},<span class="pl-k">set</span> <span class="pl-en">y</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-k">get</span> <span class="pl-en">z</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_z</span>},<span class="pl-k">set</span> <span class="pl-en">z</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-k">get</span> <span class="pl-en">w</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_w</span>},<span class="pl-k">set</span> <span class="pl-en">w</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span>)},</td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line"><span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Euler</span>)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_x</span><span class="pl-k">/</span><span class="pl-c1">2</span>),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_y</span><span class="pl-k">/</span><span class="pl-c1">2</span>),e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_z</span><span class="pl-k">/</span><span class="pl-c1">2</span>),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_x</span><span class="pl-k">/</span><span class="pl-c1">2</span>),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_y</span><span class="pl-k">/</span><span class="pl-c1">2</span>),h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_z</span><span class="pl-k">/</span><span class="pl-c1">2</span>),l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">order</span>;<span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b)<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromAxisAngle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(c);<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];a<span class="pl-k">=</span>b[<span class="pl-c1">4</span>];<span class="pl-k">var</span> d<span class="pl-k">=</span>b[<span class="pl-c1">8</span>],e<span class="pl-k">=</span>b[<span class="pl-c1">1</span>],g<span class="pl-k">=</span>b[<span class="pl-c1">5</span>],f<span class="pl-k">=</span>b[<span class="pl-c1">9</span>],h<span class="pl-k">=</span>b[<span class="pl-c1">2</span>],l<span class="pl-k">=</span>b[<span class="pl-c1">6</span>],b<span class="pl-k">=</span>b[<span class="pl-c1">10</span>],k<span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>k<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(k<span class="pl-k">+</span><span class="pl-c1">1</span>),<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span><span class="pl-c1">.25</span><span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>(l<span class="pl-k">-</span>f)<span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>(d<span class="pl-k">-</span>h)<span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>(e<span class="pl-k">-</span>a)<span class="pl-k">*</span>c)<span class="pl-k">:</span>c<span class="pl-k">&gt;</span>g<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>c<span class="pl-k">-</span>g<span class="pl-k">-</span>b),<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>(l<span class="pl-k">-</span>f)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">.25</span><span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>e)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>(d<span class="pl-k">+</span>h)<span class="pl-k">/</span>c)<span class="pl-k">:</span>g<span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>g<span class="pl-k">-</span>c<span class="pl-k">-</span>b),<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>(d<span class="pl-k">-</span>h)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>e)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">.25</span><span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>(f<span class="pl-k">+</span>l)<span class="pl-k">/</span>c)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>b<span class="pl-k">-</span>c<span class="pl-k">-</span>g),<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>(e<span class="pl-k">-</span>a)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>(d<span class="pl-k">+</span>h)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>(f<span class="pl-k">+</span>l)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">.25</span><span class="pl-k">*</span>c);<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromUnitVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">dot</span>(d)<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-c1">1E-6</span><span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span>)<span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">c</span>.<span class="pl-c1">z</span>)<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(<span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>))<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">crossVectors</span>(c,d);<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">inverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">conjugate</span>().<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">conjugate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_w</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span>();<span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">*=</span>a);<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line"><span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">multiplyQuaternions</span>(a,b))<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">multiplyQuaternions</span>(<span class="pl-c1">this</span>,a)},<span class="pl-en">multiplyQuaternions</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_z</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_w</span>,f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">_x</span>,h<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">_y</span>,l<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">_z</span>,k<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">_w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>c<span class="pl-k">*</span>k<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">+</span>d<span class="pl-k">*</span>l<span class="pl-k">-</span>e<span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>d<span class="pl-k">*</span>k<span class="pl-k">+</span>g<span class="pl-k">*</span>h<span class="pl-k">+</span>e<span class="pl-k">*</span>f<span class="pl-k">-</span>c<span class="pl-k">*</span>l;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>e<span class="pl-k">*</span>k<span class="pl-k">+</span>g<span class="pl-k">*</span>l<span class="pl-k">+</span>c<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>g<span class="pl-k">*</span>k<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">-</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>e<span class="pl-k">*</span>l;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">applyQuaternion</span>(<span class="pl-c1">this</span>)},<span class="pl-en">slerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-c1">this</span>;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">copy</span>(a);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span>,f<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_w</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_x</span><span class="pl-k">+</span>d<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_y</span><span class="pl-k">+</span>e<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">_z</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">_w</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">_x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">_y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">_z</span>,f<span class="pl-k">=</span><span class="pl-k">-</span>f)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">copy</span>(a);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;=</span>f)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>g,<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>d,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>e,<span class="pl-c1">this</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(f),l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>f<span class="pl-k">*</span>f);<span class="pl-k">if</span>(<span class="pl-c1">.001</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(l))<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(g<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span>),<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(c<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span>),<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(d<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span>),<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span>),<span class="pl-c1">this</span>;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>((<span class="pl-c1">1</span><span class="pl-k">-</span>b)<span class="pl-k">*</span>h)<span class="pl-k">/</span>l;h<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b<span class="pl-k">*</span>h)<span class="pl-k">/</span>l;<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>g<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>d<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>e<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">_x</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">_y</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">_z</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">_w</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a[b];<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-c1">this</span>.<span class="pl-smi">_w</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">3</span>];<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span>;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span>;a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_w</span>;<span class="pl-k">return</span> a},<span class="pl-en">onChange</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">onChangeCallback</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line">a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">onChangeCallback</span><span class="pl-k">:</span><span class="pl-k">function</span>(){}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Quaternion</span>.<span class="pl-en">slerp</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> <span class="pl-smi">c</span>.<span class="pl-en">copy</span>(a).<span class="pl-en">slerp</span>(b,d)};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Vector2</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Vector2,get <span class="pl-en">width</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span>},<span class="pl-k">set</span> <span class="pl-en">width</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">height</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">y</span>},<span class="pl-k">set</span> <span class="pl-en">height</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">getComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">default</span>:<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line">a);}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">addVectors</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addScaledVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line"><span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">subVectors</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">isFinite</span>(a)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divide</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>a)},<span class="pl-en">min</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">max</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">x</span>));<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clampScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>);<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(c,c);<span class="pl-smi">b</span>.<span class="pl-c1">set</span>(d,d);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">clamp</span>(a,</td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line">b)}}(),<span class="pl-en">clampLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span>();<span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b,c))<span class="pl-k">/</span>c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">floor</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">ceil</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">round</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">roundToZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">distanceTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">distanceToSquared</span>(a))},<span class="pl-en">distanceToSquared</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> b<span class="pl-k">*</span>b<span class="pl-k">+</span>a<span class="pl-k">*</span>a},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(a<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lerpVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-en">subVectors</span>(b,a).<span class="pl-en">multiplyScalar</span>(c).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[b];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> a},<span class="pl-en">fromAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">rotateAround</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b),e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>e<span class="pl-k">*</span>c<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e<span class="pl-k">*</span>d<span class="pl-k">+</span>g<span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Vector3,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">getComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">default</span>:<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line">a);}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">addVectors</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addScaledVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">subVectors</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),</td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">multiplyVectors</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">isFinite</span>(a)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">applyEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Euler</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>);<span class="pl-c1">this</span>.<span class="pl-en">applyQuaternion</span>(<span class="pl-smi">a</span>.<span class="pl-en">setFromEuler</span>(b));</td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">applyAxisAngle</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>);<span class="pl-c1">this</span>.<span class="pl-en">applyQuaternion</span>(<span class="pl-smi">a</span>.<span class="pl-en">setFromAxisAngle</span>(b,c));<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">applyMatrix3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">12</span>];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">13</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">14</span>];</td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">applyProjection</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">11</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">15</span>]);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">12</span>])<span class="pl-k">*</span>e;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">13</span>])<span class="pl-k">*</span>e;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">14</span>])<span class="pl-k">*</span>e;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">applyQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span>a<span class="pl-k">*</span>b<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">-</span>f<span class="pl-k">*</span>c,l<span class="pl-k">=</span>a<span class="pl-k">*</span>c<span class="pl-k">+</span>f<span class="pl-k">*</span>b<span class="pl-k">-</span>e<span class="pl-k">*</span>d,k<span class="pl-k">=</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>c<span class="pl-k">-</span>g<span class="pl-k">*</span>b,b<span class="pl-k">=</span><span class="pl-k">-</span>e<span class="pl-k">*</span>b<span class="pl-k">-</span>g<span class="pl-k">*</span>c<span class="pl-k">-</span>f<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">*</span>a<span class="pl-k">+</span>b<span class="pl-k">*-</span>e<span class="pl-k">+</span>l<span class="pl-k">*-</span>f<span class="pl-k">-</span>k<span class="pl-k">*-</span>g;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>l<span class="pl-k">*</span>a<span class="pl-k">+</span>b<span class="pl-k">*-</span>g<span class="pl-k">+</span>k<span class="pl-k">*-</span>e<span class="pl-k">-</span>h<span class="pl-k">*-</span>f;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>k<span class="pl-k">*</span>a<span class="pl-k">+</span>b<span class="pl-k">*-</span>f<span class="pl-k">+</span>h<span class="pl-k">*-</span>g<span class="pl-k">-</span>l<span class="pl-k">*-</span>e;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">project</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-smi">a</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">applyProjection</span>(a)}}(),<span class="pl-en">unproject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>,<span class="pl-smi">a</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrix</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">applyProjection</span>(a)}}(),<span class="pl-en">transformDirection</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">normalize</span>();</td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divide</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>a)},<span class="pl-en">min</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">max</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">x</span>));<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>));<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">z</span>,</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">z</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clampScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(c,c,c);<span class="pl-smi">b</span>.<span class="pl-c1">set</span>(d,d,d);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">clamp</span>(a,b)}}(),<span class="pl-en">clampLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span>();<span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b,c))<span class="pl-k">/</span>c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">floor</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">ceil</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line"><span class="pl-en">round</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">roundToZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>},</td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line"><span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>)},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lerpVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-en">subVectors</span>(b,a).<span class="pl-en">multiplyScalar</span>(c).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">cross</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line">b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">crossVectors</span>(a,b);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span>e<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>d<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">crossVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>,f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>,h<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>e<span class="pl-k">*</span>f;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">-</span>d<span class="pl-k">*</span>g;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">projectOnVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(c).<span class="pl-c1">normalize</span>();b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">dot</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">copy</span>(a).<span class="pl-en">multiplyScalar</span>(b)}}(),</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class="pl-en">projectOnPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>).<span class="pl-en">projectOnVector</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">sub</span>(a)}}(),<span class="pl-en">reflect</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">sub</span>(<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(b).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-en">dot</span>(b)))}}(),<span class="pl-en">angleTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">dot</span>(a)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-c1">length</span>()<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>());<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(a,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>))},<span class="pl-en">distanceTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">distanceToSquared</span>(a))},<span class="pl-en">distanceToSquared</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> b<span class="pl-k">*</span>b<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>a},<span class="pl-en">setEulerFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">setEulerFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">getPositionFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">setFromMatrixPosition</span>(a)},</td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line"><span class="pl-en">getScaleFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">setFromMatrixScale</span>(a)},<span class="pl-en">getColumnFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">setFromMatrixColumn</span>(a,b)},<span class="pl-en">setFromMatrixPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromMatrixScale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>();a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromMatrixColumn</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>a,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d[c];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d[c<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>d[c<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[b];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> a},<span class="pl-en">fromAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector4</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Vector4</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Vector4,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span>:<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">getComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line"><span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">w</span>;<span class="pl-k">default</span>:<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">w</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">addVectors</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line"><span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addScaledVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">subVectors</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line">a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">-=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">isFinite</span>(a)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*=</span>a)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">12</span>]<span class="pl-k">*</span>e;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">13</span>]<span class="pl-k">*</span>e;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">14</span>]<span class="pl-k">*</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">11</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">15</span>]<span class="pl-k">*</span>e;<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line"><span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>a)},<span class="pl-en">setAxisAngleFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-smi">a</span>.<span class="pl-smi">w</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">/</span>b,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">/</span>b,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">/</span>b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setAxisAngleFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>a[<span class="pl-c1">0</span>];d<span class="pl-k">=</span>a[<span class="pl-c1">4</span>];<span class="pl-k">var</span> g<span class="pl-k">=</span>a[<span class="pl-c1">8</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],l<span class="pl-k">=</span>a[<span class="pl-c1">9</span>];c<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];b<span class="pl-k">=</span>a[<span class="pl-c1">6</span>];<span class="pl-k">var</span> k<span class="pl-k">=</span>a[<span class="pl-c1">10</span>];<span class="pl-k">if</span>(<span class="pl-c1">.01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d<span class="pl-k">-</span>f)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">.01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(g<span class="pl-k">-</span>c)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">.01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(l<span class="pl-k">-</span>b)){<span class="pl-k">if</span>(<span class="pl-c1">.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d<span class="pl-k">+</span>f)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(g<span class="pl-k">+</span>c)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(l<span class="pl-k">+</span>b)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">+</span>k<span class="pl-k">-</span><span class="pl-c1">3</span>))<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-c1">this</span>;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;e<span class="pl-k">=</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;h<span class="pl-k">=</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;k<span class="pl-k">=</span>(k<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;d<span class="pl-k">=</span>(d<span class="pl-k">+</span>f)<span class="pl-k">/</span><span class="pl-c1">4</span>;g<span class="pl-k">=</span>(g<span class="pl-k">+</span>c)<span class="pl-k">/</span><span class="pl-c1">4</span>;l<span class="pl-k">=</span>(l<span class="pl-k">+</span>b)<span class="pl-k">/</span><span class="pl-c1">4</span>;e<span class="pl-k">&gt;</span>h<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&gt;</span>k<span class="pl-k">?</span><span class="pl-c1">.01</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>c<span class="pl-k">=</span><span class="pl-c1">.707106781</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(e),c<span class="pl-k">=</span>d<span class="pl-k">/</span>b,d<span class="pl-k">=</span>g<span class="pl-k">/</span>b)<span class="pl-k">:</span>h<span class="pl-k">&gt;</span>k<span class="pl-k">?</span><span class="pl-c1">.01</span><span class="pl-k">&gt;</span>h<span class="pl-k">?</span>(b<span class="pl-k">=</span><span class="pl-c1">.707106781</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">.707106781</span>)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h),b<span class="pl-k">=</span>d<span class="pl-k">/</span>c,d<span class="pl-k">=</span>l<span class="pl-k">/</span>c)<span class="pl-k">:</span><span class="pl-c1">.01</span><span class="pl-k">&gt;</span>k<span class="pl-k">?</span>(c<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">.707106781</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(k),b<span class="pl-k">=</span>g<span class="pl-k">/</span>d,c<span class="pl-k">=</span>l<span class="pl-k">/</span>d);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(b,c,d,a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>((b<span class="pl-k">-</span>l)<span class="pl-k">*</span>(b<span class="pl-k">-</span>l)<span class="pl-k">+</span>(g<span class="pl-k">-</span>c)<span class="pl-k">*</span>(g<span class="pl-k">-</span>c)<span class="pl-k">+</span>(f<span class="pl-k">-</span>d)<span class="pl-k">*</span>(f<span class="pl-k">-</span>d));<span class="pl-c1">.001</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(b<span class="pl-k">-</span>l)<span class="pl-k">/</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(g<span class="pl-k">-</span>c)<span class="pl-k">/</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(f<span class="pl-k">-</span>d)<span class="pl-k">/</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>((e<span class="pl-k">+</span>h<span class="pl-k">+</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">min</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>,<span class="pl-smi">a</span>.<span class="pl-smi">w</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">max</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>,<span class="pl-smi">a</span>.<span class="pl-smi">w</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">x</span>));<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>));<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span>));<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">a</span>.<span class="pl-smi">w</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-smi">w</span>,<span class="pl-c1">this</span>.<span class="pl-smi">w</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clampScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,</td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>);<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(c,c,c,c);<span class="pl-smi">b</span>.<span class="pl-c1">set</span>(d,d,d,d);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">clamp</span>(a,b)}}(),<span class="pl-en">floor</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">ceil</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">round</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line"><span class="pl-en">roundToZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>)},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lerpVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-en">subVectors</span>(b,a).<span class="pl-en">multiplyScalar</span>(c).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[b];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">3</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> a},<span class="pl-en">fromAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>[b<span class="pl-k">+</span><span class="pl-c1">3</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>}};</td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Euler</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_order</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Euler</span>.<span class="pl-smi">DefaultOrder</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Euler</span>.<span class="pl-smi">RotationOrders</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ YZX ZXY XZY YXZ ZYX<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Euler</span>.<span class="pl-smi">DefaultOrder</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Euler</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Euler,get <span class="pl-en">x</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_x</span>},<span class="pl-k">set</span> <span class="pl-en">x</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-k">get</span> <span class="pl-en">y</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_y</span>},<span class="pl-k">set</span> <span class="pl-en">y</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-k">get</span> <span class="pl-en">z</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_z</span>},<span class="pl-k">set</span> <span class="pl-en">z</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-k">get</span> <span class="pl-en">order</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_order</span>},<span class="pl-k">set</span> <span class="pl-en">order</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_order</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>()},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">_order</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">_order</span>;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span>,</td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">_y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_order</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_order</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_order</span>;<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">clamp</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>e[<span class="pl-c1">0</span>];<span class="pl-k">var</span> g<span class="pl-k">=</span>e[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>e[<span class="pl-c1">8</span>],h<span class="pl-k">=</span>e[<span class="pl-c1">1</span>],l<span class="pl-k">=</span>e[<span class="pl-c1">5</span>],k<span class="pl-k">=</span>e[<span class="pl-c1">9</span>],m<span class="pl-k">=</span>e[<span class="pl-c1">2</span>],p<span class="pl-k">=</span>e[<span class="pl-c1">6</span>],e<span class="pl-k">=</span>e[<span class="pl-c1">10</span>];b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">_order</span>;<span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">d</span>(f,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),<span class="pl-c1">.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>k,e),<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>g,a))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(p,l),<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span><span class="pl-en">d</span>(k,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),<span class="pl-c1">.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(k)<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(f,e),<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,l))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>m,a),<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">d</span>(p,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),<span class="pl-c1">.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(p)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>m,e),<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>g,l))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,a)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span><span class="pl-en">d</span>(m,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),<span class="pl-c1">.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(m)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(p,e),<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,a))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>g,l)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">d</span>(h,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),<span class="pl-c1">.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(h)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>k,l),<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>m,a))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(f,e)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span><span class="pl-en">d</span>(g,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),<span class="pl-c1">.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(g)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(p,l),<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(f,a))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>k,e),<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Euler: .setFromRotationMatrix() given unsupported order: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b);<span class="pl-c1">this</span>.<span class="pl-smi">_order</span><span class="pl-k">=</span>b;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>c)<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeRotationFromQuaternion</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">setFromRotationMatrix</span>(a,c,d);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">setFromVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>,b<span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">_order</span>)},<span class="pl-en">reorder</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-en">setFromEuler</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-en">setFromQuaternion</span>(a,b)}}(),<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">_x</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">_y</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">_z</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">_order</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_order</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">_x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>];<span class="pl-c1">this</span>.<span class="pl-smi">_y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-smi">_z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a[<span class="pl-c1">3</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_order</span><span class="pl-k">=</span>a[<span class="pl-c1">3</span>]);<span class="pl-c1">this</span>.<span class="pl-en">onChangeCallback</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_y</span>;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_z</span>;a[b<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_order</span>;<span class="pl-k">return</span> a},<span class="pl-en">toVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span>)<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">_z</span>)},<span class="pl-en">onChange</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">onChangeCallback</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">onChangeCallback</span><span class="pl-k">:</span><span class="pl-k">function</span>(){}};<span class="pl-c1">THREE</span>.<span class="pl-en">Line3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">start</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">end</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Line3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Line3,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">start</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">end</span>.<span class="pl-en">copy</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">start</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">start</span>);<span class="pl-c1">this</span>.<span class="pl-smi">end</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">end</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">addVectors</span>(<span class="pl-c1">this</span>.<span class="pl-c1">start</span>,<span class="pl-c1">this</span>.<span class="pl-smi">end</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">.5</span>)},<span class="pl-en">delta</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">end</span>,<span class="pl-c1">this</span>.<span class="pl-c1">start</span>)},<span class="pl-en">distanceSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">start</span>.<span class="pl-en">distanceToSquared</span>(<span class="pl-c1">this</span>.<span class="pl-smi">end</span>)},<span class="pl-en">distance</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">start</span>.<span class="pl-en">distanceTo</span>(<span class="pl-c1">this</span>.<span class="pl-smi">end</span>)},</td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line"><span class="pl-en">at</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">delta</span>(c).<span class="pl-en">multiplyScalar</span>(a).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-c1">start</span>)},<span class="pl-en">closestPointToPointParameter</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(c,<span class="pl-c1">this</span>.<span class="pl-c1">start</span>);<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">end</span>,<span class="pl-c1">this</span>.<span class="pl-c1">start</span>);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">dot</span>(b),e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">dot</span>(a)<span class="pl-k">/</span>e;d<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(e,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-k">return</span> e}}(),<span class="pl-en">closestPointToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">closestPointToPointParameter</span>(a,b);c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">delta</span>(c).<span class="pl-en">multiplyScalar</span>(a).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-c1">start</span>)},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">start</span>.<span class="pl-en">applyMatrix4</span>(a);</td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">end</span>.<span class="pl-en">applyMatrix4</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">start</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-c1">start</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">end</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">end</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Box2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">max</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>)};</td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Box2</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Box2,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">copy</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">makeEmpty</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">expandByPoint</span>(a[b]);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromCenterAndSize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">copy</span>(c).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">.5</span>);<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">copy</span>(b).<span class="pl-c1">sub</span>(d);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">copy</span>(b).<span class="pl-c1">add</span>(d);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>);</td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeEmpty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Infinity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Infinity</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">empty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).<span class="pl-en">addVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">.5</span>)},<span class="pl-en">size</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>)},<span class="pl-en">expandByPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">min</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">max</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">expandByVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">sub</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">expandByScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">addScalar</span>(<span class="pl-k">-</span>a);</td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">addScalar</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">containsBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>},<span class="pl-en">getParameter</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).<span class="pl-c1">set</span>((<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>),(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>))},<span class="pl-en">isIntersectionBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">clampPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).<span class="pl-en">copy</span>(a).<span class="pl-en">clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>)},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">copy</span>(b).<span class="pl-en">clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>).<span class="pl-c1">sub</span>(b).<span class="pl-c1">length</span>()}}(),<span class="pl-en">intersect</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">max</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">min</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">union</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">min</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">max</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">add</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>)<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Box3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">max</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>)};</td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Box3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Box3,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">copy</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">makeEmpty</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">expandByPoint</span>(a[b]);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromCenterAndSize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">copy</span>(c).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">.5</span>);<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">copy</span>(b).<span class="pl-c1">sub</span>(d);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">copy</span>(b).<span class="pl-c1">add</span>(d);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">setFromObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-smi">b</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">makeEmpty</span>();<span class="pl-smi">b</span>.<span class="pl-en">traverse</span>(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">geometry</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e)<span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertices</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(g[e]),<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">c</span>.<span class="pl-en">expandByPoint</span>(a);<span class="pl-k">else</span> <span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>)<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(g[e],g[e<span class="pl-k">+</span><span class="pl-c1">1</span>],g[e<span class="pl-k">+</span><span class="pl-c1">2</span>]),<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">c</span>.<span class="pl-en">expandByPoint</span>(a)});<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>);</td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeEmpty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Infinity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Infinity</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">empty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">addVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">.5</span>)},<span class="pl-en">size</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>)},<span class="pl-en">expandByPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">min</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">max</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">expandByVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">sub</span>(a);</td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">expandByScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">addScalar</span>(<span class="pl-k">-</span>a);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">addScalar</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">containsBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>},<span class="pl-en">getParameter</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-c1">set</span>((<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>),(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>),(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>))},<span class="pl-en">isIntersectionBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">clampPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">copy</span>(a).<span class="pl-en">clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>)},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">copy</span>(b).<span class="pl-en">clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>).<span class="pl-c1">sub</span>(b).<span class="pl-c1">length</span>()}}(),<span class="pl-en">getBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>;<span class="pl-smi">b</span>.<span class="pl-smi">center</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">center</span>();<span class="pl-smi">b</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">size</span>(a).<span class="pl-c1">length</span>();<span class="pl-k">return</span> b}}(),<span class="pl-en">intersect</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">max</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">min</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">union</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-en">min</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>);<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-en">max</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>];<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){a[<span class="pl-c1">0</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);a[<span class="pl-c1">1</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);a[<span class="pl-c1">2</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);a[<span class="pl-c1">3</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);a[<span class="pl-c1">4</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);a[<span class="pl-c1">5</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);a[<span class="pl-c1">6</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);a[<span class="pl-c1">7</span>].<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span>).<span class="pl-en">applyMatrix4</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">makeEmpty</span>();<span class="pl-c1">this</span>.<span class="pl-en">setFromPoints</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">min</span>.<span class="pl-c1">add</span>(a);</td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">max</span>.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">min</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">max</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Matrix3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">elements</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">arguments</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Matrix3,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;k[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a;k[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b;k[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c;k[<span class="pl-c1">1</span>]<span class="pl-k">=</span>d;k[<span class="pl-c1">4</span>]<span class="pl-k">=</span>e;k[<span class="pl-c1">7</span>]<span class="pl-k">=</span>g;k[<span class="pl-c1">2</span>]<span class="pl-k">=</span>f;k[<span class="pl-c1">5</span>]<span class="pl-k">=</span>h;k[<span class="pl-c1">8</span>]<span class="pl-k">=</span>l;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">identity</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">fromArray</span>(<span class="pl-c1">this</span>.<span class="pl-c1">elements</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">0</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">8</span>]);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">applyMatrix3</span>(<span class="pl-c1">this</span>)},<span class="pl-en">multiplyVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">applyToVector3Array</span>(a)},<span class="pl-en">applyToVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">+=</span><span class="pl-c1">3</span>,c<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">a</span>.<span class="pl-en">fromArray</span>(b,c),<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix3</span>(<span class="pl-c1">this</span>),<span class="pl-smi">a</span>.<span class="pl-en">toArray</span>(b,c);<span class="pl-k">return</span> b}}(),<span class="pl-en">applyToBuffer</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-smi">itemSize</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>,c<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getX</span>(c),<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getY</span>(c),<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getZ</span>(c),<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix3</span>(<span class="pl-c1">this</span>),<span class="pl-smi">b</span>.<span class="pl-en">setXYZ</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> b}}(),<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">determinant</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,b<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],c<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">6</span>],l<span class="pl-k">=</span>a[<span class="pl-c1">7</span>],a<span class="pl-k">=</span>a[<span class="pl-c1">8</span>];<span class="pl-k">return</span> b<span class="pl-k">*</span>g<span class="pl-k">*</span>a<span class="pl-k">-</span>b<span class="pl-k">*</span>f<span class="pl-k">*</span>l<span class="pl-k">-</span>c<span class="pl-k">*</span>e<span class="pl-k">*</span>a<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>e<span class="pl-k">*</span>l<span class="pl-k">-</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>h},<span class="pl-en">getInverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;d[<span class="pl-c1">0</span>]<span class="pl-k">=</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">5</span>]<span class="pl-k">-</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">9</span>];d[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-k">-</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">1</span>]<span class="pl-k">+</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">9</span>];d[<span class="pl-c1">2</span>]<span class="pl-k">=</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">1</span>]<span class="pl-k">-</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">5</span>];d[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-k">-</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>]<span class="pl-k">+</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">4</span>]<span class="pl-k">=</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">-</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-k">-</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">+</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>];d[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c[<span class="pl-c1">9</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>]<span class="pl-k">-</span>c[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-k">-</span>c[<span class="pl-c1">9</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">+</span>c[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">-</span>c[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>];c<span class="pl-k">=</span>c[<span class="pl-c1">0</span>]<span class="pl-k">*</span>d[<span class="pl-c1">0</span>]<span class="pl-k">+</span>c[<span class="pl-c1">1</span>]<span class="pl-k">*</span>d[<span class="pl-c1">3</span>]<span class="pl-k">+</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>d[<span class="pl-c1">6</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>c){<span class="pl-k">if</span>(b)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Matrix3.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Matrix3.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">identity</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>}<span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line">c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">transpose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>];b[<span class="pl-c1">3</span>]<span class="pl-k">=</span>a;a<span class="pl-k">=</span>b[<span class="pl-c1">2</span>];b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>];b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>a;a<span class="pl-k">=</span>b[<span class="pl-c1">5</span>];b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">7</span>];b[<span class="pl-c1">7</span>]<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">flattenToArrayOffset</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a[b]<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[<span class="pl-c1">1</span>];a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c[<span class="pl-c1">2</span>];a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>c[<span class="pl-c1">3</span>];a[b<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>c[<span class="pl-c1">4</span>];a[b<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>c[<span class="pl-c1">5</span>];a[b<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>c[<span class="pl-c1">6</span>];a[b<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>c[<span class="pl-c1">7</span>];a[b<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>c[<span class="pl-c1">8</span>];<span class="pl-k">return</span> a},<span class="pl-en">getNormalMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">getInverse</span>(a).<span class="pl-en">transpose</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">transposeIntoArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>];a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>];a[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];a[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b[<span class="pl-c1">4</span>];a[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">7</span>];a[<span class="pl-c1">6</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line">b[<span class="pl-c1">2</span>];a[<span class="pl-c1">7</span>]<span class="pl-k">=</span>b[<span class="pl-c1">5</span>];a[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b[<span class="pl-c1">8</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">set</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span>[a[<span class="pl-c1">0</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">8</span>]]}};<span class="pl-c1">THREE</span>.<span class="pl-en">Matrix4</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">elements</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">arguments</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Matrix4,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">k</span>,<span class="pl-smi">m</span>,<span class="pl-smi">p</span>,<span class="pl-smi">n</span>,<span class="pl-smi">q</span>,<span class="pl-smi">s</span>,<span class="pl-smi">t</span>){<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;v[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a;v[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b;v[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c;v[<span class="pl-c1">12</span>]<span class="pl-k">=</span>d;v[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e;v[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g;v[<span class="pl-c1">9</span>]<span class="pl-k">=</span>f;v[<span class="pl-c1">13</span>]<span class="pl-k">=</span>h;v[<span class="pl-c1">2</span>]<span class="pl-k">=</span>l;v[<span class="pl-c1">6</span>]<span class="pl-k">=</span>k;v[<span class="pl-c1">10</span>]<span class="pl-k">=</span>m;v[<span class="pl-c1">14</span>]<span class="pl-k">=</span>p;v[<span class="pl-c1">3</span>]<span class="pl-k">=</span>n;v[<span class="pl-c1">7</span>]<span class="pl-k">=</span>q;v[<span class="pl-c1">11</span>]<span class="pl-k">=</span>s;v[<span class="pl-c1">15</span>]<span class="pl-k">=</span>t;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">identity</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).<span class="pl-en">fromArray</span>(<span class="pl-c1">this</span>.<span class="pl-c1">elements</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">extractPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">copyPosition</span>(a)},<span class="pl-en">copyPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span>a[<span class="pl-c1">12</span>];b[<span class="pl-c1">13</span>]<span class="pl-k">=</span>a[<span class="pl-c1">13</span>];b[<span class="pl-c1">14</span>]<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">extractBasis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>]);<span class="pl-smi">b</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">4</span>],d[<span class="pl-c1">5</span>],d[<span class="pl-c1">6</span>]);<span class="pl-smi">c</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">8</span>],d[<span class="pl-c1">9</span>],d[<span class="pl-c1">10</span>]);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeBasis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">extractRotation</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">elements</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(b[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line">b[<span class="pl-c1">1</span>],b[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(b[<span class="pl-c1">4</span>],b[<span class="pl-c1">5</span>],b[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>(),g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(b[<span class="pl-c1">8</span>],b[<span class="pl-c1">9</span>],b[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>d;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>d;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>d;c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b[<span class="pl-c1">4</span>]<span class="pl-k">*</span>e;c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span>e;c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>e;c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b[<span class="pl-c1">8</span>]<span class="pl-k">*</span>g;c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span>g;c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>g;<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">makeRotationFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Euler</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(c),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(c),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(d),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(d),h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(e),</td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(e);<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">order</span>){a<span class="pl-k">=</span>g<span class="pl-k">*</span>h;<span class="pl-k">var</span> l<span class="pl-k">=</span>g<span class="pl-k">*</span>e,k<span class="pl-k">=</span>c<span class="pl-k">*</span>h,m<span class="pl-k">=</span>c<span class="pl-k">*</span>e;b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h;b[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-k">-</span>f<span class="pl-k">*</span>e;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>d;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">+</span>k<span class="pl-k">*</span>d;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>a<span class="pl-k">-</span>m<span class="pl-k">*</span>d;b[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-k">-</span>c<span class="pl-k">*</span>f;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>m<span class="pl-k">-</span>a<span class="pl-k">*</span>d;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>k<span class="pl-k">+</span>l<span class="pl-k">*</span>d;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f}<span class="pl-k">else</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">order</span><span class="pl-k">?</span>(a<span class="pl-k">=</span>f<span class="pl-k">*</span>h,l<span class="pl-k">=</span>f<span class="pl-k">*</span>e,k<span class="pl-k">=</span>d<span class="pl-k">*</span>h,m<span class="pl-k">=</span>d<span class="pl-k">*</span>e,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a<span class="pl-k">+</span>m<span class="pl-k">*</span>c,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>c<span class="pl-k">-</span>l,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>d,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>e,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-k">-</span>c,b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>c<span class="pl-k">-</span>k,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>m<span class="pl-k">+</span>a<span class="pl-k">*</span>c,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">order</span><span class="pl-k">?</span>(a<span class="pl-k">=</span>f<span class="pl-k">*</span>h,l<span class="pl-k">=</span>f<span class="pl-k">*</span>e,k<span class="pl-k">=</span>d<span class="pl-k">*</span>h,m<span class="pl-k">=</span>d<span class="pl-k">*</span>e,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a<span class="pl-k">-</span>m<span class="pl-k">*</span>c,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span>e,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>k<span class="pl-k">+</span>l<span class="pl-k">*</span>c,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">+</span>k<span class="pl-k">*</span>c,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>m<span class="pl-k">-</span>a<span class="pl-k">*</span>c,b[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span>d,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">order</span><span class="pl-k">?</span>(a<span class="pl-k">=</span>g<span class="pl-k">*</span>h,l<span class="pl-k">=</span>g<span class="pl-k">*</span>e,k<span class="pl-k">=</span>c<span class="pl-k">*</span>h,m<span class="pl-k">=</span>c<span class="pl-k">*</span>e,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>d<span class="pl-k">-</span>l,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span>m,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>e,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">*</span>d<span class="pl-k">+</span>a,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>d<span class="pl-k">-</span>k,b[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>d,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c<span class="pl-k">*</span>f,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">order</span><span class="pl-k">?</span>(a<span class="pl-k">=</span>g<span class="pl-k">*</span>f,l<span class="pl-k">=</span>g<span class="pl-k">*</span>d,k<span class="pl-k">=</span>c<span class="pl-k">*</span>f,m<span class="pl-k">=</span>c<span class="pl-k">*</span>d,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>m<span class="pl-k">-</span>a<span class="pl-k">*</span>e,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>e<span class="pl-k">+</span>l,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-k">-</span>c<span class="pl-k">*</span>h,b[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>h,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>e<span class="pl-k">+</span>k,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>a<span class="pl-k">-</span>m<span class="pl-k">*</span>e)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">order</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>g<span class="pl-k">*</span>f,l<span class="pl-k">=</span>g<span class="pl-k">*</span>d,k<span class="pl-k">=</span>c<span class="pl-k">*</span>f,m<span class="pl-k">=</span>c<span class="pl-k">*</span>d,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-k">-</span>e,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>d<span class="pl-k">*</span>h,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>m,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>e<span class="pl-k">-</span>k,b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>e<span class="pl-k">-</span>l,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c<span class="pl-k">*</span>h,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>m<span class="pl-k">*</span>e<span class="pl-k">+</span>a);b[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setRotationFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">makeRotationFromQuaternion</span>(a)},<span class="pl-en">makeRotationFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>,f<span class="pl-k">=</span>c<span class="pl-k">+</span>c,h<span class="pl-k">=</span>d<span class="pl-k">+</span>d,l<span class="pl-k">=</span>e<span class="pl-k">+</span>e;a<span class="pl-k">=</span>c<span class="pl-k">*</span>f;<span class="pl-k">var</span> k<span class="pl-k">=</span>c<span class="pl-k">*</span>h,c<span class="pl-k">=</span>c<span class="pl-k">*</span>l,m<span class="pl-k">=</span>d<span class="pl-k">*</span>h,d<span class="pl-k">=</span>d<span class="pl-k">*</span>l,e<span class="pl-k">=</span>e<span class="pl-k">*</span>l,f<span class="pl-k">=</span>g<span class="pl-k">*</span>f,h<span class="pl-k">=</span>g<span class="pl-k">*</span>h,g<span class="pl-k">=</span>g<span class="pl-k">*</span>l;b[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(m<span class="pl-k">+</span>e);b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>k<span class="pl-k">-</span>g;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c<span class="pl-k">+</span>h;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>k<span class="pl-k">+</span>g;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>e);b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>d<span class="pl-k">-</span>f;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>c<span class="pl-k">-</span>h;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d<span class="pl-k">+</span>f;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>m);b[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);</td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-smi">c</span>.<span class="pl-en">subVectors</span>(d,e).<span class="pl-c1">normalize</span>();<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-en">lengthSq</span>()<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">crossVectors</span>(g,c).<span class="pl-c1">normalize</span>();<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-en">lengthSq</span>()<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1E-4</span>,<span class="pl-smi">a</span>.<span class="pl-en">crossVectors</span>(g,c).<span class="pl-c1">normalize</span>());<span class="pl-smi">b</span>.<span class="pl-en">crossVectors</span>(c,a);f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;f[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;f[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;f[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;f[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;f[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;f[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;f[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;f[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">multiplyMatrices</span>(a,b))<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-c1">this</span>,a)},</td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line"><span class="pl-en">multiplyMatrices</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,g<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],f<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">12</span>],k<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">13</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],s<span class="pl-k">=</span>c[<span class="pl-c1">6</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">10</span>],v<span class="pl-k">=</span>c[<span class="pl-c1">14</span>],u<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],w<span class="pl-k">=</span>c[<span class="pl-c1">7</span>],<span class="pl-c1">D</span><span class="pl-k">=</span>c[<span class="pl-c1">11</span>],c<span class="pl-k">=</span>c[<span class="pl-c1">15</span>],x<span class="pl-k">=</span>d[<span class="pl-c1">0</span>],<span class="pl-c1">B</span><span class="pl-k">=</span>d[<span class="pl-c1">4</span>],y<span class="pl-k">=</span>d[<span class="pl-c1">8</span>],z<span class="pl-k">=</span>d[<span class="pl-c1">12</span>],<span class="pl-c1">A</span><span class="pl-k">=</span>d[<span class="pl-c1">1</span>],<span class="pl-c1">J</span><span class="pl-k">=</span>d[<span class="pl-c1">5</span>],<span class="pl-c1">F</span><span class="pl-k">=</span>d[<span class="pl-c1">9</span>],<span class="pl-c1">C</span><span class="pl-k">=</span>d[<span class="pl-c1">13</span>],<span class="pl-c1">N</span><span class="pl-k">=</span>d[<span class="pl-c1">2</span>],<span class="pl-c1">L</span><span class="pl-k">=</span>d[<span class="pl-c1">6</span>],<span class="pl-c1">Q</span><span class="pl-k">=</span>d[<span class="pl-c1">10</span>],<span class="pl-c1">M</span><span class="pl-k">=</span>d[<span class="pl-c1">14</span>],<span class="pl-c1">K</span><span class="pl-k">=</span>d[<span class="pl-c1">3</span>],<span class="pl-c1">E</span><span class="pl-k">=</span>d[<span class="pl-c1">7</span>],<span class="pl-c1">O</span><span class="pl-k">=</span>d[<span class="pl-c1">11</span>],d<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>x<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">K</span>;e[<span class="pl-c1">4</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">L</span><span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">E</span>;e[<span class="pl-c1">8</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>y<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">F</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">O</span>;e[<span class="pl-c1">12</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>z<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>l<span class="pl-k">*</span>d;e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>x<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">K</span>;e[<span class="pl-c1">5</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-c1">L</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">E</span>;e[<span class="pl-c1">9</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>y<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">F</span><span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">O</span>;e[<span class="pl-c1">13</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>z<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>n<span class="pl-k">*</span>d;e[<span class="pl-c1">2</span>]<span class="pl-k">=</span>q<span class="pl-k">*</span>x<span class="pl-k">+</span>s<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>v<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">K</span>;e[<span class="pl-c1">6</span>]<span class="pl-k">=</span>q<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span>s<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-c1">L</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-c1">E</span>;e[<span class="pl-c1">10</span>]<span class="pl-k">=</span>q<span class="pl-k">*</span>y<span class="pl-k">+</span>s<span class="pl-k">*</span><span class="pl-c1">F</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-c1">O</span>;e[<span class="pl-c1">14</span>]<span class="pl-k">=</span>q<span class="pl-k">*</span>z<span class="pl-k">+</span>s<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>v<span class="pl-k">*</span>d;e[<span class="pl-c1">3</span>]<span class="pl-k">=</span>u<span class="pl-k">*</span>x<span class="pl-k">+</span>w<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">K</span>;e[<span class="pl-c1">7</span>]<span class="pl-k">=</span>u<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span>w<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">L</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">E</span>;e[<span class="pl-c1">11</span>]<span class="pl-k">=</span>u<span class="pl-k">*</span>y<span class="pl-k">+</span>w<span class="pl-k">*</span><span class="pl-c1">F</span><span class="pl-k">+</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">O</span>;e[<span class="pl-c1">15</span>]<span class="pl-k">=</span>u<span class="pl-k">*</span>z<span class="pl-k">+</span>w<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>c<span class="pl-k">*</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyToArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-en">multiplyMatrices</span>(a,b);c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>d[<span class="pl-c1">0</span>];c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>d[<span class="pl-c1">1</span>];c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>d[<span class="pl-c1">2</span>];c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>d[<span class="pl-c1">3</span>];c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>d[<span class="pl-c1">4</span>];c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>d[<span class="pl-c1">5</span>];c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d[<span class="pl-c1">6</span>];c[<span class="pl-c1">7</span>]<span class="pl-k">=</span>d[<span class="pl-c1">7</span>];c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>d[<span class="pl-c1">8</span>];c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>d[<span class="pl-c1">9</span>];c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>d[<span class="pl-c1">10</span>];c[<span class="pl-c1">11</span>]<span class="pl-k">=</span>d[<span class="pl-c1">11</span>];c[<span class="pl-c1">12</span>]<span class="pl-k">=</span>d[<span class="pl-c1">12</span>];c[<span class="pl-c1">13</span>]<span class="pl-k">=</span>d[<span class="pl-c1">13</span>];c[<span class="pl-c1">14</span>]<span class="pl-k">=</span>d[<span class="pl-c1">14</span>];c[<span class="pl-c1">15</span>]<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;</td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line">b[<span class="pl-c1">12</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">9</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">13</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">14</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">11</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">15</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">applyProjection</span>(<span class="pl-c1">this</span>)},<span class="pl-en">multiplyVector4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>)},<span class="pl-en">multiplyVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">applyToVector3Array</span>(a)},<span class="pl-en">applyToVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">+=</span><span class="pl-c1">3</span>,c<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">a</span>.<span class="pl-en">fromArray</span>(b,c),<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>),<span class="pl-smi">a</span>.<span class="pl-en">toArray</span>(b,c);<span class="pl-k">return</span> b}}(),<span class="pl-en">applyToBuffer</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-smi">itemSize</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>,c<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getX</span>(c),<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getY</span>(c),<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getZ</span>(c),<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>),<span class="pl-smi">b</span>.<span class="pl-en">setXYZ</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> b}}(),<span class="pl-en">rotateAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">a</span>.<span class="pl-en">transformDirection</span>(<span class="pl-c1">this</span>)},<span class="pl-en">crossVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>)},<span class="pl-en">determinant</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,b<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],c<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">8</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">12</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">9</span>],l<span class="pl-k">=</span>a[<span class="pl-c1">13</span>],k<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],m<span class="pl-k">=</span>a[<span class="pl-c1">6</span>],p<span class="pl-k">=</span>a[<span class="pl-c1">10</span>],n<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];<span class="pl-k">return</span> a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>(<span class="pl-k">+</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>m<span class="pl-k">-</span>d<span class="pl-k">*</span>l<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">-</span>e<span class="pl-k">*</span>f<span class="pl-k">*</span>p<span class="pl-k">+</span>c<span class="pl-k">*</span>l<span class="pl-k">*</span>p<span class="pl-k">+</span>d<span class="pl-k">*</span>f<span class="pl-k">*</span>n<span class="pl-k">-</span>c<span class="pl-k">*</span>h<span class="pl-k">*</span>n)<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>(<span class="pl-k">+</span>b<span class="pl-k">*</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span>b<span class="pl-k">*</span>l<span class="pl-k">*</span>p<span class="pl-k">+</span>e<span class="pl-k">*</span>g<span class="pl-k">*</span>p<span class="pl-k">-</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>n<span class="pl-k">+</span>d<span class="pl-k">*</span>l<span class="pl-k">*</span>k<span class="pl-k">-</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>k)<span class="pl-k">+</span>a[<span class="pl-c1">11</span>]<span class="pl-k">*</span>(<span class="pl-k">+</span>b<span class="pl-k">*</span>l<span class="pl-k">*</span>m<span class="pl-k">-</span>b<span class="pl-k">*</span>f<span class="pl-k">*</span>n<span class="pl-k">-</span>e<span class="pl-k">*</span>g<span class="pl-k">*</span>m<span class="pl-k">+</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>n<span class="pl-k">+</span>e<span class="pl-k">*</span>f<span class="pl-k">*</span>k<span class="pl-k">-</span>c<span class="pl-k">*</span>l<span class="pl-k">*</span>k)<span class="pl-k">+</span>a[<span class="pl-c1">15</span>]<span class="pl-k">*</span>(<span class="pl-k">-</span>d<span class="pl-k">*</span>f<span class="pl-k">*</span>k<span class="pl-k">-</span>b<span class="pl-k">*</span>h<span class="pl-k">*</span>m<span class="pl-k">+</span>b<span class="pl-k">*</span>f<span class="pl-k">*</span>p<span class="pl-k">+</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>m<span class="pl-k">-</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>p<span class="pl-k">+</span>c<span class="pl-k">*</span>h<span class="pl-k">*</span>k)},<span class="pl-en">transpose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,b;b<span class="pl-k">=</span>a[<span class="pl-c1">1</span>];a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a[<span class="pl-c1">4</span>];a[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>a[<span class="pl-c1">8</span>];a[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">6</span>];a[<span class="pl-c1">6</span>]<span class="pl-k">=</span>a[<span class="pl-c1">9</span>];a[<span class="pl-c1">9</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">3</span>];a[<span class="pl-c1">3</span>]<span class="pl-k">=</span>a[<span class="pl-c1">12</span>];a[<span class="pl-c1">12</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">7</span>];a[<span class="pl-c1">7</span>]<span class="pl-k">=</span>a[<span class="pl-c1">13</span>];a[<span class="pl-c1">13</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">11</span>];a[<span class="pl-c1">11</span>]<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];a[<span class="pl-c1">14</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">flattenToArrayOffset</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a[b]<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[<span class="pl-c1">1</span>];a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c[<span class="pl-c1">2</span>];a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>c[<span class="pl-c1">3</span>];a[b<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>c[<span class="pl-c1">4</span>];a[b<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>c[<span class="pl-c1">5</span>];a[b<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line">c[<span class="pl-c1">6</span>];a[b<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>c[<span class="pl-c1">7</span>];a[b<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>c[<span class="pl-c1">8</span>];a[b<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span>c[<span class="pl-c1">9</span>];a[b<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span>c[<span class="pl-c1">10</span>];a[b<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span>c[<span class="pl-c1">11</span>];a[b<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span>c[<span class="pl-c1">12</span>];a[b<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span>c[<span class="pl-c1">13</span>];a[b<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span>c[<span class="pl-c1">14</span>];a[b<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span>c[<span class="pl-c1">15</span>];<span class="pl-k">return</span> a},<span class="pl-en">getPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">set</span>(b[<span class="pl-c1">12</span>],b[<span class="pl-c1">13</span>],b[<span class="pl-c1">14</span>])}}(),<span class="pl-en">setPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getInverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span>d[<span class="pl-c1">0</span>],g<span class="pl-k">=</span>d[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>d[<span class="pl-c1">8</span>],h<span class="pl-k">=</span>d[<span class="pl-c1">12</span>],l<span class="pl-k">=</span>d[<span class="pl-c1">1</span>],k<span class="pl-k">=</span>d[<span class="pl-c1">5</span>],m<span class="pl-k">=</span>d[<span class="pl-c1">9</span>],p<span class="pl-k">=</span>d[<span class="pl-c1">13</span>],n<span class="pl-k">=</span>d[<span class="pl-c1">2</span>],q<span class="pl-k">=</span>d[<span class="pl-c1">6</span>],s<span class="pl-k">=</span>d[<span class="pl-c1">10</span>],t<span class="pl-k">=</span>d[<span class="pl-c1">14</span>],v<span class="pl-k">=</span>d[<span class="pl-c1">3</span>],u<span class="pl-k">=</span>d[<span class="pl-c1">7</span>],w<span class="pl-k">=</span>d[<span class="pl-c1">11</span>],d<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>m<span class="pl-k">*</span>t<span class="pl-k">*</span>u<span class="pl-k">-</span>p<span class="pl-k">*</span>s<span class="pl-k">*</span>u<span class="pl-k">+</span>p<span class="pl-k">*</span>q<span class="pl-k">*</span>w<span class="pl-k">-</span>k<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">-</span>m<span class="pl-k">*</span>q<span class="pl-k">*</span>d<span class="pl-k">+</span>k<span class="pl-k">*</span>s<span class="pl-k">*</span>d;c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>s<span class="pl-k">*</span>u<span class="pl-k">-</span>f<span class="pl-k">*</span>t<span class="pl-k">*</span>u<span class="pl-k">-</span>h<span class="pl-k">*</span>q<span class="pl-k">*</span>w<span class="pl-k">+</span>g<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">+</span>f<span class="pl-k">*</span>q<span class="pl-k">*</span>d<span class="pl-k">-</span>g<span class="pl-k">*</span>s<span class="pl-k">*</span>d;c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>u<span class="pl-k">-</span>h<span class="pl-k">*</span>m<span class="pl-k">*</span>u<span class="pl-k">+</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>w<span class="pl-k">-</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>w<span class="pl-k">-</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>d<span class="pl-k">+</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>d;c[<span class="pl-c1">12</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>m<span class="pl-k">*</span>q<span class="pl-k">-</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">-</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>s<span class="pl-k">+</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>s<span class="pl-k">+</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>t<span class="pl-k">-</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>t;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>s<span class="pl-k">*</span>v<span class="pl-k">-</span>m<span class="pl-k">*</span>t<span class="pl-k">*</span>v<span class="pl-k">-</span>p<span class="pl-k">*</span>n<span class="pl-k">*</span>w<span class="pl-k">+</span>l<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">+</span>m<span class="pl-k">*</span>n<span class="pl-k">*</span>d<span class="pl-k">-</span>l<span class="pl-k">*</span>s<span class="pl-k">*</span>d;c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>t<span class="pl-k">*</span>v<span class="pl-k">-</span>h<span class="pl-k">*</span>s<span class="pl-k">*</span>v<span class="pl-k">+</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>w<span class="pl-k">-</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">-</span>f<span class="pl-k">*</span>n<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>s<span class="pl-k">*</span>d;c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>m<span class="pl-k">*</span>v<span class="pl-k">-</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>v<span class="pl-k">-</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>w<span class="pl-k">+</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>w<span class="pl-k">+</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>d<span class="pl-k">-</span>e<span class="pl-k">*</span>m<span class="pl-k">*</span>d;c[<span class="pl-c1">13</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>n<span class="pl-k">-</span>h<span class="pl-k">*</span>m<span class="pl-k">*</span>n<span class="pl-k">+</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>s<span class="pl-k">-</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>s<span class="pl-k">-</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>t<span class="pl-k">+</span>e<span class="pl-k">*</span>m<span class="pl-k">*</span>t;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>t<span class="pl-k">*</span>v<span class="pl-k">-</span>p<span class="pl-k">*</span>q<span class="pl-k">*</span>v<span class="pl-k">+</span>p<span class="pl-k">*</span>n<span class="pl-k">*</span>u<span class="pl-k">-</span>l<span class="pl-k">*</span>t<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line">u<span class="pl-k">-</span>k<span class="pl-k">*</span>n<span class="pl-k">*</span>d<span class="pl-k">+</span>l<span class="pl-k">*</span>q<span class="pl-k">*</span>d;c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>q<span class="pl-k">*</span>v<span class="pl-k">-</span>g<span class="pl-k">*</span>t<span class="pl-k">*</span>v<span class="pl-k">-</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>u<span class="pl-k">+</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span>u<span class="pl-k">+</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>d<span class="pl-k">-</span>e<span class="pl-k">*</span>q<span class="pl-k">*</span>d;c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>v<span class="pl-k">-</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>v<span class="pl-k">+</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>u<span class="pl-k">-</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>u<span class="pl-k">-</span>g<span class="pl-k">*</span>l<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>k<span class="pl-k">*</span>d;c[<span class="pl-c1">14</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>n<span class="pl-k">-</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>n<span class="pl-k">-</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>q<span class="pl-k">+</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">+</span>g<span class="pl-k">*</span>l<span class="pl-k">*</span>t<span class="pl-k">-</span>e<span class="pl-k">*</span>k<span class="pl-k">*</span>t;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>m<span class="pl-k">*</span>q<span class="pl-k">*</span>v<span class="pl-k">-</span>k<span class="pl-k">*</span>s<span class="pl-k">*</span>v<span class="pl-k">-</span>m<span class="pl-k">*</span>n<span class="pl-k">*</span>u<span class="pl-k">+</span>l<span class="pl-k">*</span>s<span class="pl-k">*</span>u<span class="pl-k">+</span>k<span class="pl-k">*</span>n<span class="pl-k">*</span>w<span class="pl-k">-</span>l<span class="pl-k">*</span>q<span class="pl-k">*</span>w;c[<span class="pl-c1">7</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>s<span class="pl-k">*</span>v<span class="pl-k">-</span>f<span class="pl-k">*</span>q<span class="pl-k">*</span>v<span class="pl-k">+</span>f<span class="pl-k">*</span>n<span class="pl-k">*</span>u<span class="pl-k">-</span>e<span class="pl-k">*</span>s<span class="pl-k">*</span>u<span class="pl-k">-</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>w<span class="pl-k">+</span>e<span class="pl-k">*</span>q<span class="pl-k">*</span>w;c[<span class="pl-c1">11</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>v<span class="pl-k">-</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>v<span class="pl-k">-</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>u<span class="pl-k">+</span>e<span class="pl-k">*</span>m<span class="pl-k">*</span>u<span class="pl-k">+</span>g<span class="pl-k">*</span>l<span class="pl-k">*</span>w<span class="pl-k">-</span>e<span class="pl-k">*</span>k<span class="pl-k">*</span>w;c[<span class="pl-c1">15</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>n<span class="pl-k">-</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>n<span class="pl-k">+</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>q<span class="pl-k">-</span>e<span class="pl-k">*</span>m<span class="pl-k">*</span>q<span class="pl-k">-</span>g<span class="pl-k">*</span>l<span class="pl-k">*</span>s<span class="pl-k">+</span>e<span class="pl-k">*</span>k<span class="pl-k">*</span>s;c<span class="pl-k">=</span>e<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">+</span>l<span class="pl-k">*</span>c[<span class="pl-c1">4</span>]<span class="pl-k">+</span>n<span class="pl-k">*</span>c[<span class="pl-c1">8</span>]<span class="pl-k">+</span>v<span class="pl-k">*</span>c[<span class="pl-c1">12</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>c){<span class="pl-k">if</span>(b)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">identity</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>}<span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .translate() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateX() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateY() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateZ() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateByAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateByAxis() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">9</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">11</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getMaxScaleOnAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>a[<span class="pl-c1">2</span>],a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>a[<span class="pl-c1">4</span>]<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>a[<span class="pl-c1">5</span>]<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>a[<span class="pl-c1">6</span>],a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>a[<span class="pl-c1">8</span>]<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>a[<span class="pl-c1">9</span>]<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>a[<span class="pl-c1">10</span>]))},<span class="pl-en">makeTranslation</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(b,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(b,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b),e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>c,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,l<span class="pl-k">=</span>e<span class="pl-k">*</span>g,k<span class="pl-k">=</span>e<span class="pl-k">*</span>f;<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(l<span class="pl-k">*</span>g<span class="pl-k">+</span>c,l<span class="pl-k">*</span>f<span class="pl-k">-</span>d<span class="pl-k">*</span>h,l<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>f,<span class="pl-c1">0</span>,l<span class="pl-k">*</span>f<span class="pl-k">+</span>d<span class="pl-k">*</span>h,k<span class="pl-k">*</span>f<span class="pl-k">+</span>c,k<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>g,<span class="pl-c1">0</span>,l<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>f,k<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>g,e<span class="pl-k">*</span>h<span class="pl-k">*</span>h<span class="pl-k">+</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeScale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,c,</td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">compose</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-en">makeRotationFromQuaternion</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">scale</span>(c);<span class="pl-c1">this</span>.<span class="pl-en">setPosition</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">decompose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(g[<span class="pl-c1">0</span>],g[<span class="pl-c1">1</span>],g[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(g[<span class="pl-c1">4</span>],g[<span class="pl-c1">5</span>],g[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>(),l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">set</span>(g[<span class="pl-c1">8</span>],g[<span class="pl-c1">9</span>],g[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-en">determinant</span>()<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-k">-</span>f);<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>g[<span class="pl-c1">12</span>];<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>g[<span class="pl-c1">13</span>];<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>g[<span class="pl-c1">14</span>];<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-c1">elements</span>);c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>f;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>h,k<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>l;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>c;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>]<span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line">c;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>c;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>g;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>g;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>g;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>k;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>]<span class="pl-k">*=</span>k;<span class="pl-smi">b</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>k;<span class="pl-smi">d</span>.<span class="pl-en">setFromRotationMatrix</span>(b);<span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f;<span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>h;<span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>l;<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">makeFrustum</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);f[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">8</span>]<span class="pl-k">=</span>(b<span class="pl-k">+</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);f[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">/</span>(d<span class="pl-k">-</span>c);f[<span class="pl-c1">9</span>]<span class="pl-k">=</span>(d<span class="pl-k">+</span>c)<span class="pl-k">/</span>(d<span class="pl-k">-</span>c);f[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-k">-</span>(g<span class="pl-k">+</span>e)<span class="pl-k">/</span>(g<span class="pl-k">-</span>e);f[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">/</span>(g<span class="pl-k">-</span>e);f[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;f[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makePerspective</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">degToRad</span>(<span class="pl-c1">.5</span><span class="pl-k">*</span>a));</td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">makeFrustum</span>(e<span class="pl-k">*</span>b,a<span class="pl-k">*</span>b,e,a,c,d)},<span class="pl-en">makeOrthographic</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,h<span class="pl-k">=</span>b<span class="pl-k">-</span>a,l<span class="pl-k">=</span>c<span class="pl-k">-</span>d,k<span class="pl-k">=</span>g<span class="pl-k">-</span>e;f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span>h;f[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-k">-</span>((b<span class="pl-k">+</span>a)<span class="pl-k">/</span>h);f[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span>l;f[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-k">-</span>((c<span class="pl-k">+</span>d)<span class="pl-k">/</span>l);f[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">/</span>k;f[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-k">-</span>((g<span class="pl-k">+</span>e)<span class="pl-k">/</span>k);f[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">16</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(b[c]<span class="pl-k">!==</span>a[c])<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">set</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span>[a[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line">a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">8</span>],a[<span class="pl-c1">9</span>],a[<span class="pl-c1">10</span>],a[<span class="pl-c1">11</span>],a[<span class="pl-c1">12</span>],a[<span class="pl-c1">13</span>],a[<span class="pl-c1">14</span>],a[<span class="pl-c1">15</span>]]}};<span class="pl-c1">THREE</span>.<span class="pl-en">Ray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">origin</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Ray</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Ray,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-en">copy</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">origin</span>);<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">direction</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">at</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>).<span class="pl-en">multiplyScalar</span>(a).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>)},<span class="pl-en">recast</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-en">at</span>(b,a));<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">closestPointToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">c</span>.<span class="pl-en">subVectors</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>)<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>).<span class="pl-en">multiplyScalar</span>(d).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>)},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">distanceSqToPoint</span>(a))},<span class="pl-en">distanceSqToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(b,<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>).<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>c)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">origin</span>.<span class="pl-en">distanceToSquared</span>(b);<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>).<span class="pl-en">multiplyScalar</span>(c).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>);<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">distanceToSquared</span>(b)}}(),</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line"><span class="pl-en">distanceSqToSegment</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(d).<span class="pl-c1">add</span>(e).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">.5</span>);<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(e).<span class="pl-c1">sub</span>(d).<span class="pl-c1">normalize</span>();<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>).<span class="pl-c1">sub</span>(a);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-en">distanceTo</span>(e),l<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-en">dot</span>(b),k<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>),m<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-en">dot</span>(b),p<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">lengthSq</span>(),n<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>l<span class="pl-k">*</span>l),q;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>n<span class="pl-k">?</span>(d<span class="pl-k">=</span>l<span class="pl-k">*</span>m<span class="pl-k">-</span>k,e<span class="pl-k">=</span>l<span class="pl-k">*</span>k<span class="pl-k">-</span>m,q<span class="pl-k">=</span>h<span class="pl-k">*</span>n,<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>e<span class="pl-k">&gt;=</span><span class="pl-k">-</span>q<span class="pl-k">?</span>e<span class="pl-k">&lt;=</span>q<span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>n,d<span class="pl-k">*=</span>h,e<span class="pl-k">*=</span>h,l<span class="pl-k">=</span>d<span class="pl-k">*</span>(d<span class="pl-k">+</span>l<span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>k)<span class="pl-k">+</span>e<span class="pl-k">*</span>(l<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m)<span class="pl-k">+</span>p)<span class="pl-k">:</span>(e<span class="pl-k">=</span>h,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(l<span class="pl-k">*</span>e<span class="pl-k">+</span>k)),l<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m)<span class="pl-k">+</span>p)<span class="pl-k">:</span>(e<span class="pl-k">=</span><span class="pl-k">-</span>h,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(l<span class="pl-k">*</span>e<span class="pl-k">+</span>k)),</td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m)<span class="pl-k">+</span>p)<span class="pl-k">:</span>e<span class="pl-k">&lt;=</span><span class="pl-k">-</span>q<span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(<span class="pl-k">-</span>l<span class="pl-k">*</span>h<span class="pl-k">+</span>k)),e<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d<span class="pl-k">?</span><span class="pl-k">-</span>h<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-k">-</span>h,<span class="pl-k">-</span>m),h),l<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m)<span class="pl-k">+</span>p)<span class="pl-k">:</span>e<span class="pl-k">&lt;=</span>q<span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-k">-</span>h,<span class="pl-k">-</span>m),h),l<span class="pl-k">=</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m)<span class="pl-k">+</span>p)<span class="pl-k">:</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(l<span class="pl-k">*</span>h<span class="pl-k">+</span>k)),e<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d<span class="pl-k">?</span>h<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-k">-</span>h,<span class="pl-k">-</span>m),h),l<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m)<span class="pl-k">+</span>p))<span class="pl-k">:</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>l<span class="pl-k">?</span><span class="pl-k">-</span>h<span class="pl-k">:</span>h,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(l<span class="pl-k">*</span>e<span class="pl-k">+</span>k)),l<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m)<span class="pl-k">+</span>p);g<span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>).<span class="pl-en">multiplyScalar</span>(d).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>);f<span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-en">copy</span>(b).<span class="pl-en">multiplyScalar</span>(e).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> l}}(),<span class="pl-en">isIntersectionSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">distanceToPoint</span>(<span class="pl-smi">a</span>.<span class="pl-smi">center</span>)<span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">radius</span>},<span class="pl-en">intersectSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(<span class="pl-smi">b</span>.<span class="pl-smi">center</span>,<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>),e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">dot</span>(a)<span class="pl-k">-</span>d<span class="pl-k">*</span>d,g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-smi">radius</span>;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>g)<span class="pl-k">return</span> <span class="pl-c1">null</span>;g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(g<span class="pl-k">-</span>e);e<span class="pl-k">=</span>d<span class="pl-k">-</span>g;d<span class="pl-k">+=</span>g;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span><span class="pl-c1">null</span><span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">at</span>(d,c)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">at</span>(e,c)}}(),<span class="pl-en">isIntersectionPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">distanceToPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>)<span class="pl-k">*</span>b<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>},<span class="pl-en">distanceToPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-en">distanceToPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>)<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>.<span class="pl-en">dot</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>)<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">constant</span>)<span class="pl-k">/</span>b;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;=</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>},<span class="pl-en">intersectPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">distanceToPlane</span>(a);<span class="pl-k">return</span> <span class="pl-c1">null</span><span class="pl-k">===</span>c<span class="pl-k">?</span><span class="pl-c1">null</span><span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">at</span>(c,b)},<span class="pl-en">isIntersectionBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-en">intersectBox</span>(b,a)}}(),<span class="pl-en">intersectBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e,g,f;d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">x</span>;g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">y</span>;f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">z</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">origin</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>(c<span class="pl-k">=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>d,d<span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span>(c<span class="pl-k">=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>d,d<span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>g<span class="pl-k">?</span>(e<span class="pl-k">=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>g,g<span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(e<span class="pl-k">=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>g,g<span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>e<span class="pl-k">&gt;</span>d)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>c<span class="pl-k">||</span>c<span class="pl-k">!==</span>c)c<span class="pl-k">=</span>e;<span class="pl-k">if</span>(g<span class="pl-k">&lt;</span>d<span class="pl-k">||</span>d<span class="pl-k">!==</span>d)d<span class="pl-k">=</span>g;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>f<span class="pl-k">?</span>(e<span class="pl-k">=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>f,f<span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>)<span class="pl-k">:</span>(e<span class="pl-k">=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>f,f<span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>);<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span>f<span class="pl-k">||</span>e<span class="pl-k">&gt;</span>d)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>c<span class="pl-k">||</span>c<span class="pl-k">!==</span>c)c<span class="pl-k">=</span>e;<span class="pl-k">if</span>(f<span class="pl-k">&lt;</span>d<span class="pl-k">||</span>d<span class="pl-k">!==</span>d)d<span class="pl-k">=</span>f;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span><span class="pl-c1">null</span><span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">at</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>d,b)},<span class="pl-en">intersectTriangle</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(g,e);<span class="pl-smi">c</span>.<span class="pl-en">subVectors</span>(f,e);<span class="pl-smi">d</span>.<span class="pl-en">crossVectors</span>(b,c);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-en">dot</span>(d);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>g){<span class="pl-k">if</span>(h)<span class="pl-k">return</span> <span class="pl-c1">null</span>;h<span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>g)h<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=</span><span class="pl-k">-</span>g;<span class="pl-k">else</span> <span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>,e);e<span class="pl-k">=</span>h<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-en">dot</span>(<span class="pl-smi">c</span>.<span class="pl-en">crossVectors</span>(a,c));<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>e)<span class="pl-k">return</span> <span class="pl-c1">null</span>;f<span class="pl-k">=</span>h<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-en">dot</span>(<span class="pl-smi">b</span>.<span class="pl-en">cross</span>(a));<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">||</span>e<span class="pl-k">+</span>f<span class="pl-k">&gt;</span>g)<span class="pl-k">return</span> <span class="pl-c1">null</span>;e<span class="pl-k">=</span><span class="pl-k">-</span>h<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-en">dot</span>(d);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span><span class="pl-c1">null</span><span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">at</span>(e<span class="pl-k">/</span>g,l)}}(),<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>).<span class="pl-en">applyMatrix4</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>.<span class="pl-en">applyMatrix4</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">sub</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>);<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">origin</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">origin</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">direction</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span>)}};</td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Sphere</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">center</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Sphere</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Sphere,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">center</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">center</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-en">copy</span>(c)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">setFromPoints</span>(b).<span class="pl-en">center</span>(d);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(e,<span class="pl-smi">d</span>.<span class="pl-en">distanceToSquared</span>(b[g]));<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(e);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">center</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">center</span>);<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">radius</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class="pl-en">empty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span>},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">distanceToSquared</span>(<span class="pl-c1">this</span>.<span class="pl-smi">center</span>)<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span>},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">distanceTo</span>(<span class="pl-c1">this</span>.<span class="pl-smi">center</span>)<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span>},<span class="pl-en">intersectsSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">radius</span>;<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">center</span>.<span class="pl-en">distanceToSquared</span>(<span class="pl-c1">this</span>.<span class="pl-smi">center</span>)<span class="pl-k">&lt;=</span>b<span class="pl-k">*</span>b},<span class="pl-en">clampPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">center</span>.<span class="pl-en">distanceToSquared</span>(a),d<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">d</span>.<span class="pl-en">copy</span>(a);c<span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-c1">sub</span>(<span class="pl-c1">this</span>.<span class="pl-smi">center</span>).<span class="pl-c1">normalize</span>(),<span class="pl-smi">d</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">radius</span>).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">center</span>));</td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> d},<span class="pl-en">getBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">center</span>,<span class="pl-c1">this</span>.<span class="pl-smi">center</span>);<span class="pl-smi">a</span>.<span class="pl-en">expandByScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">radius</span>);<span class="pl-k">return</span> a},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">center</span>.<span class="pl-en">applyMatrix4</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-en">getMaxScaleOnAxis</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">center</span>.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">center</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">center</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">radius</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span>}};</td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Frustum</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">this</span>.<span class="pl-smi">planes</span><span class="pl-k">=</span>[<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>]};</td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Frustum</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Frustum,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>;f[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(a);f[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(b);f[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(c);f[<span class="pl-c1">3</span>].<span class="pl-en">copy</span>(d);f[<span class="pl-c1">4</span>].<span class="pl-en">copy</span>(e);f[<span class="pl-c1">5</span>].<span class="pl-en">copy</span>(g);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)b[c].<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">planes</span>[c]);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];<span class="pl-k">var</span> d<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],g<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],f<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">6</span>],k<span class="pl-k">=</span>c[<span class="pl-c1">7</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">10</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">11</span>],s<span class="pl-k">=</span>c[<span class="pl-c1">12</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">13</span>],v<span class="pl-k">=</span>c[<span class="pl-c1">14</span>],</td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span>c[<span class="pl-c1">15</span>];b[<span class="pl-c1">0</span>].<span class="pl-en">setComponents</span>(g<span class="pl-k">-</span>a,k<span class="pl-k">-</span>f,q<span class="pl-k">-</span>m,c<span class="pl-k">-</span>s).<span class="pl-c1">normalize</span>();b[<span class="pl-c1">1</span>].<span class="pl-en">setComponents</span>(g<span class="pl-k">+</span>a,k<span class="pl-k">+</span>f,q<span class="pl-k">+</span>m,c<span class="pl-k">+</span>s).<span class="pl-c1">normalize</span>();b[<span class="pl-c1">2</span>].<span class="pl-en">setComponents</span>(g<span class="pl-k">+</span>d,k<span class="pl-k">+</span>h,q<span class="pl-k">+</span>p,c<span class="pl-k">+</span>t).<span class="pl-c1">normalize</span>();b[<span class="pl-c1">3</span>].<span class="pl-en">setComponents</span>(g<span class="pl-k">-</span>d,k<span class="pl-k">-</span>h,q<span class="pl-k">-</span>p,c<span class="pl-k">-</span>t).<span class="pl-c1">normalize</span>();b[<span class="pl-c1">4</span>].<span class="pl-en">setComponents</span>(g<span class="pl-k">-</span>e,k<span class="pl-k">-</span>l,q<span class="pl-k">-</span>n,c<span class="pl-k">-</span>v).<span class="pl-c1">normalize</span>();b[<span class="pl-c1">5</span>].<span class="pl-en">setComponents</span>(g<span class="pl-k">+</span>e,k<span class="pl-k">+</span>l,q<span class="pl-k">+</span>n,c<span class="pl-k">+</span>v).<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">intersectsObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">geometry</span>;<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">computeBoundingSphere</span>();<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-smi">c</span>.<span class="pl-smi">boundingSphere</span>);<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>);</td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">intersectsSphere</span>(a)}}(),<span class="pl-en">intersectsSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">center</span>;a<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">radius</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(b[d].<span class="pl-en">distanceToPoint</span>(c)<span class="pl-k">&lt;</span>a)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">intersectsBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>e;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>d[e];<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span>;<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>;<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span>;<span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>;</td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">distanceToPoint</span>(a),g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">distanceToPoint</span>(b);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>g)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}(),<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>b[c].<span class="pl-en">distanceToPoint</span>(a))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Plane</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Plane</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Plane,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setComponents</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">set</span>(a,b,c);<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromNormalAndCoplanarPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromCoplanarPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(e,d).<span class="pl-en">cross</span>(<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(c,d)).<span class="pl-c1">normalize</span>();<span class="pl-c1">this</span>.<span class="pl-en">setFromNormalAndCoplanarPoint</span>(d,</td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line">c);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>);<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">constant</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">length</span>();<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">multiplyScalar</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">negate</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">dot</span>(a)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">constant</span>},<span class="pl-en">distanceToSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">distanceToPoint</span>(<span class="pl-smi">a</span>.<span class="pl-smi">center</span>)<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">radius</span>},<span class="pl-en">projectPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">orthoPoint</span>(a,b).<span class="pl-c1">sub</span>(a).<span class="pl-en">negate</span>()},<span class="pl-en">orthoPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">distanceToPoint</span>(a);<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>).<span class="pl-en">multiplyScalar</span>(c)},<span class="pl-en">isIntersectionLine</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">distanceToPoint</span>(<span class="pl-smi">a</span>.<span class="pl-c1">start</span>);a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">distanceToPoint</span>(<span class="pl-smi">a</span>.<span class="pl-smi">end</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>b},<span class="pl-en">intersectLine</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">delta</span>(a),g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">dot</span>(e);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>g){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-en">distanceToPoint</span>(<span class="pl-smi">b</span>.<span class="pl-c1">start</span>))<span class="pl-k">return</span> <span class="pl-smi">d</span>.<span class="pl-en">copy</span>(<span class="pl-smi">b</span>.<span class="pl-c1">start</span>)}<span class="pl-k">else</span> <span class="pl-k">return</span> g<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span>(<span class="pl-smi">b</span>.<span class="pl-c1">start</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">constant</span>)<span class="pl-k">/</span>g,<span class="pl-c1">0</span><span class="pl-k">&gt;</span>g<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>g<span class="pl-k">?</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-en">copy</span>(e).<span class="pl-en">multiplyScalar</span>(g).<span class="pl-c1">add</span>(<span class="pl-smi">b</span>.<span class="pl-c1">start</span>)}}(),<span class="pl-en">coplanarPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">constant</span>)},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-en">getNormalMatrix</span>(d),g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>).<span class="pl-en">applyMatrix3</span>(g),f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">coplanarPoint</span>(b);<span class="pl-smi">f</span>.<span class="pl-en">applyMatrix4</span>(d);<span class="pl-c1">this</span>.<span class="pl-en">setFromNormalAndCoplanarPoint</span>(g,f);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">constant</span><span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">constant</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">constant</span>}};</td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span><span class="pl-k">=</span>{<span class="pl-en">generateUUID</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>),b<span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-c1">36</span>),c<span class="pl-k">=</span><span class="pl-c1">0</span>,d;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">36</span><span class="pl-k">&gt;</span>e;e<span class="pl-k">++</span>)<span class="pl-c1">8</span><span class="pl-k">===</span>e<span class="pl-k">||</span><span class="pl-c1">13</span><span class="pl-k">===</span>e<span class="pl-k">||</span><span class="pl-c1">18</span><span class="pl-k">===</span>e<span class="pl-k">||</span><span class="pl-c1">23</span><span class="pl-k">===</span>e<span class="pl-k">?</span>b[e]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">14</span><span class="pl-k">===</span>e<span class="pl-k">?</span>b[e]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>4<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>(<span class="pl-c1">2</span><span class="pl-k">&gt;=</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">33554432</span><span class="pl-k">+</span><span class="pl-c1">16777216</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">|</span><span class="pl-c1">0</span>),d<span class="pl-k">=</span>c<span class="pl-k">&amp;</span><span class="pl-c1">15</span>,c<span class="pl-k">&gt;&gt;=</span><span class="pl-c1">4</span>,b[e]<span class="pl-k">=</span>a[<span class="pl-c1">19</span><span class="pl-k">===</span>e<span class="pl-k">?</span>d<span class="pl-k">&amp;</span><span class="pl-c1">3</span><span class="pl-k">|</span><span class="pl-c1">8</span><span class="pl-k">:</span>d]);<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)}}(),<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(b,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(c,a))},<span class="pl-en">euclideanModulo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(a<span class="pl-k">%</span>b<span class="pl-k">+</span>b)<span class="pl-k">%</span>b},<span class="pl-en">mapLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> d<span class="pl-k">+</span>(a<span class="pl-k">-</span>b)<span class="pl-k">*</span>(e<span class="pl-k">-</span>d)<span class="pl-k">/</span>(c<span class="pl-k">-</span>b)},<span class="pl-en">smoothstep</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(a<span class="pl-k">&lt;=</span>b)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(a<span class="pl-k">&gt;=</span>c)<span class="pl-k">return</span> <span class="pl-c1">1</span>;a<span class="pl-k">=</span>(a<span class="pl-k">-</span>b)<span class="pl-k">/</span>(c<span class="pl-k">-</span>b);<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>(<span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a)},<span class="pl-en">smootherstep</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(a<span class="pl-k">&lt;=</span>b)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(a<span class="pl-k">&gt;=</span>c)<span class="pl-k">return</span> <span class="pl-c1">1</span>;a<span class="pl-k">=</span>(a<span class="pl-k">-</span>b)<span class="pl-k">/</span>(c<span class="pl-k">-</span>b);<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>(a<span class="pl-k">*</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">15</span>)<span class="pl-k">+</span><span class="pl-c1">10</span>)},<span class="pl-en">random16</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">65280</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">+</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>())<span class="pl-k">/</span><span class="pl-c1">65535</span>},<span class="pl-en">randInt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span>(b<span class="pl-k">-</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>))},<span class="pl-en">randFloat</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span>(b<span class="pl-k">-</span>a)},<span class="pl-en">randFloatSpread</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>(<span class="pl-c1">.5</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>())},<span class="pl-en">degToRad</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">180</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> b<span class="pl-k">*</span>a}}(),</td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line"><span class="pl-en">radToDeg</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">180</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> b<span class="pl-k">*</span>a}}(),<span class="pl-en">isPowerOfTwo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">===</span>(a<span class="pl-k">&amp;</span>a<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">!==</span>a},<span class="pl-en">nearestPowerOfTwo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">log</span>(a)<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">LN2</span>))},<span class="pl-en">nextPowerOfTwo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">--</span>;a<span class="pl-k">|=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>;a<span class="pl-k">|=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>;a<span class="pl-k">|=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">4</span>;a<span class="pl-k">|=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span>;a<span class="pl-k">|=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span>;a<span class="pl-k">++</span>;<span class="pl-k">return</span> a}};</td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Spline</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){a<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a);d<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span>b);<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>f<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b}<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>a;<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>{x<span class="pl-k">:</span><span class="pl-c1">0</span>,y<span class="pl-k">:</span><span class="pl-c1">0</span>,z<span class="pl-k">:</span><span class="pl-c1">0</span>},e,g,f,h,l,k,m,p,n;<span class="pl-c1">this</span>.<span class="pl-en">initFromArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[b]<span class="pl-k">=</span>{x<span class="pl-k">:</span>a[b][<span class="pl-c1">0</span>],y<span class="pl-k">:</span>a[b][<span class="pl-c1">1</span>],z<span class="pl-k">:</span>a[b][<span class="pl-c1">2</span>]}};<span class="pl-c1">this</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){e<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>a;g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(e);f<span class="pl-k">=</span>e<span class="pl-k">-</span>g;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span>g<span class="pl-k">-</span><span class="pl-c1">1</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>g;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>g<span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>g<span class="pl-k">+</span><span class="pl-c1">1</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>g<span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>g<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>;k<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">0</span>]];m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">1</span>]];p<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">2</span>]];n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">3</span>]];h<span class="pl-k">=</span>f<span class="pl-k">*</span>f;l<span class="pl-k">=</span>f<span class="pl-k">*</span>h;<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">k</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-c1">x</span>,<span class="pl-smi">p</span>.<span class="pl-c1">x</span>,<span class="pl-smi">n</span>.<span class="pl-c1">x</span>,f,h,l);<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">k</span>.<span class="pl-c1">y</span>,<span class="pl-smi">m</span>.<span class="pl-c1">y</span>,<span class="pl-smi">p</span>.<span class="pl-c1">y</span>,<span class="pl-smi">n</span>.<span class="pl-c1">y</span>,f,h,l);<span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">k</span>.<span class="pl-c1">z</span>,<span class="pl-smi">m</span>.<span class="pl-c1">z</span>,<span class="pl-smi">p</span>.<span class="pl-c1">z</span>,<span class="pl-smi">n</span>.<span class="pl-c1">z</span>,f,h,l);<span class="pl-k">return</span> d};<span class="pl-c1">this</span>.<span class="pl-en">getControlPointsArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span>,d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[a],d[a]<span class="pl-k">=</span>[<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>];<span class="pl-k">return</span> d};<span class="pl-c1">this</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e<span class="pl-k">=</span>b<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,h<span class="pl-k">=</span>[],l<span class="pl-k">=</span><span class="pl-c1">0</span>;h[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">100</span>);c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">*</span>a;<span class="pl-smi">g</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">/</span>c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(b),<span class="pl-smi">f</span>.<span class="pl-en">copy</span>(d),l<span class="pl-k">+=</span><span class="pl-smi">f</span>.<span class="pl-en">distanceTo</span>(g),<span class="pl-smi">g</span>.<span class="pl-en">copy</span>(d),b<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b),b<span class="pl-k">!==</span>e<span class="pl-k">&amp;&amp;</span>(h[b]<span class="pl-k">=</span>l,e<span class="pl-k">=</span>b);h[<span class="pl-smi">h</span>.<span class="pl-c1">length</span>]<span class="pl-k">=</span>l;<span class="pl-k">return</span>{chunks<span class="pl-k">:</span>h,total<span class="pl-k">:</span>l}};<span class="pl-c1">this</span>.<span class="pl-en">reparametrizeByArcLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e,g,f,h<span class="pl-k">=</span>[],l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getLength</span>();<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">l</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>]).<span class="pl-en">clone</span>());<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">1</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){c<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">chunks</span>[b]<span class="pl-k">-</span><span class="pl-smi">k</span>.<span class="pl-smi">chunks</span>[b<span class="pl-k">-</span><span class="pl-c1">1</span>];f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a<span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-smi">k</span>.<span class="pl-smi">total</span>);e<span class="pl-k">=</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);g<span class="pl-k">=</span>b<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;</span>f<span class="pl-k">-</span><span class="pl-c1">1</span>;c<span class="pl-k">++</span>)d<span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">/</span>f<span class="pl-k">*</span>c<span class="pl-k">*</span>(g<span class="pl-k">-</span>e),d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(d),</td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">l</span>.<span class="pl-en">copy</span>(d).<span class="pl-en">clone</span>());<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">l</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[b]).<span class="pl-en">clone</span>())}<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>h}};<span class="pl-c1">THREE</span>.<span class="pl-en">Triangle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">c</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">normal</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">e</span>.<span class="pl-en">subVectors</span>(d,c);<span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(b,c);<span class="pl-smi">e</span>.<span class="pl-en">cross</span>(a);b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">lengthSq</span>();<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b))<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}}();</td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">barycoordFromPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(f,e);<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(g,e);<span class="pl-smi">c</span>.<span class="pl-en">subVectors</span>(d,e);d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">dot</span>(a);e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">dot</span>(b);g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">dot</span>(c);<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">dot</span>(b);f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">dot</span>(c);<span class="pl-k">var</span> k<span class="pl-k">=</span>d<span class="pl-k">*</span>l<span class="pl-k">-</span>e<span class="pl-k">*</span>e;h<span class="pl-k">=</span>h<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>k)<span class="pl-k">return</span> <span class="pl-smi">h</span>.<span class="pl-c1">set</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);k<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>k;l<span class="pl-k">=</span>(l<span class="pl-k">*</span>g<span class="pl-k">-</span>e<span class="pl-k">*</span>f)<span class="pl-k">*</span>k;d<span class="pl-k">=</span>(d<span class="pl-k">*</span>f<span class="pl-k">-</span>e<span class="pl-k">*</span>g)<span class="pl-k">*</span>k;<span class="pl-k">return</span> <span class="pl-smi">h</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>l<span class="pl-k">-</span>d,d,l)}}();</td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">containsPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">barycoordFromPoint</span>(b,c,d,e,a);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>}}();</td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Triangle,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromPointsAndIndices</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(a[b]);<span class="pl-c1">this</span>.<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(a[c]);<span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(a[d]);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">a</span>);<span class="pl-c1">this</span>.<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">b</span>);<span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">c</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">area</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">c</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>);<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">b</span>);<span class="pl-k">return</span>.<span class="pl-ii">5</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-en">cross</span>(b).<span class="pl-c1">length</span>()}}(),<span class="pl-en">midpoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">addVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">c</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>)},<span class="pl-en">normal</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">normal</span>(<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>,<span class="pl-c1">this</span>.<span class="pl-smi">c</span>,a)},<span class="pl-en">plane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>).<span class="pl-en">setFromCoplanarPoints</span>(<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>,<span class="pl-c1">this</span>.<span class="pl-smi">c</span>)},<span class="pl-en">barycoordFromPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">barycoordFromPoint</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>,<span class="pl-c1">this</span>.<span class="pl-smi">c</span>,b)},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">containsPoint</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>,<span class="pl-c1">this</span>.<span class="pl-smi">c</span>)},</td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line"><span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">a</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">a</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">b</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">c</span>.<span class="pl-en">equals</span>(<span class="pl-c1">this</span>.<span class="pl-smi">c</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Channels</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">mask</span><span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Channels</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Channels,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">mask</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>a},<span class="pl-en">enable</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">mask</span><span class="pl-k">|=</span><span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>a},<span class="pl-en">toggle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">mask</span><span class="pl-k">^=</span><span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>a},<span class="pl-en">disable</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">mask</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>a)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Clock</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">autoStart</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">elapsedTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Clock</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Clock,start:<span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-smi">self</span>.<span class="pl-smi">performance</span>.<span class="pl-en">now</span>();<span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">stop</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">getElapsedTime</span>();<span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>},<span class="pl-en">getElapsedTime</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">getDelta</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">elapsedTime</span>},<span class="pl-en">getDelta</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoStart</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">start</span>();<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">running</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">self</span>.<span class="pl-smi">performance</span>.<span class="pl-en">now</span>(),a<span class="pl-k">=</span><span class="pl-c1">.001</span><span class="pl-k">*</span>(b<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span>);<span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">elapsedTime</span><span class="pl-k">+=</span>a}<span class="pl-k">return</span> a}};<span class="pl-c1">THREE</span>.<span class="pl-en">EventDispatcher</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.EventDispatcher,apply:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-smi">addEventListener</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">addEventListener</span>;<span class="pl-smi">a</span>.<span class="pl-smi">hasEventListener</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">hasEventListener</span>;<span class="pl-smi">a</span>.<span class="pl-smi">removeEventListener</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">removeEventListener</span>;<span class="pl-smi">a</span>.<span class="pl-smi">dispatchEvent</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">dispatchEvent</span>},<span class="pl-en">addEventListener</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span><span class="pl-k">=</span>{});<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c[a]<span class="pl-k">&amp;&amp;</span>(c[a]<span class="pl-k">=</span>[]);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span>c[a].<span class="pl-c1">indexOf</span>(b)<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line">c[a].<span class="pl-c1">push</span>(b)},<span class="pl-en">hasEventListener</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span>)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span>;<span class="pl-k">return</span> <span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c[a]<span class="pl-k">&amp;&amp;</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>c[a].<span class="pl-c1">indexOf</span>(b)<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>},<span class="pl-en">removeEventListener</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span>[a];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">indexOf</span>(b);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">splice</span>(d,<span class="pl-c1">1</span>)}}},<span class="pl-en">dispatchEvent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_listeners</span>[<span class="pl-smi">a</span>.<span class="pl-c1">type</span>];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b){<span class="pl-smi">a</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>)c[e]<span class="pl-k">=</span>b[e];<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>)c[e].<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a)}}}};</td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">distance</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">distance</span>}function c(a,b,g,f){if(!1!==a.visible&amp;&amp;(a.raycast(b,g),!0===f)){a=a.children;f=0;for(var h=a.length;f&lt;h;f++)c(a[f],b,g,!0)}}a.Raycaster=function(b,c,g,f){this.ray=new a.Ray(b,c);this.near=g||0;this.far=f||Infinity;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn(&quot;THREE.Raycaster: params.PointCloud has been renamed to params.Points.&quot;);return this.Points}}})};</td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">Raycaster</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:a.Raycaster,linePrecision:1,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">ray</span>.<span class="pl-c1">set</span>(a,b)},<span class="pl-en">setFromCamera</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c <span class="pl-k">instanceof</span> <span class="pl-smi">a</span>.<span class="pl-smi">PerspectiveCamera</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">c</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">this</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">set</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-c1">.5</span>).<span class="pl-en">unproject</span>(c).<span class="pl-c1">sub</span>(<span class="pl-c1">this</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>).<span class="pl-c1">normalize</span>())<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-smi">a</span>.<span class="pl-smi">OrthographicCamera</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>.<span class="pl-c1">set</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).<span class="pl-en">unproject</span>(c),<span class="pl-c1">this</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">direction</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).<span class="pl-en">transformDirection</span>(<span class="pl-smi">c</span>.<span class="pl-smi">matrixWorld</span>))<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Raycaster: Unsupported camera type.<span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line"><span class="pl-en">intersectObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>[];<span class="pl-en">c</span>(a,<span class="pl-c1">this</span>,g,e);<span class="pl-smi">g</span>.<span class="pl-c1">sort</span>(b);<span class="pl-k">return</span> g},<span class="pl-en">intersectObjects</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>[];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(a))<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Raycaster.intersectObjects: objects is not an Array.<span class="pl-pds">&quot;</span></span>),g;<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>h;f<span class="pl-k">++</span>)<span class="pl-en">c</span>(a[f],<span class="pl-c1">this</span>,g,e);<span class="pl-smi">g</span>.<span class="pl-c1">sort</span>(b);<span class="pl-k">return</span> g}}})(<span class="pl-c1">THREE</span>);</td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Object3D</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DIdCount</span><span class="pl-k">++</span>});<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Object3D<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">channels</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Channels</span>;<span class="pl-c1">this</span>.<span class="pl-smi">children</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">up</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">DefaultUp</span>.<span class="pl-en">clone</span>();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Euler</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-c1">onChange</span>(<span class="pl-k">function</span>(){<span class="pl-smi">c</span>.<span class="pl-en">setFromEuler</span>(b,<span class="pl-k">!</span><span class="pl-c1">1</span>)});<span class="pl-smi">c</span>.<span class="pl-c1">onChange</span>(<span class="pl-k">function</span>(){<span class="pl-smi">b</span>.<span class="pl-en">setFromQuaternion</span>(c,<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>)});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(<span class="pl-c1">this</span>,{position<span class="pl-k">:</span>{enumerable<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span>a},rotation<span class="pl-k">:</span>{enumerable<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>b},quaternion<span class="pl-k">:</span>{enumerable<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>c},scale<span class="pl-k">:</span>{enumerable<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>d},modelViewMatrix<span class="pl-k">:</span>{value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>},normalMatrix<span class="pl-k">:</span>{value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>}});<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">DefaultMatrixAutoUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">renderOrder</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span>{}};</td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">DefaultUp</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">DefaultMatrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Object3D,get <span class="pl-en">eulerOrder</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .eulerOrder is now .rotation.order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-smi">order</span>},<span class="pl-k">set</span> <span class="pl-en">eulerOrder</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .eulerOrder is now .rotation.order.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-smi">order</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">useQuaternion</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.<span class="pl-pds">&quot;</span></span>)},<span class="pl-k">set</span> <span class="pl-en">useQuaternion</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.<span class="pl-pds">&quot;</span></span>)},<span class="pl-k">set</span> <span class="pl-en">renderDepth</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.<span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line"><span class="pl-en">applyMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">multiplyMatrices</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">decompose</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>,<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>,<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>)},<span class="pl-en">setRotationFromAxisAngle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">setFromAxisAngle</span>(a,b)},<span class="pl-en">setRotationFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">setFromEuler</span>(a,<span class="pl-k">!</span><span class="pl-c1">0</span>)},<span class="pl-en">setRotationFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">setFromRotationMatrix</span>(a)},<span class="pl-en">setRotationFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">copy</span>(a)},<span class="pl-en">rotateOnAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-en">setFromAxisAngle</span>(b,</td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line">c);<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">multiply</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">rotateOnAxis</span>(a,b)}}(),<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">rotateOnAxis</span>(a,b)}}(),<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">rotateOnAxis</span>(a,b)}}(),<span class="pl-en">translateOnAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(b).<span class="pl-en">applyQuaternion</span>(<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>);<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-c1">add</span>(<span class="pl-smi">a</span>.<span class="pl-en">multiplyScalar</span>(c));</td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">translateOnAxis</span>(b,a)},<span class="pl-en">translateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">translateOnAxis</span>(a,b)}}(),<span class="pl-en">translateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">translateOnAxis</span>(a,b)}}(),<span class="pl-en">translateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">translateOnAxis</span>(a,</td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line">b)}}(),<span class="pl-en">localToWorld</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>)},<span class="pl-en">worldToLocal</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-smi">a</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>))}}(),<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-en">lookAt</span>(b,<span class="pl-c1">this</span>.<span class="pl-smi">position</span>,<span class="pl-c1">this</span>.<span class="pl-smi">up</span>);<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">setFromRotationMatrix</span>(a)}}(),<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">arguments</span>.<span class="pl-c1">length</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">arguments</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">arguments</span>[b]);<span class="pl-k">return</span> <span class="pl-c1">this</span>}<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">this</span>)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D.add: object can&#39;t be added as a child of itself.<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line">a),<span class="pl-c1">this</span>;a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span><span class="pl-k">?</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">parent</span>.<span class="pl-c1">remove</span>(a),<span class="pl-smi">a</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">this</span>,<span class="pl-smi">a</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>added<span class="pl-pds">&quot;</span></span>}),<span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">push</span>(a))<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D.add: object not an instance of THREE.Object3D.<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">remove</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">arguments</span>.<span class="pl-c1">length</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">arguments</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-c1">remove</span>(<span class="pl-c1">arguments</span>[b]);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-smi">a</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>removed<span class="pl-pds">&quot;</span></span>}),<span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>))},<span class="pl-en">getChildByName</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getObjectByName</span>(a)},<span class="pl-en">getObjectById</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getObjectByProperty</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,a)},<span class="pl-en">getObjectByName</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getObjectByProperty</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>name<span class="pl-pds">&quot;</span></span>,a)},<span class="pl-en">getObjectByProperty</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>[a]<span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-c1">this</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>[c].<span class="pl-en">getObjectByProperty</span>(a,b);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e)<span class="pl-k">return</span> e}},<span class="pl-en">getWorldPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>)},<span class="pl-en">getWorldQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-c1">this</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">decompose</span>(a,c,b);<span class="pl-k">return</span> c}}(),<span class="pl-en">getWorldRotation</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Euler</span>;<span class="pl-c1">this</span>.<span class="pl-en">getWorldQuaternion</span>(a);<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-en">setFromQuaternion</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-smi">order</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>)}}(),<span class="pl-en">getWorldScale</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">decompose</span>(a,</td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line">b,c);<span class="pl-k">return</span> c}}(),<span class="pl-en">getWorldDirection</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-en">getWorldQuaternion</span>(a);<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>).<span class="pl-en">applyQuaternion</span>(a)}}(),<span class="pl-en">raycast</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">traverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">a</span>(<span class="pl-c1">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b[c].<span class="pl-en">traverse</span>(a)},<span class="pl-en">traverseVisible</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span>){<span class="pl-en">a</span>(<span class="pl-c1">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b[c].<span class="pl-en">traverseVisible</span>(a)}},<span class="pl-en">traverseAncestors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">parent</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">a</span>(b),<span class="pl-smi">b</span>.<span class="pl-en">traverseAncestors</span>(a))},</td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line"><span class="pl-en">updateMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">compose</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>,<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>,<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">updateMatrixWorld</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a)<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">parent</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-c1">this</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">matrixWorld</span>,<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>),<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">children</span>[b].<span class="pl-en">updateMatrixWorld</span>(a)},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line">[],c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[c];<span class="pl-k">delete</span> <span class="pl-smi">d</span>.<span class="pl-smi">metadata</span>;<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(d)}<span class="pl-k">return</span> b}<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a,d<span class="pl-k">=</span>{};c<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>{geometries<span class="pl-k">:</span>{},materials<span class="pl-k">:</span>{},textures<span class="pl-k">:</span>{},images<span class="pl-k">:</span>{}},<span class="pl-smi">d</span>.<span class="pl-smi">metadata</span><span class="pl-k">=</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Object<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Object3D.toJSON<span class="pl-pds">&quot;</span></span>});<span class="pl-k">var</span> e<span class="pl-k">=</span>{};<span class="pl-smi">e</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>;<span class="pl-smi">e</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span>);<span class="pl-s"><span class="pl-pds">&quot;</span>{}<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">JSON</span>.<span class="pl-en">stringify</span>(<span class="pl-c1">this</span>.<span class="pl-smi">userData</span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">userData</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">e</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">toArray</span>();</td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">geometries</span>[<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometries</span>[<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">toJSON</span>(a)),<span class="pl-smi">e</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">uuid</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>[<span class="pl-c1">this</span>.<span class="pl-smi">material</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>[<span class="pl-c1">this</span>.<span class="pl-smi">material</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">material</span>.<span class="pl-en">toJSON</span>(a)),<span class="pl-smi">e</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">material</span>.<span class="pl-smi">uuid</span>);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>){<span class="pl-smi">e</span>.<span class="pl-smi">children</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;g<span class="pl-k">++</span>)<span class="pl-smi">e</span>.<span class="pl-smi">children</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">children</span>[g].<span class="pl-en">toJSON</span>(a).<span class="pl-c1">object</span>)}<span class="pl-k">if</span>(c){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometries</span>),g<span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>),f<span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">a</span>.<span class="pl-smi">textures</span>);</td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">a</span>.<span class="pl-c1">images</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">geometries</span><span class="pl-k">=</span>c);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>g);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">textures</span><span class="pl-k">=</span>f);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-c1">images</span><span class="pl-k">=</span>a)}<span class="pl-smi">d</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>e;<span class="pl-k">return</span> d},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>,a)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">name</span>;<span class="pl-c1">this</span>.<span class="pl-smi">up</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">up</span>);<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">position</span>);<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">quaternion</span>);<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">scale</span>);<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">rotationAutoUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">matrixAutoUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">visible</span>;<span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">castShadow</span>;<span class="pl-c1">this</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">receiveShadow</span>;<span class="pl-c1">this</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">frustumCulled</span>;<span class="pl-c1">this</span>.<span class="pl-smi">renderOrder</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">renderOrder</span>;<span class="pl-c1">this</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-en">stringify</span>(<span class="pl-smi">a</span>.<span class="pl-smi">userData</span>));<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-smi">a</span>.<span class="pl-smi">children</span>[c].<span class="pl-en">clone</span>());<span class="pl-k">return</span> <span class="pl-c1">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Face3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(d)<span class="pl-k">?</span>d<span class="pl-k">:</span>[];<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(e)<span class="pl-k">?</span>e<span class="pl-k">:</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Face3,clone:<span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">a</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>;<span class="pl-c1">this</span>.<span class="pl-smi">c</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">c</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materialIndex</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span>[b]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexNormals</span>[b].<span class="pl-en">clone</span>();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>[b]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>[b].<span class="pl-en">clone</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>}};</td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Face4</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Face4 has been removed. A THREE.Face3 will be created instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,c,e,g,f)};<span class="pl-c1">THREE</span>.<span class="pl-en">BufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-smi">array</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">updateRange</span><span class="pl-k">=</span>{offset<span class="pl-k">:</span><span class="pl-c1">0</span>,count<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>};<span class="pl-c1">this</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BufferAttribute</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.BufferAttribute,get <span class="pl-en">length</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute: .length has been deprecated. Please use .count.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span>},<span class="pl-k">get</span> <span class="pl-en">count</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>},<span class="pl-k">set</span> <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">version</span><span class="pl-k">++</span>},<span class="pl-en">setDynamic</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.array.constructor</span>(<span class="pl-smi">a</span>.<span class="pl-smi">array</span>);<span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">itemSize</span>;<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dynamic</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>;</td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">*=</span><span class="pl-smi">b</span>.<span class="pl-smi">itemSize</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span>d]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">array</span>[c<span class="pl-k">+</span>d];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">set</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyColorsArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">array</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyColorsArray(): color is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">r</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">g</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">b</span>}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyIndicesArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">array</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">a</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">b</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-smi">c</span>}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyVector2sArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">array</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyVector2sArray(): vector is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyVector3sArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">array</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyVector3sArray(): vector is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span>}<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line"><span class="pl-en">copyVector4sArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">array</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyVector4sArray(): vector is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">w</span>}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">set</span>(a,b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>]},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span><span class="pl-c1">1</span>]},</td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line"><span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span><span class="pl-c1">2</span>]},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span><span class="pl-c1">3</span>]},<span class="pl-en">setW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setXY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setXYZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setXYZW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span>;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>e;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Int8Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Int8Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint8Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint8ClampedAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint8ClampedArray</span>(a),b)};</td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Int16Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Int16Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint16Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Int32Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Int32Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint32Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint32Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Float32Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(a),b)};</td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Float64Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float64Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">DynamicBufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(a,b)).<span class="pl-en">setDynamic</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>)};<span class="pl-c1">THREE</span>.<span class="pl-en">InstancedBufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferAttribute</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">meshPerAttribute</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferAttribute</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferAttribute</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferAttribute</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferAttribute</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferAttribute</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferAttribute</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">meshPerAttribute</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">meshPerAttribute</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">InterleavedBuffer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-smi">array</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">stride</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">updateRange</span><span class="pl-k">=</span>{offset<span class="pl-k">:</span><span class="pl-c1">0</span>,count<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>};<span class="pl-c1">this</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBuffer</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.InterleavedBuffer,get <span class="pl-en">length</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span>},<span class="pl-k">get</span> <span class="pl-en">count</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">stride</span>},<span class="pl-k">set</span> <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">version</span><span class="pl-k">++</span>},<span class="pl-en">setDynamic</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.array.constructor</span>(<span class="pl-smi">a</span>.<span class="pl-smi">array</span>);<span class="pl-c1">this</span>.<span class="pl-smi">stride</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">stride</span>;<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dynamic</span>},<span class="pl-en">copyAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">stride</span>;c<span class="pl-k">*=</span><span class="pl-smi">b</span>.<span class="pl-smi">stride</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">stride</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span>d]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">array</span>[c<span class="pl-k">+</span>d];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">set</span>(a,b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">InstancedInterleavedBuffer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBuffer</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">meshPerAttribute</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedInterleavedBuffer</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBuffer</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedInterleavedBuffer</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedInterleavedBuffer</span>;</td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedInterleavedBuffer</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBuffer</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">meshPerAttribute</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">meshPerAttribute</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">InterleavedBufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">data</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">itemSize</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">=</span>c};</td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBufferAttribute</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.InterleavedBufferAttribute,get <span class="pl-en">length</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute: .length has been deprecated. Please use .count.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span>},<span class="pl-k">get</span> <span class="pl-en">count</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span>]},<span class="pl-en">getY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-c1">1</span>]},<span class="pl-en">getZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-c1">2</span>]},<span class="pl-en">getW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-c1">3</span>]},<span class="pl-en">setXY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span>;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;</td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setXYZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span>;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setXYZW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">stride</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span>;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">array</span>[a<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>e;<span class="pl-k">return</span> <span class="pl-c1">this</span>}};</td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Geometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryIdCount</span><span class="pl-k">++</span>});<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Geometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">colors</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span><span class="pl-k">=</span>[[]];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">skinWeights</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">skinIndices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">lineDistances</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">groupsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lineDistancesNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">elementsNeedUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Geometry,applyMatrix:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>).<span class="pl-en">getNormalMatrix</span>(a),c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[c].<span class="pl-en">applyMatrix4</span>(a);c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c];<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-en">applyMatrix3</span>(b).<span class="pl-c1">normalize</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">vertexNormals</span>[e].<span class="pl-en">applyMatrix3</span>(b).<span class="pl-c1">normalize</span>()}<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">computeBoundingBox</span>();<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">computeBoundingSphere</span>();<span class="pl-c1">this</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeRotationX</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeRotationY</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeRotationZ</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);</td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-en">makeTranslation</span>(b,c,d);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeScale</span>(b,c,d);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>);<span class="pl-smi">a</span>.<span class="pl-en">lookAt</span>(b);<span class="pl-smi">a</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>)}}(),<span class="pl-en">fromBufferGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>[m[a].<span class="pl-en">clone</span>(),m[b].<span class="pl-en">clone</span>(),m[d].<span class="pl-en">clone</span>()]<span class="pl-k">:</span>[],g<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">?</span>[<span class="pl-smi">c</span>.<span class="pl-smi">colors</span>[a].<span class="pl-en">clone</span>(),<span class="pl-smi">c</span>.<span class="pl-smi">colors</span>[b].<span class="pl-en">clone</span>(),<span class="pl-smi">c</span>.<span class="pl-smi">colors</span>[d].<span class="pl-en">clone</span>()]<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line">[],e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,d,e,g);<span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(e);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([p[a].<span class="pl-en">clone</span>(),p[b].<span class="pl-en">clone</span>(),p[d].<span class="pl-en">clone</span>()]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">1</span>].<span class="pl-c1">push</span>([n[a].<span class="pl-en">clone</span>(),n[b].<span class="pl-en">clone</span>(),n[d].<span class="pl-en">clone</span>()])}<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>,d<span class="pl-k">=</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">index</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">index</span>.<span class="pl-smi">array</span><span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>,g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,f<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-smi">normal</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span><span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-c1">color</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-c1">color</span>.<span class="pl-smi">array</span><span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-smi">uv</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">uv</span>.<span class="pl-smi">array</span><span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-smi">uv2</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">uv2</span>.<span class="pl-smi">array</span><span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span>[]);<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>[],p<span class="pl-k">=</span>[],n<span class="pl-k">=</span>[],</td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span>e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;e<span class="pl-k">+=</span><span class="pl-c1">3</span>,q<span class="pl-k">+=</span><span class="pl-c1">2</span>)<span class="pl-smi">c</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(g[e],g[e<span class="pl-k">+</span><span class="pl-c1">1</span>],g[e<span class="pl-k">+</span><span class="pl-c1">2</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span><span class="pl-smi">m</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(f[e],f[e<span class="pl-k">+</span><span class="pl-c1">1</span>],f[e<span class="pl-k">+</span><span class="pl-c1">2</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(h[e],h[e<span class="pl-k">+</span><span class="pl-c1">1</span>],h[e<span class="pl-k">+</span><span class="pl-c1">2</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-smi">p</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(l[q],l[q<span class="pl-k">+</span><span class="pl-c1">1</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span><span class="pl-smi">n</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(k[q],k[q<span class="pl-k">+</span><span class="pl-c1">1</span>]));<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d)<span class="pl-k">if</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">groups</span>,<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span>g[e],s<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">start</span>,t<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">count</span>,q<span class="pl-k">=</span>s,s<span class="pl-k">=</span>s<span class="pl-k">+</span>t;q<span class="pl-k">&lt;</span>s;q<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-en">b</span>(d[q],d[q<span class="pl-k">+</span><span class="pl-c1">1</span>],d[q<span class="pl-k">+</span><span class="pl-c1">2</span>]);<span class="pl-k">else</span> <span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-en">b</span>(d[e],d[e<span class="pl-k">+</span><span class="pl-c1">1</span>],d[e<span class="pl-k">+</span><span class="pl-c1">2</span>]);<span class="pl-k">else</span> <span class="pl-k">for</span>(e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-en">b</span>(e,e<span class="pl-k">+</span><span class="pl-c1">1</span>,e<span class="pl-k">+</span><span class="pl-c1">2</span>);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-en">clone</span>());<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-en">clone</span>());<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">computeBoundingBox</span>();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-en">center</span>().<span class="pl-en">negate</span>();<span class="pl-c1">this</span>.<span class="pl-en">translate</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> a},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">computeBoundingSphere</span>();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">center</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">/</span>b,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-smi">c</span>.<span class="pl-c1">set</span>(b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,<span class="pl-k">-</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">computeFaceNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c],g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">e</span>.<span class="pl-smi">a</span>],f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">e</span>.<span class="pl-smi">b</span>];<span class="pl-smi">a</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">e</span>.<span class="pl-smi">c</span>],f);<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(g,f);<span class="pl-smi">a</span>.<span class="pl-en">cross</span>(b);<span class="pl-smi">a</span>.<span class="pl-c1">normalize</span>();<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(a)}},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d;d<span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(a){<span class="pl-k">var</span> e,g,f,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,</td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>],g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>],f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>],<span class="pl-smi">h</span>.<span class="pl-en">subVectors</span>(f,g),<span class="pl-smi">l</span>.<span class="pl-en">subVectors</span>(e,g),<span class="pl-smi">h</span>.<span class="pl-en">cross</span>(l),d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>].<span class="pl-c1">add</span>(h),d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>].<span class="pl-c1">add</span>(h),d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>].<span class="pl-c1">add</span>(h)}<span class="pl-k">else</span> <span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>].<span class="pl-c1">add</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>),d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>].<span class="pl-c1">add</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>),d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>].<span class="pl-c1">add</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b].<span class="pl-c1">normalize</span>();a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>,<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">?</span>(e[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>]),</td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line">e[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>]),e[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>]))<span class="pl-k">:</span>(e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>].<span class="pl-en">clone</span>(),e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>].<span class="pl-en">clone</span>(),e[<span class="pl-c1">2</span>]<span class="pl-k">=</span>d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>].<span class="pl-en">clone</span>())},<span class="pl-en">computeMorphNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c,d,e;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c],<span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>)<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">normal</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span><span class="pl-k">||</span>(<span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span><span class="pl-k">=</span>[]),a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)<span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>[a]<span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>[a].<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[a])<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>[a]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[a].<span class="pl-en">clone</span>();<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-smi">g</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a]){<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a]<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">faceNormals</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">faceNormals</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">vertexNormals</span>,h,l;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l<span class="pl-k">=</span>{a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>},<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(h),<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(l)}f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a];<span class="pl-smi">g</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>[a].<span class="pl-smi">vertices</span>;</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-smi">g</span>.<span class="pl-en">computeVertexNormals</span>();c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c],h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">faceNormals</span>[c],l<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">vertexNormals</span>[c],<span class="pl-smi">h</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>),<span class="pl-smi">l</span>.<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>]),<span class="pl-smi">l</span>.<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>]),<span class="pl-smi">l</span>.<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>])}c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c],<span class="pl-smi">e</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span>,<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>},<span class="pl-en">computeTangents</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Geometry: .computeTangents() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeLineDistances</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">+=</span>b[c].<span class="pl-en">distanceTo</span>(b[c<span class="pl-k">-</span><span class="pl-c1">1</span>])),<span class="pl-c1">this</span>.<span class="pl-smi">lineDistances</span>[c]<span class="pl-k">=</span>a},<span class="pl-en">computeBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>);<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-en">setFromPoints</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>)},<span class="pl-en">computeBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>);<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-en">setFromPoints</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>)},<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>)<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line">a);<span class="pl-k">else</span>{<span class="pl-k">var</span> d,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>,l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,k<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>];a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>).<span class="pl-en">getNormalMatrix</span>(b));<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>p;m<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span>f[m].<span class="pl-en">clone</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-smi">n</span>.<span class="pl-en">applyMatrix4</span>(b);<span class="pl-smi">g</span>.<span class="pl-c1">push</span>(n)}m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>p;m<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>l[m],q,s<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">vertexNormals</span>,t<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">vertexColors</span>,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(<span class="pl-smi">f</span>.<span class="pl-smi">a</span><span class="pl-k">+</span>e,<span class="pl-smi">f</span>.<span class="pl-smi">b</span><span class="pl-k">+</span>e,<span class="pl-smi">f</span>.<span class="pl-smi">c</span><span class="pl-k">+</span>e);<span class="pl-smi">n</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-smi">f</span>.<span class="pl-smi">normal</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">n</span>.<span class="pl-smi">normal</span>.<span class="pl-en">applyMatrix3</span>(d).<span class="pl-c1">normalize</span>();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line">g;b<span class="pl-k">++</span>)q<span class="pl-k">=</span>s[b].<span class="pl-en">clone</span>(),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">q</span>.<span class="pl-en">applyMatrix3</span>(d).<span class="pl-c1">normalize</span>(),<span class="pl-smi">n</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(q);<span class="pl-smi">n</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">f</span>.<span class="pl-c1">color</span>);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>g;b<span class="pl-k">++</span>)q<span class="pl-k">=</span>t[b],<span class="pl-smi">n</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">push</span>(<span class="pl-smi">q</span>.<span class="pl-en">clone</span>());<span class="pl-smi">n</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">+</span>c;<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(n)}m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>p;m<span class="pl-k">++</span>)<span class="pl-k">if</span>(c<span class="pl-k">=</span>a[m],d<span class="pl-k">=</span>[],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c){b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>g;b<span class="pl-k">++</span>)<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(c[b].<span class="pl-en">clone</span>());<span class="pl-smi">k</span>.<span class="pl-c1">push</span>(d)}}},<span class="pl-en">mergeMesh</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">?</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.<span class="pl-pds">&quot;</span></span>,a)<span class="pl-k">:</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-en">updateMatrix</span>(),</td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">merge</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>,<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>))},<span class="pl-en">mergeVertices</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{},b<span class="pl-k">=</span>[],c<span class="pl-k">=</span>[],d,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">10</span>,<span class="pl-c1">4</span>),g,f;g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[g],d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>e)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>e),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a[d]<span class="pl-k">?</span>(a[d]<span class="pl-k">=</span>g,<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[g]),c[g]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>c[g]<span class="pl-k">=</span>c[a[d]];a<span class="pl-k">=</span>[];g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[g],<span class="pl-smi">e</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>c[<span class="pl-smi">e</span>.<span class="pl-smi">a</span>],<span class="pl-smi">e</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c[<span class="pl-smi">e</span>.<span class="pl-smi">b</span>],<span class="pl-smi">e</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>c[<span class="pl-smi">e</span>.<span class="pl-smi">c</span>],e<span class="pl-k">=</span>[<span class="pl-smi">e</span>.<span class="pl-smi">a</span>,<span class="pl-smi">e</span>.<span class="pl-smi">b</span>,<span class="pl-smi">e</span>.<span class="pl-smi">c</span>],d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(e[d]<span class="pl-k">===</span>e[(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>]){<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(g);<span class="pl-k">break</span>}<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>g;g<span class="pl-k">--</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span>a[g],<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">splice</span>(e,</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>),c<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>f;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[c].<span class="pl-c1">splice</span>(e,<span class="pl-c1">1</span>);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> g},<span class="pl-en">sortFacesByMaterialIndex</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>,b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>)a[c].<span class="pl-smi">_id</span><span class="pl-k">=</span>c;<span class="pl-smi">a</span>.<span class="pl-c1">sort</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">materialIndex</span>});<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">1</span>],g,f;d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span>[]);e<span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>[]);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>a[c].<span class="pl-smi">_id</span>;g<span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-c1">push</span>(d[h]);f<span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-c1">push</span>(e[h])}g<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>g);f<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line">f)},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> c<span class="pl-k">?</span>a<span class="pl-k">|</span><span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>b<span class="pl-k">:</span>a<span class="pl-k">&amp;~</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==k[b])return k[b];k[b]=l.length/3;l.push(a.x,a.y,a.z);return k[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==p[b])return p[b];p[b]=m.length;m.push(a.getHex());return p[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==q[b])return q[b];q[b]=n.length/2;n.push(a.x,a.y);return q[b]}var e={metadata:{version:4.4,type:&quot;Geometry&quot;,</td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line">generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Geometry.toJSON<span class="pl-pds">&quot;</span></span>}};<span class="pl-smi">e</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>;<span class="pl-smi">e</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>,f;<span class="pl-k">for</span>(f <span class="pl-k">in</span> g)<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g[f]<span class="pl-k">&amp;&amp;</span>(e[f]<span class="pl-k">=</span>g[f]);<span class="pl-k">return</span> e}g<span class="pl-k">=</span>[];<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[f];<span class="pl-smi">g</span>.<span class="pl-c1">push</span>(<span class="pl-smi">h</span>.<span class="pl-c1">x</span>,<span class="pl-smi">h</span>.<span class="pl-c1">y</span>,<span class="pl-smi">h</span>.<span class="pl-c1">z</span>)}<span class="pl-k">var</span> h<span class="pl-k">=</span>[],l<span class="pl-k">=</span>[],k<span class="pl-k">=</span>{},m<span class="pl-k">=</span>[],p<span class="pl-k">=</span>{},n<span class="pl-k">=</span>[],q<span class="pl-k">=</span>{};<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[f],t<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>][f],v<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">s</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">length</span>(),u<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>,w<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">s</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">s</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">s</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>,</td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>,x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">1</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>),x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">2</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>),x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">3</span>,t),x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">4</span>,v),x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">5</span>,u),x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">6</span>,w),x<span class="pl-k">=</span><span class="pl-en">a</span>(x,<span class="pl-c1">7</span>,<span class="pl-c1">D</span>);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(x);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">s</span>.<span class="pl-smi">a</span>,<span class="pl-smi">s</span>.<span class="pl-smi">b</span>,<span class="pl-smi">s</span>.<span class="pl-smi">c</span>);t<span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>][f],<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-en">d</span>(t[<span class="pl-c1">0</span>]),<span class="pl-en">d</span>(t[<span class="pl-c1">1</span>]),<span class="pl-en">d</span>(t[<span class="pl-c1">2</span>])));v<span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-en">b</span>(<span class="pl-smi">s</span>.<span class="pl-smi">normal</span>));u<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>,<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-en">b</span>(v[<span class="pl-c1">0</span>]),<span class="pl-en">b</span>(v[<span class="pl-c1">1</span>]),<span class="pl-en">b</span>(v[<span class="pl-c1">2</span>])));w<span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-en">c</span>(<span class="pl-smi">s</span>.<span class="pl-c1">color</span>));<span class="pl-c1">D</span><span class="pl-k">&amp;&amp;</span>(s<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>,<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-en">c</span>(s[<span class="pl-c1">0</span>]),<span class="pl-en">c</span>(s[<span class="pl-c1">1</span>]),<span class="pl-en">c</span>(s[<span class="pl-c1">2</span>])))}<span class="pl-smi">e</span>.<span class="pl-c1">data</span><span class="pl-k">=</span>{};<span class="pl-smi">e</span>.<span class="pl-c1">data</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>g;<span class="pl-smi">e</span>.<span class="pl-c1">data</span>.<span class="pl-smi">normals</span><span class="pl-k">=</span>l;<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">m</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-c1">data</span>.<span class="pl-smi">colors</span><span class="pl-k">=</span>m);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">n</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-c1">data</span>.<span class="pl-smi">uvs</span><span class="pl-k">=</span>[n]);<span class="pl-smi">e</span>.<span class="pl-c1">data</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span>h;<span class="pl-k">return</span> e},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},</td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line"><span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span><span class="pl-k">=</span>[[]];<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(b[c].<span class="pl-en">clone</span>());b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(b[c].<span class="pl-en">clone</span>());c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[c];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[c]<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[c]<span class="pl-k">=</span>[]);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span>b[e],h<span class="pl-k">=</span>[],l<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>k;l<span class="pl-k">++</span>)<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(f[l].<span class="pl-en">clone</span>());<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[c].<span class="pl-c1">push</span>(h)}}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};</td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DirectGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryIdCount</span><span class="pl-k">++</span>});<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>DirectGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">indices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">normals</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">colors</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">uvs</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">uvs2</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">groups</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">skinWeights</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">skinIndices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">groupsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DirectGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.DirectGeometry,computeBoundingBox:THREE.Geometry.prototype.computeBoundingBox,computeBoundingSphere:THREE.Geometry.prototype.computeBoundingSphere,computeFaceNormals:<span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeGroups</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[],</td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line">d;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[e];<span class="pl-smi">g</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">materialIndex</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">start</span>,<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(b)),b<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">*</span>e,materialIndex<span class="pl-k">:</span>d})}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">start</span>,<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(b));<span class="pl-c1">this</span>.<span class="pl-smi">groups</span><span class="pl-k">=</span>c},<span class="pl-en">fromGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>,e<span class="pl-k">=</span>d[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d[<span class="pl-c1">0</span>].<span class="pl-c1">length</span>,g<span class="pl-k">=</span>d[<span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d[<span class="pl-c1">1</span>].<span class="pl-c1">length</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>,h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>h){<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span>[],k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span>h;k<span class="pl-k">++</span>)l[k]<span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-smi">position</span><span class="pl-k">=</span>l}<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span>,p<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>p){<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span>[],k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span>p;k<span class="pl-k">++</span>)n[k]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line">[];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span>n}<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>,s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>,t<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>,v<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">length</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;k<span class="pl-k">++</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span>b[k];<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(c[<span class="pl-smi">u</span>.<span class="pl-smi">a</span>],c[<span class="pl-smi">u</span>.<span class="pl-smi">b</span>],c[<span class="pl-smi">u</span>.<span class="pl-smi">c</span>]);<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>;<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">normals</span>.<span class="pl-c1">push</span>(w[<span class="pl-c1">0</span>],w[<span class="pl-c1">1</span>],w[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(w<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">this</span>.<span class="pl-smi">normals</span>.<span class="pl-c1">push</span>(w,w,w));w<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">push</span>(w[<span class="pl-c1">0</span>],w[<span class="pl-c1">1</span>],w[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(w<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">push</span>(w,w,w));<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(w<span class="pl-k">=</span>d[<span class="pl-c1">0</span>][k],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>w<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">uvs</span>.<span class="pl-c1">push</span>(w[<span class="pl-c1">0</span>],w[<span class="pl-c1">1</span>],w[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry.fromGeometry(): Undefined vertexUv <span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line">k),<span class="pl-c1">this</span>.<span class="pl-smi">uvs</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>)));<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(w<span class="pl-k">=</span>d[<span class="pl-c1">1</span>][k],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>w<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">uvs2</span>.<span class="pl-c1">push</span>(w[<span class="pl-c1">0</span>],w[<span class="pl-c1">1</span>],w[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 <span class="pl-pds">&quot;</span></span>,k),<span class="pl-c1">this</span>.<span class="pl-smi">uvs2</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>)));<span class="pl-k">for</span>(w<span class="pl-k">=</span><span class="pl-c1">0</span>;w<span class="pl-k">&lt;</span>h;w<span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span>f[w].<span class="pl-smi">vertices</span>;l[w].<span class="pl-c1">push</span>(<span class="pl-c1">D</span>[<span class="pl-smi">u</span>.<span class="pl-smi">a</span>],<span class="pl-c1">D</span>[<span class="pl-smi">u</span>.<span class="pl-smi">b</span>],<span class="pl-c1">D</span>[<span class="pl-smi">u</span>.<span class="pl-smi">c</span>])}<span class="pl-k">for</span>(w<span class="pl-k">=</span><span class="pl-c1">0</span>;w<span class="pl-k">&lt;</span>p;w<span class="pl-k">++</span>)<span class="pl-c1">D</span><span class="pl-k">=</span>m[w].<span class="pl-smi">vertexNormals</span>[k],n[w].<span class="pl-c1">push</span>(<span class="pl-c1">D</span>.<span class="pl-smi">a</span>,<span class="pl-c1">D</span>.<span class="pl-smi">b</span>,<span class="pl-c1">D</span>.<span class="pl-smi">c</span>);t<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">push</span>(q[<span class="pl-smi">u</span>.<span class="pl-smi">a</span>],q[<span class="pl-smi">u</span>.<span class="pl-smi">b</span>],q[<span class="pl-smi">u</span>.<span class="pl-smi">c</span>]);v<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">push</span>(s[<span class="pl-smi">u</span>.<span class="pl-smi">a</span>],s[<span class="pl-smi">u</span>.<span class="pl-smi">b</span>],</td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line">s[<span class="pl-smi">u</span>.<span class="pl-smi">c</span>])}<span class="pl-c1">this</span>.<span class="pl-en">computeGroups</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">verticesNeedUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normalsNeedUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">colorsNeedUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uvsNeedUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">groupsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">groupsNeedUpdate</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">DirectGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryIdCount</span><span class="pl-k">++</span>});<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">index</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">morphAttributes</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">groups</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">drawRange</span><span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">0</span>,count<span class="pl-k">:</span><span class="pl-c1">Infinity</span>}};</td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.BufferGeometry,addIndex:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>(a)},<span class="pl-en">getIndex</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">index</span>},<span class="pl-en">setIndex</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">index</span><span class="pl-k">=</span>a},<span class="pl-en">addAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferAttribute</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBufferAttribute</span><span class="pl-k">?</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(a,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,</td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line">c)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>index<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">?</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>(b))<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>[a]<span class="pl-k">=</span>b},<span class="pl-en">getAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>[a]},<span class="pl-en">removeAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">delete</span> <span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>[a]},<span class="pl-k">get</span> <span class="pl-en">drawcalls</span>(){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .drawcalls has been renamed to .groups.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">groups</span>},<span class="pl-k">get</span> <span class="pl-en">offsets</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .offsets has been renamed to .groups.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">groups</span>},<span class="pl-en">addDrawCall</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.<span class="pl-pds">&quot;</span></span>);<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addDrawCall() is now .addGroup().<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">addGroup</span>(a,b)},<span class="pl-en">clearDrawCalls</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">clearGroups</span>()},<span class="pl-en">addGroup</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">groups</span>.<span class="pl-c1">push</span>({start<span class="pl-k">:</span>a,count<span class="pl-k">:</span>b,materialIndex<span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>})},<span class="pl-en">clearGroups</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">groups</span><span class="pl-k">=</span>[]},<span class="pl-en">setDrawRange</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">drawRange</span>.<span class="pl-c1">start</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">drawRange</span>.<span class="pl-smi">count</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line">b},<span class="pl-en">applyMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">applyToVector3Array</span>(<span class="pl-smi">b</span>.<span class="pl-smi">array</span>),<span class="pl-smi">b</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>((<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>).<span class="pl-en">getNormalMatrix</span>(a).<span class="pl-en">applyToVector3Array</span>(<span class="pl-smi">b</span>.<span class="pl-smi">array</span>),<span class="pl-smi">b</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">computeBoundingBox</span>();<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">computeBoundingSphere</span>()},<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeRotationX</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;</td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeRotationY</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeRotationZ</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeTranslation</span>(b,c,d);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-smi">a</span>.<span class="pl-en">makeScale</span>(b,c,d);<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(a);</td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>}}(),<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>);<span class="pl-smi">a</span>.<span class="pl-en">lookAt</span>(b);<span class="pl-smi">a</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-en">applyMatrix</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>)}}(),<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">computeBoundingBox</span>();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-en">center</span>().<span class="pl-en">negate</span>();<span class="pl-c1">this</span>.<span class="pl-en">translate</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> a},<span class="pl-en">setFromObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>;<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span><span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>){a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>,<span class="pl-c1">3</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">length</span>,<span class="pl-c1">3</span>);<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-en">copyVector3sArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-en">copyColorsArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">colors</span>));<span class="pl-smi">b</span>.<span class="pl-smi">lineDistances</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">lineDistances</span>.<span class="pl-c1">length</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lineDistances</span>.<span class="pl-c1">length</span>,<span class="pl-c1">1</span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>lineDistance<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">a</span>.<span class="pl-en">copyArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lineDistances</span>)));<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-en">clone</span>());<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-en">clone</span>())}<span class="pl-k">else</span> a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">&amp;&amp;</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">fromGeometry</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">updateFromObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>;<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">__directGeometry</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">fromGeometry</span>(b);<span class="pl-smi">c</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">verticesNeedUpdate</span>;<span class="pl-smi">c</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">normalsNeedUpdate</span>;<span class="pl-smi">c</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">colorsNeedUpdate</span>;<span class="pl-smi">c</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">uvsNeedUpdate</span>;<span class="pl-smi">c</span>.<span class="pl-smi">groupsNeedUpdate</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">groupsNeedUpdate</span>;<span class="pl-smi">b</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">groupsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span>c}<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-en">copyVector3sArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>),</td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">b</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-en">copyVector3sArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">normals</span>),<span class="pl-smi">c</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">b</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">color</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-en">copyColorsArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">colors</span>),<span class="pl-smi">c</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">b</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">uv</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-en">copyVector2sArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uvs</span>),<span class="pl-smi">c</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">b</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-smi">lineDistancesNeedUpdate</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">lineDistance</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">c</span>.<span class="pl-en">copyArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lineDistances</span>),<span class="pl-smi">c</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">b</span>.<span class="pl-smi">lineDistancesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-smi">groupsNeedUpdate</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-en">computeGroups</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>),<span class="pl-c1">this</span>.<span class="pl-smi">groups</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">groups</span>,<span class="pl-smi">b</span>.<span class="pl-smi">groupsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">fromGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-smi">__directGeometry</span><span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.DirectGeometry</span>).<span class="pl-en">fromGeometry</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">fromDirectGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__directGeometry</span>)},<span class="pl-en">fromDirectGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>);<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>)).<span class="pl-en">copyVector3sArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>));<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">normals</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line">(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">normals</span>.<span class="pl-c1">length</span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>)).<span class="pl-en">copyVector3sArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normals</span>)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">length</span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>)).<span class="pl-en">copyColorsArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">colors</span>)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>.<span class="pl-c1">length</span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">2</span>)).<span class="pl-en">copyVector2sArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs2</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs2</span>.<span class="pl-c1">length</span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uv2<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,</td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>)).<span class="pl-en">copyVector2sArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uvs2</span>)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">indices</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> (<span class="pl-c1">65535</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-c1">Uint32Array</span><span class="pl-k">:</span><span class="pl-c1">Uint16Array</span>)(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">indices</span>.<span class="pl-c1">length</span>),<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>((<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">1</span>)).<span class="pl-en">copyIndicesArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">indices</span>)));<span class="pl-c1">this</span>.<span class="pl-smi">groups</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">groups</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c <span class="pl-k">in</span> <span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[c],e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>d[e],h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>,<span class="pl-c1">3</span>);<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">h</span>.<span class="pl-en">copyVector3sArray</span>(f))}<span class="pl-c1">this</span>.<span class="pl-smi">morphAttributes</span>[c]<span class="pl-k">=</span>b}<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span>,</td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">4</span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>skinIndex<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-en">copyVector4sArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span>,<span class="pl-c1">4</span>),<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>skinWeight<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-en">copyVector4sArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>)));<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-en">clone</span>());<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-en">clone</span>());<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">computeBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>;<span class="pl-k">if</span>(b){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>;<span class="pl-smi">c</span>.<span class="pl-en">makeEmpty</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">a</span>.<span class="pl-en">fromArray</span>(b,d),<span class="pl-smi">c</span>.<span class="pl-en">expandByPoint</span>(a)}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>)<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">max</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);(<span class="pl-c1">isNaN</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span>)<span class="pl-k">||</span><span class="pl-c1">isNaN</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span>)<span class="pl-k">||</span><span class="pl-c1">isNaN</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>))<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The &quot;position&quot; attribute is likely to have NaN values.<span class="pl-pds">&#39;</span></span>,<span class="pl-c1">this</span>)}}(),<span class="pl-en">computeBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>;<span class="pl-k">if</span>(c){<span class="pl-smi">a</span>.<span class="pl-en">makeEmpty</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">center</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">b</span>.<span class="pl-en">fromArray</span>(c,e),<span class="pl-smi">a</span>.<span class="pl-en">expandByPoint</span>(b);<span class="pl-smi">a</span>.<span class="pl-en">center</span>(d);<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">b</span>.<span class="pl-en">fromArray</span>(c,e),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(f,<span class="pl-smi">d</span>.<span class="pl-en">distanceToSquared</span>(b));<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f);<span class="pl-c1">isNaN</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The &quot;position&quot; attribute is likely to have NaN values.<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>)}}}(),<span class="pl-en">computeFaceNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">index</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">groups</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">position</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">normal</span>)<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-smi">d</span>.<span class="pl-c1">length</span>),<span class="pl-c1">3</span>));<span class="pl-k">else</span> <span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)e[g]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>,h,l,k,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,s<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(a){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">array</span>;<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">addGroup</span>(<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">0</span>,v<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>v;<span class="pl-k">++</span>t)<span class="pl-k">for</span>(g<span class="pl-k">=</span>c[t],f<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">start</span>,h<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">count</span>,g<span class="pl-k">=</span>f,f<span class="pl-k">+=</span>h;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">+=</span><span class="pl-c1">3</span>)h<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>a[g<span class="pl-k">+</span><span class="pl-c1">0</span>],l<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>a[g<span class="pl-k">+</span><span class="pl-c1">1</span>],k<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>a[g<span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-smi">m</span>.<span class="pl-en">fromArray</span>(d,h),<span class="pl-smi">p</span>.<span class="pl-en">fromArray</span>(d,l),<span class="pl-smi">n</span>.<span class="pl-en">fromArray</span>(d,k),<span class="pl-smi">q</span>.<span class="pl-en">subVectors</span>(n,p),<span class="pl-smi">s</span>.<span class="pl-en">subVectors</span>(m,p),<span class="pl-smi">q</span>.<span class="pl-en">cross</span>(s),e[h]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,e[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>,e[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">z</span>,e[l]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,e[l<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>,e[l<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">z</span>,e[k]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,e[k<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>,e[k<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span><span class="pl-smi">q</span>.<span class="pl-c1">z</span>}<span class="pl-k">else</span> <span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">+=</span><span class="pl-c1">9</span>)<span class="pl-smi">m</span>.<span class="pl-en">fromArray</span>(d,g),<span class="pl-smi">p</span>.<span class="pl-en">fromArray</span>(d,g<span class="pl-k">+</span><span class="pl-c1">3</span>),<span class="pl-smi">n</span>.<span class="pl-en">fromArray</span>(d,g<span class="pl-k">+</span><span class="pl-c1">6</span>),<span class="pl-smi">q</span>.<span class="pl-en">subVectors</span>(n,p),<span class="pl-smi">s</span>.<span class="pl-en">subVectors</span>(m,p),<span class="pl-smi">q</span>.<span class="pl-en">cross</span>(s),e[g]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,e[g<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>,e[g<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">z</span>,e[g<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,e[g<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line">e[g<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">z</span>,e[g<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,e[g<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>,e[g<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-en">normalizeNormals</span>();<span class="pl-smi">b</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}},<span class="pl-en">computeTangents</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .computeTangents() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeOffsets</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .computeOffsets() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>)<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">else</span>{<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>,</td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line">d;<span class="pl-k">for</span>(d <span class="pl-k">in</span> c)<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>[d])<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>c[d].<span class="pl-smi">array</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>[d],f<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">array</span>,h<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">itemSize</span><span class="pl-k">*</span>b;h<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;h<span class="pl-k">++</span>,g<span class="pl-k">++</span>)e[g]<span class="pl-k">=</span>f[h];<span class="pl-k">return</span> <span class="pl-c1">this</span>}},<span class="pl-en">normalizeNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>,b,c,d,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)b<span class="pl-k">=</span>a[e],c<span class="pl-k">=</span>a[e<span class="pl-k">+</span><span class="pl-c1">1</span>],d<span class="pl-k">=</span>a[e<span class="pl-k">+</span><span class="pl-c1">2</span>],b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b<span class="pl-k">*</span>b<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">+</span>d<span class="pl-k">*</span>d),a[e]<span class="pl-k">*=</span>b,a[e<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">*=</span>b,a[e<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">*=</span>b},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry.toJSON<span class="pl-pds">&quot;</span></span>}};<span class="pl-smi">a</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>;<span class="pl-smi">a</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span>);</td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> b)<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b[c]<span class="pl-k">&amp;&amp;</span>(a[c]<span class="pl-k">=</span>b[c]);<span class="pl-k">return</span> a}<span class="pl-smi">a</span>.<span class="pl-c1">data</span><span class="pl-k">=</span>{attributes<span class="pl-k">:</span>{}};<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">index</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-smi">d</span>.<span class="pl-smi">array</span>),<span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-c1">index</span><span class="pl-k">=</span>{type<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">array</span>.<span class="pl-c1">constructor</span>.<span class="pl-c1">name</span>,array<span class="pl-k">:</span>b});d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>;<span class="pl-k">for</span>(c <span class="pl-k">in</span> d){<span class="pl-k">var</span> e<span class="pl-k">=</span>d[c],b<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-smi">e</span>.<span class="pl-smi">array</span>);<span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-c1">attributes</span>[c]<span class="pl-k">=</span>{itemSize<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">itemSize</span>,type<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">array</span>.<span class="pl-c1">constructor</span>.<span class="pl-c1">name</span>,array<span class="pl-k">:</span>b}}c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">groups</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-smi">groups</span><span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-en">stringify</span>(c)));c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span>{center<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">center</span>.<span class="pl-en">toArray</span>(),radius<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">radius</span>});<span class="pl-k">return</span> a},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">index</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>(<span class="pl-smi">b</span>.<span class="pl-en">clone</span>());<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> b)<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(c,b[c].<span class="pl-en">clone</span>());a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">groups</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[c];<span class="pl-c1">this</span>.<span class="pl-en">addGroup</span>(<span class="pl-smi">d</span>.<span class="pl-c1">start</span>,<span class="pl-smi">d</span>.<span class="pl-smi">count</span>)}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-smi">MaxIndex</span><span class="pl-k">=</span><span class="pl-c1">65535</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">InstancedBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>InstancedBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxInstancedCount</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addGroup</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">groups</span>.<span class="pl-c1">push</span>({start<span class="pl-k">:</span>a,count<span class="pl-k">:</span>b,instances<span class="pl-k">:</span>c})};</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">index</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>(<span class="pl-smi">b</span>.<span class="pl-en">clone</span>());<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> b)<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(c,b[c].<span class="pl-en">clone</span>());a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">groups</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[c];<span class="pl-c1">this</span>.<span class="pl-en">addGroup</span>(<span class="pl-smi">d</span>.<span class="pl-c1">start</span>,<span class="pl-smi">d</span>.<span class="pl-smi">count</span>,<span class="pl-smi">d</span>.<span class="pl-smi">instances</span>)}<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">AnimationAction</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>clip is null<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-c1">clip</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">localRoot</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">weight</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">loop</span><span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LoopRepeat</span>;<span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">enabled</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">actionTime</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span>;<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">propertyBindings</span><span class="pl-k">=</span>[]};</td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationAction</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.AnimationAction,setLocalRoot:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">localRoot</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">updateTime</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">clip</span>.<span class="pl-smi">duration</span>;<span class="pl-c1">this</span>.<span class="pl-smi">actionTime</span><span class="pl-k">+=</span>a;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">loop</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LoopOnce</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-smi">actionTime</span>,<span class="pl-c1">0</span>),d),<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span><span class="pl-k">===</span>d<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">mixer</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>finished<span class="pl-pds">&quot;</span></span>,action<span class="pl-k">:</span><span class="pl-c1">this</span>,direction<span class="pl-k">:</span><span class="pl-c1">1</span>})<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">mixer</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>finished<span class="pl-pds">&quot;</span></span>,action<span class="pl-k">:</span><span class="pl-c1">this</span>,</td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line">direction<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>})),<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span>;<span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">actionTime</span><span class="pl-k">/</span>d);a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actionTime</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span><span class="pl-k">*</span>d;a<span class="pl-k">%=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">loop</span><span class="pl-k">==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LoopPingPong</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span><span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>d<span class="pl-k">-</span>a);<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">mixer</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>loop<span class="pl-pds">&quot;</span></span>,action<span class="pl-k">:</span><span class="pl-c1">this</span>,loopDelta<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">loopCount</span>});<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span>},<span class="pl-en">syncWith</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">actionTime</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">actionTime</span>;<span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">timeScale</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">warpToDuration</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">clip</span>.<span class="pl-smi">duration</span><span class="pl-k">/</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line"><span class="pl-en">init</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span><span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">updateTime</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">clip</span>.<span class="pl-en">getAt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">clipTime</span>)},<span class="pl-en">getTimeScaleAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span>.<span class="pl-smi">getAt</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span>.<span class="pl-en">getAt</span>(a)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span>},<span class="pl-en">getWeightAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">weight</span>.<span class="pl-smi">getAt</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">weight</span>.<span class="pl-en">getAt</span>(a)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">weight</span>}};</td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">AnimationClip</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">tracks</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>)b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>[a],<span class="pl-c1">this</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">b</span>.<span class="pl-smi">keys</span>[<span class="pl-smi">b</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">time</span>);<span class="pl-c1">this</span>.<span class="pl-en">trim</span>();<span class="pl-c1">this</span>.<span class="pl-en">optimize</span>();<span class="pl-c1">this</span>.<span class="pl-smi">results</span><span class="pl-k">=</span>[]};</td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.AnimationClip,getAt:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">duration</span>));<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">results</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>[b].<span class="pl-en">getAt</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">results</span>},<span class="pl-en">trim</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>[a].<span class="pl-en">trim</span>(<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">duration</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">optimize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">tracks</span>[a].<span class="pl-en">optimize</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>}};</td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">CreateFromMorphTargetSequence</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>,e<span class="pl-k">=</span>[],g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>d;g<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>[];<span class="pl-smi">f</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span>(g<span class="pl-k">+</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>d,value<span class="pl-k">:</span><span class="pl-c1">0</span>});<span class="pl-smi">f</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span>g,value<span class="pl-k">:</span><span class="pl-c1">1</span>});<span class="pl-smi">f</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span>(g<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>d,value<span class="pl-k">:</span><span class="pl-c1">0</span>});<span class="pl-smi">f</span>.<span class="pl-c1">sort</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-smi">keyComparer</span>);<span class="pl-c1">0</span><span class="pl-k">===</span>f[<span class="pl-c1">0</span>].<span class="pl-smi">time</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span>d,value<span class="pl-k">:</span>f[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>});<span class="pl-smi">e</span>.<span class="pl-c1">push</span>((<span class="pl-k">new</span> <span class="pl-en">THREE.NumberKeyframeTrack</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>.morphTargetInfluences[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b[g].<span class="pl-c1">name</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>,f)).<span class="pl-en">scale</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>c))}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.AnimationClip</span>(a,<span class="pl-k">-</span><span class="pl-c1">1</span>,e)};</td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">findByName</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(a[c].<span class="pl-c1">name</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> a[c];<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">CreateClipsFromMorphTargetSequences</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>{},d<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">[<span class="pl-c1">\w</span>-]</span><span class="pl-k">*?</span>)(<span class="pl-c1">[<span class="pl-c1">\d</span>]</span><span class="pl-k">+</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>a[e],h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">name</span>.<span class="pl-c1">match</span>(d);<span class="pl-k">if</span>(h<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>h[<span class="pl-c1">1</span>];(h<span class="pl-k">=</span>c[l])<span class="pl-k">||</span>(c[l]<span class="pl-k">=</span>h<span class="pl-k">=</span>[]);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(f)}}d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(l <span class="pl-k">in</span> c)<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">CreateFromMorphTargetSequence</span>(l,c[l],b));<span class="pl-k">return</span> d};</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">tracks</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">parse</span>(<span class="pl-smi">a</span>.<span class="pl-smi">tracks</span>[c]).<span class="pl-en">scale</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-smi">fps</span>));<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.AnimationClip</span>(<span class="pl-smi">a</span>.<span class="pl-c1">name</span>,<span class="pl-smi">a</span>.<span class="pl-smi">duration</span>,b)};</td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">parseAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>a)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  no animation in JSONLoader data<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">null</span>;<span class="pl-k">var</span> <span class="pl-en">d</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>b[f];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h[c]<span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-smi">h</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-en">e</span>(h)})}<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-k">new</span> <span class="pl-en">d</span>(a,g)<span class="pl-k">:</span><span class="pl-c1">null</span>},e<span class="pl-k">=</span>[],g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">name</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>default<span class="pl-pds">&quot;</span></span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">||</span><span class="pl-k">-</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fps</span><span class="pl-k">||</span><span class="pl-c1">30</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span><span class="pl-k">||</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;l<span class="pl-k">++</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span>a[l].<span class="pl-smi">keys</span>;<span class="pl-k">if</span>(k<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>)<span class="pl-k">if</span>(k[<span class="pl-c1">0</span>].<span class="pl-smi">morphTargets</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span>{},m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;m<span class="pl-k">++</span>)<span class="pl-k">if</span>(k[m].<span class="pl-smi">morphTargets</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span>k[m].<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;p<span class="pl-k">++</span>)f[k[m].<span class="pl-smi">morphTargets</span>[p]]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> n <span class="pl-k">in</span> f){<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span>[],p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span>k[m].<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;p<span class="pl-k">++</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span>k[m];<span class="pl-smi">q</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-smi">s</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-smi">s</span>.<span class="pl-smi">morphTarget</span><span class="pl-k">===</span>n<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>})}<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.NumberKeyframeTrack</span>(c<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>.morphTargetInfluence[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>n<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>,q))}f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">*</span>(h<span class="pl-k">||</span><span class="pl-c1">1</span>)}<span class="pl-k">else</span> m<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>.bones[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b[l].<span class="pl-c1">name</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>,(p<span class="pl-k">=</span><span class="pl-en">d</span>(m<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>.position<span class="pl-pds">&quot;</span></span>,k,<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">fromArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">pos</span>)}))<span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>(p),(p<span class="pl-k">=</span><span class="pl-en">d</span>(m<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>.quaternion<span class="pl-pds">&quot;</span></span>,k,<span class="pl-s"><span class="pl-pds">&quot;</span>rot<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">rot</span>.<span class="pl-smi">slerp</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">rot</span>.<span class="pl-en">clone</span>()<span class="pl-k">:</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>).<span class="pl-en">fromArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">rot</span>)}))<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-c1">push</span>(p),(k<span class="pl-k">=</span><span class="pl-en">d</span>(m<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>.scale<span class="pl-pds">&quot;</span></span>,k,<span class="pl-s"><span class="pl-pds">&quot;</span>scl<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-en">fromArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">scl</span>)}))<span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>(k)}<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-c1">null</span><span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.AnimationClip</span>(g,f,e)};<span class="pl-c1">THREE</span>.<span class="pl-en">AnimationMixer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">root</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span><span class="pl-k">=</span>{}};</td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationMixer</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.AnimationMixer,addAction:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>(a);<span class="pl-smi">a</span>.<span class="pl-en">init</span>(<span class="pl-c1">this</span>.<span class="pl-smi">time</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mixer</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">clip</span>.<span class="pl-smi">tracks</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">localRoot</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">root</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b[d],g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">uuid</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-c1">name</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>[g];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PropertyBinding</span>(c,<span class="pl-smi">e</span>.<span class="pl-c1">name</span>),<span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>[g]<span class="pl-k">=</span>f);<span class="pl-smi">a</span>.<span class="pl-smi">propertyBindings</span>.<span class="pl-c1">push</span>(f);<span class="pl-smi">f</span>.<span class="pl-smi">referenceCount</span><span class="pl-k">+=</span><span class="pl-c1">1</span>}},<span class="pl-en">removeAllActions</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[a].<span class="pl-smi">mixer</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> <span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>)<span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>[b].<span class="pl-en">unbind</span>();</td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span><span class="pl-k">=</span>{};<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">removeAction</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>),<span class="pl-smi">a</span>.<span class="pl-smi">mixer</span><span class="pl-k">=</span><span class="pl-c1">null</span>);b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">localRoot</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">root</span>;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">clip</span>.<span class="pl-smi">tracks</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">uuid</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a[c].<span class="pl-c1">name</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>[d];<span class="pl-smi">e</span>.<span class="pl-smi">referenceCount</span><span class="pl-k">-=</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;=</span><span class="pl-smi">e</span>.<span class="pl-smi">referenceCount</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-en">unbind</span>(),<span class="pl-k">delete</span> <span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>[d])}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">findActionByName</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[b].<span class="pl-c1">name</span><span class="pl-k">===</span>a)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[b];</td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">null</span>},<span class="pl-en">play</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span>;<span class="pl-c1">this</span>.<span class="pl-en">addAction</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">fadeOut</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[];<span class="pl-smi">c</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>});<span class="pl-smi">c</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">+</span>b,value<span class="pl-k">:</span><span class="pl-c1">0</span>});<span class="pl-smi">a</span>.<span class="pl-smi">weight</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.NumberKeyframeTrack</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>,c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">fadeIn</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[];<span class="pl-smi">c</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>});<span class="pl-smi">c</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">+</span>b,value<span class="pl-k">:</span><span class="pl-c1">1</span>});<span class="pl-smi">a</span>.<span class="pl-smi">weight</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.NumberKeyframeTrack</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>,c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">warp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>[];<span class="pl-smi">e</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span>b});<span class="pl-smi">e</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">+</span>d,value<span class="pl-k">:</span>c});</td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">timeScale</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.NumberKeyframeTrack</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>timeScale<span class="pl-pds">&quot;</span></span>,e);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">crossFade</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-en">fadeOut</span>(a,c);<span class="pl-c1">this</span>.<span class="pl-en">fadeIn</span>(b,c);<span class="pl-k">if</span>(d){d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">clip</span>.<span class="pl-smi">duration</span><span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-c1">clip</span>.<span class="pl-smi">duration</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>d;<span class="pl-c1">this</span>.<span class="pl-en">warp</span>(a,<span class="pl-c1">1</span>,d,c);<span class="pl-c1">this</span>.<span class="pl-en">warp</span>(b,e,<span class="pl-c1">1</span>,c)}<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span>;<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">+=</span>a;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[b],d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">getWeightAt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">time</span>),e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">getTimeScaleAt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">time</span>),e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">update</span>(a<span class="pl-k">*</span>e);<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;=</span><span class="pl-smi">c</span>.<span class="pl-smi">weight</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">enabled</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;g<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-smi">propertyBindings</span>[g].<span class="pl-en">accumulate</span>(e[g],</td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line">d)}<span class="pl-k">for</span>(<span class="pl-k">var</span> f <span class="pl-k">in</span> <span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>)<span class="pl-c1">this</span>.<span class="pl-smi">propertyBindingMap</span>[f].<span class="pl-c1">apply</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationMixer</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span><span class="pl-k">=</span>{<span class="pl-en">getEqualsFunc</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">equals</span><span class="pl-k">?</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">equals</span>(c)}<span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a<span class="pl-k">===</span>c}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>object<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> a){<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">clone</span>)<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">clone</span>();<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>can not figure out how to copy exemplarValue<span class="pl-pds">&quot;</span></span>,a)}<span class="pl-k">return</span> a},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-en">getLerpFunc</span>(a,d)(a,b,c)},<span class="pl-en">lerp_object</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">lerp</span>(b,c)},<span class="pl-en">slerp_object</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">slerp</span>(b,c)},<span class="pl-en">lerp_number</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>c)<span class="pl-k">+</span>b<span class="pl-k">*</span>c},<span class="pl-en">lerp_boolean</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span>.<span class="pl-ii">5</span><span class="pl-k">&gt;</span>c<span class="pl-k">?</span>a<span class="pl-k">:</span>b},<span class="pl-en">lerp_boolean_immediate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a},<span class="pl-en">lerp_string</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span>.<span class="pl-ii">5</span><span class="pl-k">&gt;</span>c<span class="pl-k">?</span>a<span class="pl-k">:</span>b},<span class="pl-en">lerp_string_immediate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a},<span class="pl-en">getLerpFunc</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">||</span><span class="pl-c1">null</span><span class="pl-k">===</span>a)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>examplarValue is null<span class="pl-pds">&quot;</span></span>);<span class="pl-k">switch</span>(<span class="pl-k">typeof</span> a){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>object<span class="pl-pds">&quot;</span></span>:<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">lerp</span>)<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-smi">lerp_object</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">slerp</span>)<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-smi">slerp_object</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-smi">lerp_number</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>boolean<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> b<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-smi">lerp_boolean</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-smi">lerp_boolean_immediate</span>;</td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line"><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> b<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-smi">lerp_string</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-smi">lerp_string_immediate</span>}}};<span class="pl-c1">THREE</span>.<span class="pl-en">KeyframeTrack</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>track name is undefined<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>no keys in track named <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">keys</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">validate</span>();<span class="pl-c1">this</span>.<span class="pl-en">optimize</span>()};</td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.KeyframeTrack,getAt:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(;<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>a<span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span>].<span class="pl-smi">time</span>;)<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">++</span>;<span class="pl-k">for</span>(;<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">&amp;&amp;</span>a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">time</span>;)<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">--</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">setResult</span>(<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">value</span>),<span class="pl-c1">this</span>.<span class="pl-smi">result</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">setResult</span>(<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>),<span class="pl-c1">this</span>.<span class="pl-smi">result</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-en">setResult</span>(<span class="pl-smi">b</span>.<span class="pl-c1">value</span>);<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">constantToNext</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">result</span>;</td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">this</span>.<span class="pl-c1">lastIndex</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">lerpValues</span>(<span class="pl-c1">this</span>.<span class="pl-smi">result</span>,<span class="pl-smi">c</span>.<span class="pl-c1">value</span>,(a<span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">time</span>)<span class="pl-k">/</span>(<span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">time</span>))},<span class="pl-en">shift</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b].<span class="pl-smi">time</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b].<span class="pl-smi">time</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">trim</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[d]<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">++</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>d;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[d]<span class="pl-k">&gt;=</span>b)e<span class="pl-k">++</span>;<span class="pl-k">else</span> <span class="pl-k">break</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">+</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">keys</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">splice</span>(c,<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">-</span>c));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">validate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>)<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  track is empty, no keys<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>);<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b];<span class="pl-k">if</span>(<span class="pl-k">!</span>c){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  key is null in track<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>,b);<span class="pl-k">return</span>}<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-k">typeof</span> <span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">||</span><span class="pl-c1">isNaN</span>(<span class="pl-smi">c</span>.<span class="pl-smi">time</span>)){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  key.time is not a valid number<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>,b,c);<span class="pl-k">return</span>}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span><span class="pl-k">||</span><span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  key.value is null in track<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>,b,c);<span class="pl-k">return</span>}<span class="pl-k">if</span>(a<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;</span><span class="pl-smi">c</span>.<span class="pl-smi">time</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  key.time is less than previous key time, out of order keys<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>,b,c,a);<span class="pl-k">return</span>}a<span class="pl-k">=</span>c}<span class="pl-k">return</span> <span class="pl-c1">this</span>}},<span class="pl-en">optimize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>];<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(b);<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-en">getEqualsFunc</span>(<span class="pl-smi">b</span>.<span class="pl-c1">value</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[c],e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[c<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-smi">b</span>.<span class="pl-smi">time</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-en">compareValues</span>(<span class="pl-smi">b</span>.<span class="pl-c1">value</span>,<span class="pl-smi">d</span>.<span class="pl-c1">value</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">compareValues</span>(<span class="pl-smi">d</span>.<span class="pl-c1">value</span>,<span class="pl-smi">e</span>.<span class="pl-c1">value</span>)<span class="pl-k">||</span>(<span class="pl-smi">b</span>.<span class="pl-smi">constantToNext</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">compareValues</span>(<span class="pl-smi">b</span>.<span class="pl-c1">value</span>,<span class="pl-smi">d</span>.<span class="pl-c1">value</span>),<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(d),b<span class="pl-k">=</span>d)}<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]);<span class="pl-c1">this</span>.<span class="pl-smi">keys</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-en">keyComparer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">time</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">time</span>};</td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">type</span>)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>track type undefined, can not parse<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-en">GetTrackTypeForTypeName</span>(<span class="pl-smi">a</span>.<span class="pl-c1">type</span>).<span class="pl-c1">parse</span>(a)};</td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-en">GetTrackTypeForTypeName</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">switch</span>(<span class="pl-smi">a</span>.<span class="pl-c1">toLowerCase</span>()){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>vector<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>vector2<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>vector3<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>vector4<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>quaternion<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>integer<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>scalar<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>float<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>bool<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>boolean<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>:<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>}<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Unsupported typeName: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);};</td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PropertyBinding</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">rootNode</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">trackName</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">referenceCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">originalValue</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PropertyBinding</span>.<span class="pl-en">parseTrackName</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">directoryName</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">directoryName</span>;<span class="pl-c1">this</span>.<span class="pl-c1">nodeName</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">nodeName</span>;<span class="pl-c1">this</span>.<span class="pl-smi">objectName</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">objectName</span>;<span class="pl-c1">this</span>.<span class="pl-smi">objectIndex</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">objectIndex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">propertyName</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">propertyName</span>;<span class="pl-c1">this</span>.<span class="pl-smi">propertyIndex</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">propertyIndex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">node</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PropertyBinding</span>.<span class="pl-en">findNode</span>(a,<span class="pl-c1">this</span>.<span class="pl-c1">nodeName</span>)<span class="pl-k">||</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">=</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PropertyBinding</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.PropertyBinding,reset:<span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">=</span><span class="pl-c1">0</span>},<span class="pl-en">accumulate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">isBound</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-en">bind</span>();<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-en">clone</span>(a)),<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">=</span>b)<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">lerpValue</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span>,a,b<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">+</span>b)),<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">+=</span>b)},<span class="pl-en">unbind</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">isBound</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-en">setValue</span>(<span class="pl-c1">this</span>.<span class="pl-smi">originalValue</span>),</td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">triggerDirty</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">equalsValue</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lerpValue</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">getValue</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">setValue</span><span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">this</span>.<span class="pl-smi">isBound</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>)},<span class="pl-en">bind</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">isBound</span>){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">node</span>;<span class="pl-k">if</span>(a){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">objectName</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>materials<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">objectName</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">a</span>.<span class="pl-smi">material</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  can not bind to material as node does not have a material<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>);<span class="pl-k">return</span>}<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">a</span>.<span class="pl-smi">material</span>.<span class="pl-smi">materials</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  can not bind to material.materials as node.material does not have a materials array<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>);<span class="pl-k">return</span>}a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">material</span>.<span class="pl-smi">materials</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>bones<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">objectName</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">a</span>.<span class="pl-smi">skeleton</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  can not bind to bones as node does not have a skeleton<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>);<span class="pl-k">return</span>}<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">bones</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-k">if</span>(a[b].<span class="pl-c1">name</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">objectIndex</span>){<span class="pl-c1">this</span>.<span class="pl-smi">objectIndex</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>}}<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a[<span class="pl-c1">this</span>.<span class="pl-smi">objectName</span>]){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  can not bind to objectName of node, undefined<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>);<span class="pl-k">return</span>}a<span class="pl-k">=</span>a[<span class="pl-c1">this</span>.<span class="pl-smi">objectName</span>]}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">objectIndex</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a[<span class="pl-c1">this</span>.<span class="pl-smi">objectIndex</span>]){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  trying to bind to objectIndex of objectName, but is undefined:<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>,a);<span class="pl-k">return</span>}a<span class="pl-k">=</span>a[<span class="pl-c1">this</span>.<span class="pl-smi">objectIndex</span>]}}<span class="pl-k">var</span> c<span class="pl-k">=</span>a[<span class="pl-c1">this</span>.<span class="pl-smi">propertyName</span>];<span class="pl-k">if</span>(c){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">propertyIndex</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>morphTargetInfluences<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">propertyName</span>)<span class="pl-k">for</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometry</span><span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  can not bind to morphTargetInfluences becasuse node does not have a geometry<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>),<span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>),b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">node</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>[b].<span class="pl-c1">name</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">propertyIndex</span>){<span class="pl-c1">this</span>.<span class="pl-smi">propertyIndex</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>}<span class="pl-c1">this</span>.<span class="pl-en">setValue</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">equalsValue</span>(c[<span class="pl-c1">this</span>.<span class="pl-smi">propertyIndex</span>],a)<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span>(c[<span class="pl-c1">this</span>.<span class="pl-smi">propertyIndex</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line">a,<span class="pl-k">!</span><span class="pl-c1">0</span>)};<span class="pl-c1">this</span>.<span class="pl-en">getValue</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> c[<span class="pl-c1">this</span>.<span class="pl-smi">propertyIndex</span>]}}<span class="pl-k">else</span> <span class="pl-smi">c</span>.<span class="pl-smi">copy</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-en">setValue</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">equalsValue</span>(c,a)<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span>(<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(a),<span class="pl-k">!</span><span class="pl-c1">0</span>)},<span class="pl-c1">this</span>.<span class="pl-en">getValue</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> c})<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-en">setValue</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">equalsValue</span>(a[<span class="pl-c1">this</span>.<span class="pl-smi">propertyName</span>],b)<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span>(a[<span class="pl-c1">this</span>.<span class="pl-smi">propertyName</span>]<span class="pl-k">=</span>b,<span class="pl-k">!</span><span class="pl-c1">0</span>)},<span class="pl-c1">this</span>.<span class="pl-en">getValue</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> a[<span class="pl-c1">this</span>.<span class="pl-smi">propertyName</span>]});<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">triggerDirty</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">node</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-en">triggerDirty</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>});<span class="pl-c1">this</span>.<span class="pl-smi">originalValue</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getValue</span>();<span class="pl-c1">this</span>.<span class="pl-smi">equalsValue</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-en">getEqualsFunc</span>(<span class="pl-c1">this</span>.<span class="pl-smi">originalValue</span>);<span class="pl-c1">this</span>.<span class="pl-smi">lerpValue</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationUtils</span>.<span class="pl-en">getLerpFunc</span>(<span class="pl-c1">this</span>.<span class="pl-smi">originalValue</span>,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">isBound</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  trying to update property for track: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">nodeName</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">propertyName</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> but it wasn&#39;t found.<span class="pl-pds">&quot;</span></span>,a)}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>  trying to update node for track: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">trackName</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> but it wasn&#39;t found.<span class="pl-pds">&quot;</span></span>)}},<span class="pl-en">apply</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">isBound</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-en">bind</span>();<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span>){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">lerpValue</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span>,<span class="pl-c1">this</span>.<span class="pl-smi">originalValue</span>,a<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">+</span>a))}<span class="pl-c1">this</span>.<span class="pl-en">setValue</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">triggerDirty</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">triggerDirty</span>();<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeValue</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cumulativeWeight</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}};</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PropertyBinding</span>.<span class="pl-en">parseTrackName</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>((<span class="pl-c1">[<span class="pl-c1">\w</span>]</span><span class="pl-k">+</span><span class="pl-cce">\/</span>)<span class="pl-k">*</span>)(<span class="pl-c1">[<span class="pl-c1"><span class="pl-cce">\w</span>-<span class="pl-cce">\d</span></span>]</span><span class="pl-k">+</span>)<span class="pl-k">?</span>(<span class="pl-cce">\.</span>(<span class="pl-c1">[<span class="pl-c1">\w</span>]</span><span class="pl-k">+</span>)(<span class="pl-cce">\[</span>(<span class="pl-c1">[<span class="pl-c1">\w\d</span><span class="pl-cce">\[\]\_</span><span class="pl-c1">.</span> ]</span><span class="pl-k">+</span>)<span class="pl-cce">\]</span>)<span class="pl-k">?</span>)<span class="pl-k">?</span>(<span class="pl-cce">\.</span>(<span class="pl-c1">[<span class="pl-c1">\w.</span>]</span><span class="pl-k">+</span>)(<span class="pl-cce">\[</span>(<span class="pl-c1">[<span class="pl-c1">\w\d</span><span class="pl-cce">\[\]\_</span><span class="pl-c1">.</span> ]</span><span class="pl-k">+</span>)<span class="pl-cce">\]</span>)<span class="pl-k">?</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>,c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">exec</span>(a);<span class="pl-k">if</span>(<span class="pl-k">!</span>c)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cannot parse trackName at all: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);<span class="pl-smi">c</span>.<span class="pl-c1">index</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">lastIndex</span><span class="pl-k">++</span>;b<span class="pl-k">=</span>{directoryName<span class="pl-k">:</span>c[<span class="pl-c1">1</span>],nodeName<span class="pl-k">:</span>c[<span class="pl-c1">3</span>],objectName<span class="pl-k">:</span>c[<span class="pl-c1">5</span>],objectIndex<span class="pl-k">:</span>c[<span class="pl-c1">7</span>],propertyName<span class="pl-k">:</span>c[<span class="pl-c1">9</span>],propertyIndex<span class="pl-k">:</span>c[<span class="pl-c1">11</span>]};<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">propertyName</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">propertyName</span>.<span class="pl-c1">length</span>)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>can not parse propertyName from trackName: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PropertyBinding</span>.<span class="pl-en">findNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bones</span>[c];<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-c1">name</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> d}<span class="pl-k">return</span> <span class="pl-c1">null</span>}function d(a){for(var c=0;c&lt;a.length;c++){var e=a[c];if(e.name===b||e.uuid===b||(e=d(e.children)))return e}return null}if(!b||&quot;&quot;===b||&quot;root&quot;===b||&quot;.&quot;===b||-1===b||b===a.name||b===a.uuid)return a;if(a.skeleton){var e=c(a.skeleton);if(e)return e}return a.children&amp;&amp;(e=d(a.children))?e:null};</td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">VectorKeyframeTrack</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>.<span class="pl-en">clone</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setResult</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">result</span>.<span class="pl-en">copy</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lerpValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">lerp</span>(b,c)};<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compareValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">equals</span>(b)};</td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b];<span class="pl-smi">a</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>.<span class="pl-en">clone</span>()})}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.VectorKeyframeTrack</span>(<span class="pl-c1">this</span>.<span class="pl-c1">name</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">VectorKeyframeTrack</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>Vector<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>.<span class="pl-c1">length</span>],c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">keys</span>[d];<span class="pl-smi">c</span>.<span class="pl-c1">push</span>({value<span class="pl-k">:</span>(<span class="pl-k">new</span> <span class="pl-en">b</span>).<span class="pl-en">fromArray</span>(<span class="pl-smi">e</span>.<span class="pl-c1">value</span>),time<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">time</span>})}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.VectorKeyframeTrack</span>(<span class="pl-smi">a</span>.<span class="pl-c1">name</span>,c)};</td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">QuaternionKeyframeTrack</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>.<span class="pl-en">clone</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setResult</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">result</span>.<span class="pl-en">copy</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lerpValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">slerp</span>(b,c)};</td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compareValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">equals</span>(b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">multiply</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b].<span class="pl-c1">value</span>.<span class="pl-en">multiply</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b];<span class="pl-smi">a</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>.<span class="pl-en">clone</span>()})}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.QuaternionKeyframeTrack</span>(<span class="pl-c1">this</span>.<span class="pl-c1">name</span>,a)};</td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">QuaternionKeyframeTrack</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">keys</span>[c];<span class="pl-smi">b</span>.<span class="pl-c1">push</span>({value<span class="pl-k">:</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>).<span class="pl-en">fromArray</span>(<span class="pl-smi">d</span>.<span class="pl-c1">value</span>),time<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span>})}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.QuaternionKeyframeTrack</span>(<span class="pl-smi">a</span>.<span class="pl-c1">name</span>,b)};<span class="pl-c1">THREE</span>.<span class="pl-en">StringKeyframeTrack</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>;</td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setResult</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lerpValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span><span class="pl-k">&gt;</span>c<span class="pl-k">?</span>a<span class="pl-k">:</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compareValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">===</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b];<span class="pl-smi">a</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>})}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.StringKeyframeTrack</span>(<span class="pl-c1">this</span>.<span class="pl-c1">name</span>,a)};</td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">StringKeyframeTrack</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.StringKeyframeTrack</span>(<span class="pl-smi">a</span>.<span class="pl-c1">name</span>,<span class="pl-smi">a</span>.<span class="pl-smi">keys</span>)};<span class="pl-c1">THREE</span>.<span class="pl-en">BooleanKeyframeTrack</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setResult</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span>a};</td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lerpValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span><span class="pl-k">&gt;</span>c<span class="pl-k">?</span>a<span class="pl-k">:</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compareValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">===</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b];<span class="pl-smi">a</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>})}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BooleanKeyframeTrack</span>(<span class="pl-c1">this</span>.<span class="pl-c1">name</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">BooleanKeyframeTrack</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BooleanKeyframeTrack</span>(<span class="pl-smi">a</span>.<span class="pl-c1">name</span>,<span class="pl-smi">a</span>.<span class="pl-smi">keys</span>)};</td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">NumberKeyframeTrack</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-c1">value</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyframeTrack</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setResult</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">result</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lerpValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>c)<span class="pl-k">+</span>b<span class="pl-k">*</span>c};<span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">compareValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">===</span>b};</td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">keys</span>[b];<span class="pl-smi">a</span>.<span class="pl-c1">push</span>({time<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">time</span>,value<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>})}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.NumberKeyframeTrack</span>(<span class="pl-c1">this</span>.<span class="pl-c1">name</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">NumberKeyframeTrack</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.NumberKeyframeTrack</span>(<span class="pl-smi">a</span>.<span class="pl-c1">name</span>,<span class="pl-smi">a</span>.<span class="pl-smi">keys</span>)};<span class="pl-c1">THREE</span>.<span class="pl-en">Camera</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Camera<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldInverse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getWorldDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-en">getWorldQuaternion</span>(a);<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).<span class="pl-en">applyQuaternion</span>(a)}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lookAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-en">lookAt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>,b,<span class="pl-c1">this</span>.<span class="pl-smi">up</span>);<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">setFromRotationMatrix</span>(a)}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)};</td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldInverse</span>);<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">projectionMatrix</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubeCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CubeCamera<span class="pl-pds">&quot;</span></span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">d</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">d</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(d);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">e</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">e</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(e);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">g</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">g</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(g);<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">f</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">f</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">add</span>(f);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">h</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">h</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(h);<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">l</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">l</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">renderTarget</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLRenderTargetCube</span>(c,c,{format<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span>,magFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>,minFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>});<span class="pl-c1">this</span>.<span class="pl-en">updateCubeMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">renderTarget</span>,n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">generateMipmaps</span>;<span class="pl-smi">c</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,d,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,e,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,g,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,f,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,h,c);<span class="pl-smi">c</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span>n;<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,l,c);<span class="pl-smi">a</span>.<span class="pl-en">setRenderTarget</span>(<span class="pl-c1">null</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CubeCamera</span>;</td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">OrthographicCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>OrthographicCamera<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-c1">left</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">.1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">2E3</span>;<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>;</td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateProjectionMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-c1">right</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">left</span>)<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>),b<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-c1">top</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">bottom</span>)<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>),c<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-c1">right</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">left</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-c1">top</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">bottom</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">makeOrthographic</span>(c<span class="pl-k">-</span>a,c<span class="pl-k">+</span>a,d<span class="pl-k">+</span>b,d<span class="pl-k">-</span>b,<span class="pl-c1">this</span>.<span class="pl-smi">near</span>,<span class="pl-c1">this</span>.<span class="pl-smi">far</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">left</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">left</span>;<span class="pl-c1">this</span>.<span class="pl-c1">right</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">right</span>;<span class="pl-c1">this</span>.<span class="pl-c1">top</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">top</span>;<span class="pl-c1">this</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">bottom</span>;<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">near</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">far</span>;<span class="pl-c1">this</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">zoom</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">toJSON</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-c1">left</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">left</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-c1">right</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">right</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-c1">top</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">top</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">bottom</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">near</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">far</span>;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">PerspectiveCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PerspectiveCamera<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">50</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aspect</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">.1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">2E3</span>;<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};</td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLens</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">24</span>);<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">radToDeg</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">atan</span>(b<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>a)));<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setViewOffset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>g;<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};</td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateProjectionMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">radToDeg</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">.5</span><span class="pl-k">*</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">degToRad</span>(<span class="pl-c1">this</span>.<span class="pl-smi">fov</span>))<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>));<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span>,a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">degToRad</span>(<span class="pl-c1">.5</span><span class="pl-k">*</span>a))<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">near</span>,c<span class="pl-k">=</span><span class="pl-k">-</span>a,d<span class="pl-k">=</span>b<span class="pl-k">*</span>c,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b<span class="pl-k">*</span>a<span class="pl-k">-</span>d),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a<span class="pl-k">-</span>c);<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">makeFrustum</span>(d<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span>,d<span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">width</span>)<span class="pl-k">*</span>b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span>,a<span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">height</span>)<span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span>,a<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span>,<span class="pl-c1">this</span>.<span class="pl-smi">near</span>,<span class="pl-c1">this</span>.<span class="pl-smi">far</span>)}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">makePerspective</span>(a,</td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">aspect</span>,<span class="pl-c1">this</span>.<span class="pl-smi">near</span>,<span class="pl-c1">this</span>.<span class="pl-smi">far</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fov</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aspect</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">aspect</span>;<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">near</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">far</span>;<span class="pl-c1">this</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">zoom</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">toJSON</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fov</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">aspect</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aspect</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">near</span>;<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">far</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Light</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Light<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>;</td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>,{onlyShadow<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Light: .onlyShadow has been removed.<span class="pl-pds">&quot;</span></span>)}},shadowCameraFov<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">camera</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span>a}},shadowCameraLeft<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">camera</span>.<span class="pl-c1">left</span><span class="pl-k">=</span>a}},shadowCameraRight<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">camera</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>a}},shadowCameraTop<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">camera</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>a}},shadowCameraBottom<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">camera</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span>a}},shadowCameraNear<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">camera</span>.<span class="pl-smi">near</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line">a}},shadowCameraFar<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">camera</span>.<span class="pl-smi">far</span><span class="pl-k">=</span>a}},shadowCameraVisible<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow ) instead.<span class="pl-pds">&quot;</span></span>)}},shadowBias<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">bias</span><span class="pl-k">=</span>a}},shadowDarkness<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">darkness</span><span class="pl-k">=</span>a}},shadowMapWidth<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">mapSize</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a}},shadowMapHeight<span class="pl-k">:</span>{<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span>.<span class="pl-smi">mapSize</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>a}}});</td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">toJSON</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">getHex</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">groundColor</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">groundColor</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">groundColor</span>.<span class="pl-en">getHex</span>());<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">intensity</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">distance</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">angle</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">angle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">angle</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">decay</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">decay</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">decay</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">exponent</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">exponent</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">exponent</span>);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LightShadow</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">camera</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">bias</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">darkness</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">mapSize</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">512</span>,<span class="pl-c1">512</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">LightShadow</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.LightShadow,copy:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">camera</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">camera</span>.<span class="pl-en">clone</span>();<span class="pl-c1">this</span>.<span class="pl-smi">bias</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bias</span>;<span class="pl-c1">this</span>.<span class="pl-smi">darkness</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">darkness</span>;<span class="pl-c1">this</span>.<span class="pl-smi">mapSize</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">mapSize</span>)},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">AmbientLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>AmbientLight<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AmbientLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">AmbientLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AmbientLight</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">DirectionalLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>DirectionalLight<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>;<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LightShadow</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.OrthographicCamera</span>(<span class="pl-k">-</span><span class="pl-c1">500</span>,<span class="pl-c1">500</span>,<span class="pl-c1">500</span>,<span class="pl-k">-</span><span class="pl-c1">500</span>,<span class="pl-c1">50</span>,<span class="pl-c1">5E3</span>))};<span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">intensity</span>;<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">target</span>.<span class="pl-en">clone</span>();<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shadow</span>.<span class="pl-en">clone</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">HemisphereLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>HemisphereLight<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-smi">groundColor</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">groundColor</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">groundColor</span>);<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">intensity</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PointLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PointLight<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">decay</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LightShadow</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">500</span>))};<span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span>;</td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">intensity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">distance</span>;<span class="pl-c1">this</span>.<span class="pl-smi">decay</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">decay</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shadow</span>.<span class="pl-en">clone</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpotLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SpotLight<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>;<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">angle</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">exponent</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">10</span>;<span class="pl-c1">this</span>.<span class="pl-smi">decay</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LightShadow</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">50</span>,<span class="pl-c1">1</span>,<span class="pl-c1">50</span>,<span class="pl-c1">5E3</span>))};<span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span>;</td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">intensity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">distance</span>;<span class="pl-c1">this</span>.<span class="pl-smi">angle</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">angle</span>;<span class="pl-c1">this</span>.<span class="pl-smi">exponent</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">exponent</span>;<span class="pl-c1">this</span>.<span class="pl-smi">decay</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">decay</span>;<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">target</span>.<span class="pl-en">clone</span>();<span class="pl-c1">this</span>.<span class="pl-smi">shadow</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shadow</span>.<span class="pl-en">clone</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Cache</span><span class="pl-k">=</span>{enabled<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,files<span class="pl-k">:</span>{},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">enabled</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">files</span>[a]<span class="pl-k">=</span>b)},<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">enabled</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">files</span>[a]},<span class="pl-en">remove</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">delete</span> <span class="pl-c1">this</span>.<span class="pl-smi">files</span>[a]},<span class="pl-en">clear</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">files</span><span class="pl-k">=</span>{}}};</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Loader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">onLoadStart</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadProgress</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadComplete</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}};</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Loader,crossOrigin:void 0,extractUrlBase:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>./<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">pop</span>();<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>},<span class="pl-en">initMaterials</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span>[],e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span>e)d[e]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">createMaterial</span>(a[e],b,c);<span class="pl-k">return</span> d},<span class="pl-en">createMaterial</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">f</span>,<span class="pl-smi">l</span>){a<span class="pl-k">=</span>e<span class="pl-k">+</span>a;<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-smi">Handlers</span>.<span class="pl-c1">get</span>(a);<span class="pl-c1">null</span><span class="pl-k">!==</span>k<span class="pl-k">?</span>a<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">load</span>(a)<span class="pl-k">:</span>(<span class="pl-smi">b</span>.<span class="pl-en">setCrossOrigin</span>(g),a<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">load</span>(a));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">repeat</span>.<span class="pl-en">fromArray</span>(c),<span class="pl-c1">1</span><span class="pl-k">!==</span>c[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>),<span class="pl-c1">1</span><span class="pl-k">!==</span>c[<span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">offset</span>.<span class="pl-en">fromArray</span>(d);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>repeat<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>f[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>),<span class="pl-s"><span class="pl-pds">&quot;</span>mirror<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>f[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span>),<span class="pl-s"><span class="pl-pds">&quot;</span>repeat<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>f[<span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>),<span class="pl-s"><span class="pl-pds">&quot;</span>mirror<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>f[<span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span>l);c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();h[c]<span class="pl-k">=</span>a;<span class="pl-k">return</span> c}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TextureLoader</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MaterialLoader</span>);</td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> h<span class="pl-k">=</span>{},l<span class="pl-k">=</span>{uuid<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>(),type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshLambertMaterial<span class="pl-pds">&quot;</span></span>},k;<span class="pl-k">for</span>(k <span class="pl-k">in</span> d){<span class="pl-k">var</span> m<span class="pl-k">=</span>d[k];<span class="pl-k">switch</span>(k){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>DbgColor<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-c1">color</span><span class="pl-k">=</span>m;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>DbgIndex<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>opticalDensity<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>illumination<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>DbgName<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-c1">name</span><span class="pl-k">=</span>m;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>blending<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>[m];<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>colorDiffuse<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">fromArray</span>(m).<span class="pl-en">getHex</span>();<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>colorSpecular<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">specular</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">fromArray</span>(m).<span class="pl-en">getHex</span>();<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>colorEmissive<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">emissive</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">fromArray</span>(m).<span class="pl-en">getHex</span>();<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>specularCoef<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span>m;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>shading<span class="pl-pds">&quot;</span></span>:<span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">m</span>.<span class="pl-c1">toLowerCase</span>()<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshBasicMaterial<span class="pl-pds">&quot;</span></span>);<span class="pl-s"><span class="pl-pds">&quot;</span>phong<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">m</span>.<span class="pl-c1">toLowerCase</span>()<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapDiffuse<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-en">f</span>(m,<span class="pl-smi">d</span>.<span class="pl-smi">mapDiffuseRepeat</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapDiffuseOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapDiffuseWrap</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapDiffuseAnisotropy</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapDiffuseRepeat<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapDiffuseOffset<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapDiffuseWrap<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapDiffuseAnisotropy<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapLight<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-en">f</span>(m,<span class="pl-smi">d</span>.<span class="pl-smi">mapLightRepeat</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapLightOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapLightWrap</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapLightAnisotropy</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapLightRepeat<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapLightOffset<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapLightWrap<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapLightAnisotropy<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line"><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAO<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">aoMap</span><span class="pl-k">=</span><span class="pl-en">f</span>(m,<span class="pl-smi">d</span>.<span class="pl-smi">mapAORepeat</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapAOOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapAOWrap</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapAOAnisotropy</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAORepeat<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAOOffset<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAOWrap<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAOAnisotropy<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapBump<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">=</span><span class="pl-en">f</span>(m,<span class="pl-smi">d</span>.<span class="pl-smi">mapBumpRepeat</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapBumpOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapBumpWrap</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapBumpAnisotropy</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapBumpScale<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span>m;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapBumpRepeat<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapBumpOffset<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapBumpWrap<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapBumpAnisotropy<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapNormal<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">normalMap</span><span class="pl-k">=</span><span class="pl-en">f</span>(m,<span class="pl-smi">d</span>.<span class="pl-smi">mapNormalRepeat</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapNormalOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapNormalWrap</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapNormalAnisotropy</span>);</td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapNormalFactor<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">normalScale</span><span class="pl-k">=</span>[m,m];<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapNormalRepeat<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapNormalOffset<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapNormalWrap<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapNormalAnisotropy<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapSpecular<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-en">f</span>(m,<span class="pl-smi">d</span>.<span class="pl-smi">mapSpecularRepeat</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapSpecularOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapSpecularWrap</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapSpecularAnisotropy</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapSpecularRepeat<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapSpecularOffset<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapSpecularWrap<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapSpecularAnisotropy<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAlpha<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-en">f</span>(m,<span class="pl-smi">d</span>.<span class="pl-smi">mapAlphaRepeat</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapAlphaOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapAlphaWrap</span>,<span class="pl-smi">d</span>.<span class="pl-smi">mapAlphaAnisotropy</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAlphaRepeat<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAlphaOffset<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAlphaWrap<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>mapAlphaAnisotropy<span class="pl-pds">&quot;</span></span>:<span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line"><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>flipSided<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>doubleSided<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">l</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>transparency<span class="pl-pds">&quot;</span></span>:<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Loader: transparency has been renamed to opacity<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">l</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span>m;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>opacity<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>transparent<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>depthTest<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>depthWrite<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>transparent<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>visible<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>wireframe<span class="pl-pds">&quot;</span></span>:l[k]<span class="pl-k">=</span>m;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>vertexColors<span class="pl-pds">&quot;</span></span>:<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>m<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>);<span class="pl-s"><span class="pl-pds">&quot;</span>face<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>m<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span>);<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Loader.createMaterial: Unsupported<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line">k,m)}}<span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-smi">l</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">delete</span> <span class="pl-smi">l</span>.<span class="pl-smi">specular</span>;<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-smi">l</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">c</span>.<span class="pl-en">setTextures</span>(h);<span class="pl-k">return</span> <span class="pl-smi">c</span>.<span class="pl-c1">parse</span>(l)}}()};<span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-smi">Handlers</span><span class="pl-k">=</span>{handlers<span class="pl-k">:</span>[],<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">handlers</span>.<span class="pl-c1">push</span>(a,b)},<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">handlers</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">+=</span><span class="pl-c1">2</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b[c<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-k">if</span>(b[c].<span class="pl-c1">test</span>(a))<span class="pl-k">return</span> e}<span class="pl-k">return</span> <span class="pl-c1">null</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">XHRLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>};</td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">XHRLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.XHRLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Cache</span>.<span class="pl-c1">get</span>(a);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g)<span class="pl-k">return</span> b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">setTimeout</span>(<span class="pl-k">function</span>(){<span class="pl-en">b</span>(g)},<span class="pl-c1">0</span>),g;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;<span class="pl-smi">f</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">f</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">c</span>){c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">target</span>.<span class="pl-smi">response</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Cache</span>.<span class="pl-c1">add</span>(a,c);b<span class="pl-k">&amp;&amp;</span><span class="pl-en">b</span>(c);<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemEnd</span>(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>progress<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">c</span>(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">f</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">b</span>){d<span class="pl-k">&amp;&amp;</span><span class="pl-en">d</span>(b);<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemError</span>(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">responseType</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">responseType</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">responseType</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">withCredentials</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">withCredentials</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">withCredentials</span>);<span class="pl-smi">f</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemStart</span>(a);<span class="pl-k">return</span> f},<span class="pl-en">setResponseType</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">responseType</span><span class="pl-k">=</span>a},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a},<span class="pl-en">setWithCredentials</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">withCredentials</span><span class="pl-k">=</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-en">ImageLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>};</td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.ImageLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Cache</span>.<span class="pl-c1">get</span>(a);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g)<span class="pl-k">return</span> <span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemStart</span>(a),b<span class="pl-k">?</span><span class="pl-c1">setTimeout</span>(<span class="pl-k">function</span>(){<span class="pl-en">b</span>(g);<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemEnd</span>(a)},<span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemEnd</span>(a),g;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>img<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">f</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Cache</span>.<span class="pl-c1">add</span>(a,<span class="pl-c1">this</span>);b<span class="pl-k">&amp;&amp;</span><span class="pl-en">b</span>(<span class="pl-c1">this</span>);<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemEnd</span>(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>progress<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">c</span>(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">f</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">b</span>){d<span class="pl-k">&amp;&amp;</span><span class="pl-en">d</span>(b);<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemError</span>(a)},</td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemStart</span>(a);<span class="pl-smi">f</span>.<span class="pl-smi">src</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> f},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-en">JSONLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-s"><span class="pl-pds">&quot;</span>boolean<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> a<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: showStatus parameter has been removed from constructor.<span class="pl-pds">&quot;</span></span>),a<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>;<span class="pl-c1">this</span>.<span class="pl-smi">withCredentials</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">JSONLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.JSONLoader,get <span class="pl-en">statusDomElement</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">_statusDomElement</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_statusDomElement</span><span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>div<span class="pl-pds">&quot;</span></span>));<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: .statusDomElement has been removed.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_statusDomElement</span>},<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> <span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractUrlBase</span>(a);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-c1">this</span>.<span class="pl-smi">manager</span>);<span class="pl-smi">c</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">c</span>.<span class="pl-en">setWithCredentials</span>(<span class="pl-c1">this</span>.<span class="pl-smi">withCredentials</span>);</td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">c</span>){c<span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(c);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">metadata</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>object<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-c1">type</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> should be loaded with THREE.ObjectLoader instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span>}<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>scene<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-c1">type</span>){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> should be loaded with THREE.SceneLoader instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span>}}c<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">parse</span>(c,g);<span class="pl-en">b</span>(<span class="pl-smi">c</span>.<span class="pl-smi">geometry</span>,<span class="pl-smi">c</span>.<span class="pl-smi">materials</span>)})},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a},<span class="pl-en">setTexturePath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">=</span>a},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">scale</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-smi">scale</span><span class="pl-k">:</span><span class="pl-c1">1</span>;(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> d,f,h,l,k,m,p,n,q,s,t,v,u,w<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>;m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>;<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normals</span>,x<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">colors</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>){<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[d].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">B</span><span class="pl-k">++</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">B</span>;d<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[d]<span class="pl-k">=</span>[]}l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>k;)d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>m[l<span class="pl-k">++</span>]<span class="pl-k">*</span>b,<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>m[l<span class="pl-k">++</span>]<span class="pl-k">*</span>b,<span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>m[l<span class="pl-k">++</span>]<span class="pl-k">*</span>b,<span class="pl-smi">c</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(d);l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>k;)<span class="pl-k">if</span>(b<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],q<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">8</span>,p<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">16</span>,s<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">32</span>,m<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">64</span>,b<span class="pl-k">&amp;=</span><span class="pl-c1">128</span>,q){q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>;<span class="pl-smi">q</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>w[l];<span class="pl-smi">q</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>w[l<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-smi">q</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>w[l<span class="pl-k">+</span><span class="pl-c1">3</span>];t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>;<span class="pl-smi">t</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>w[l<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-smi">t</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>w[l<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-smi">t</span>.<span class="pl-smi">c</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line">w[l<span class="pl-k">+</span><span class="pl-c1">3</span>];l<span class="pl-k">+=</span><span class="pl-c1">4</span>;h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>h,<span class="pl-smi">t</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>h);h<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(d)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">B</span>;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[d],<span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[d][h]<span class="pl-k">=</span>[],<span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[d][h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>f;f<span class="pl-k">++</span>)n<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],u<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>n],n<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>],u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(u,n),<span class="pl-c1">2</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[d][h].<span class="pl-c1">push</span>(u),<span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[d][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-c1">push</span>(u);p<span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>w[l<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">set</span>(<span class="pl-c1">D</span>[p<span class="pl-k">++</span>],<span class="pl-c1">D</span>[p<span class="pl-k">++</span>],<span class="pl-c1">D</span>[p]),<span class="pl-smi">t</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-smi">q</span>.<span class="pl-smi">normal</span>));<span class="pl-k">if</span>(s)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>w[l<span class="pl-k">++</span>],s<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">D</span>[p<span class="pl-k">++</span>],<span class="pl-c1">D</span>[p<span class="pl-k">++</span>],<span class="pl-c1">D</span>[p]),<span class="pl-c1">2</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">q</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(s),<span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">t</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(s);</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],m<span class="pl-k">=</span>x[m],<span class="pl-smi">q</span>.<span class="pl-c1">color</span>.<span class="pl-en">setHex</span>(m),<span class="pl-smi">t</span>.<span class="pl-c1">color</span>.<span class="pl-en">setHex</span>(m));<span class="pl-k">if</span>(b)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)m<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],m<span class="pl-k">=</span>x[m],<span class="pl-c1">2</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">q</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(m)),<span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">t</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(m));<span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(q);<span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(t)}<span class="pl-k">else</span>{q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>;<span class="pl-smi">q</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>w[l<span class="pl-k">++</span>];<span class="pl-smi">q</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>w[l<span class="pl-k">++</span>];<span class="pl-smi">q</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>w[l<span class="pl-k">++</span>];h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>h);h<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(d)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">B</span>;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[d],<span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[d][h]<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>f;f<span class="pl-k">++</span>)n<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],u<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>n],n<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>],u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(u,n),<span class="pl-smi">c</span>.<span class="pl-smi">faceVertexUvs</span>[d][h].<span class="pl-c1">push</span>(u);p<span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>w[l<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">set</span>(<span class="pl-c1">D</span>[p<span class="pl-k">++</span>],</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>[p<span class="pl-k">++</span>],<span class="pl-c1">D</span>[p]));<span class="pl-k">if</span>(s)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>w[l<span class="pl-k">++</span>],s<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">D</span>[p<span class="pl-k">++</span>],<span class="pl-c1">D</span>[p<span class="pl-k">++</span>],<span class="pl-c1">D</span>[p]),<span class="pl-smi">q</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(s);m<span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-c1">color</span>.<span class="pl-en">setHex</span>(x[m]));<span class="pl-k">if</span>(b)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)m<span class="pl-k">=</span>w[l<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(x[m]));<span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(q)}})(d);(<span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">influencesPerVertex</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">influencesPerVertex</span><span class="pl-k">:</span><span class="pl-c1">2</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">+=</span>b)<span class="pl-smi">c</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[d],<span class="pl-c1">1</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[d<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">2</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[d<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">3</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[d<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>));<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">+=</span>b)<span class="pl-smi">c</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[d],<span class="pl-c1">1</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[d<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">2</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[d<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">3</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[d<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>));<span class="pl-smi">c</span>.<span class="pl-smi">bones</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bones</span>;<span class="pl-smi">c</span>.<span class="pl-smi">bones</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>When skinning, number of vertices (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>), skinIndices (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>), and skinWeights (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>) should match.<span class="pl-pds">&quot;</span></span>)})();(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>){<span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span>[d]<span class="pl-k">=</span>{};<span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span>[d].<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[d].<span class="pl-c1">name</span>;<span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span>[d].<span class="pl-smi">vertices</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span>[d].<span class="pl-smi">vertices</span>,l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[d].<span class="pl-smi">vertices</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">+=</span><span class="pl-c1">3</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>l[k]<span class="pl-k">*</span>b;<span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>l[k<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">*</span>b;<span class="pl-smi">p</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>l[k<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">*</span>b;<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(p)}}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>.<span class="pl-c1">length</span>)<span class="pl-k">for</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.JSONLoader: &quot;morphColors&quot; no longer supported. Using them as face colors.<span class="pl-pds">&#39;</span></span>),b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">faces</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>[<span class="pl-c1">0</span>].<span class="pl-smi">colors</span>,</td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>)b[d].<span class="pl-c1">color</span>.<span class="pl-en">fromArray</span>(h,<span class="pl-c1">3</span><span class="pl-k">*</span>d)})(d);(<span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span>[],d<span class="pl-k">=</span>[];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">animation</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">animation</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">animations</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">animations</span>.<span class="pl-c1">length</span><span class="pl-k">?</span>d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">concat</span>(<span class="pl-smi">a</span>.<span class="pl-smi">animations</span>)<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">animations</span>));<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">parseAnimation</span>(d[f],<span class="pl-smi">c</span>.<span class="pl-smi">bones</span>);h<span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">push</span>(h)}<span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-en">CreateClipsFromMorphTargetSequences</span>(<span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span>,<span class="pl-c1">10</span>),b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">concat</span>(d));<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">animations</span><span class="pl-k">=</span>b)})();<span class="pl-smi">c</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-smi">c</span>.<span class="pl-en">computeBoundingSphere</span>();</td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span>{geometry<span class="pl-k">:</span>c};d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">initMaterials</span>(<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>,b,<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-k">return</span>{geometry<span class="pl-k">:</span>c,materials<span class="pl-k">:</span>d}}};</td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LoadingManager</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>,e<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">onStart</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">onLoad</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">onProgress</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">onError</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-en">itemStart</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){f<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">onStart</span>)<span class="pl-smi">d</span>.<span class="pl-en">onStart</span>(a,g,f);e<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">itemEnd</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){g<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">onProgress</span>)<span class="pl-smi">d</span>.<span class="pl-en">onProgress</span>(a,g,f);<span class="pl-k">if</span>(g<span class="pl-k">===</span>f<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">onLoad</span>))<span class="pl-smi">d</span>.<span class="pl-c1">onLoad</span>()};<span class="pl-c1">this</span>.<span class="pl-en">itemError</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">onError</span>)<span class="pl-smi">d</span>.<span class="pl-c1">onError</span>(a)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LoadingManager</span>;</td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BufferGeometryLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>};</td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometryLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.BufferGeometryLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>);<span class="pl-smi">g</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">g</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">b</span>(<span class="pl-smi">e</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(a)))},c,d)},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-c1">index</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">self</span>[<span class="pl-smi">c</span>.<span class="pl-c1">type</span>](<span class="pl-smi">c</span>.<span class="pl-smi">array</span>),<span class="pl-smi">b</span>.<span class="pl-en">setIndex</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">1</span>)));<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-c1">attributes</span>,e;<span class="pl-k">for</span>(e <span class="pl-k">in</span> d){<span class="pl-k">var</span> g<span class="pl-k">=</span>d[e],c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">self</span>[<span class="pl-smi">g</span>.<span class="pl-c1">type</span>](<span class="pl-smi">g</span>.<span class="pl-smi">array</span>);</td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">addAttribute</span>(e,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-smi">g</span>.<span class="pl-smi">itemSize</span>))}e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-smi">groups</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-smi">drawcalls</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-smi">offsets</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;c<span class="pl-k">!==</span>d;<span class="pl-k">++</span>c)g<span class="pl-k">=</span>e[c],<span class="pl-smi">b</span>.<span class="pl-en">addGroup</span>(<span class="pl-smi">g</span>.<span class="pl-c1">start</span>,<span class="pl-smi">g</span>.<span class="pl-smi">count</span>);a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span>.<span class="pl-smi">boundingSphere</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">center</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">center</span>),<span class="pl-smi">b</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(e,<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>));<span class="pl-k">return</span> b}};<span class="pl-c1">THREE</span>.<span class="pl-en">MaterialLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>;<span class="pl-c1">this</span>.<span class="pl-smi">textures</span><span class="pl-k">=</span>{}};</td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.MaterialLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>);<span class="pl-smi">g</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">g</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">b</span>(<span class="pl-smi">e</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(a)))},c,d)},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a},<span class="pl-en">setTextures</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">textures</span><span class="pl-k">=</span>a},<span class="pl-en">getTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">textures</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b[a]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.MaterialLoader: Undefined texture<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">return</span> b[a]},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[<span class="pl-smi">a</span>.<span class="pl-c1">type</span>];<span class="pl-smi">b</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uuid</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">name</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">color</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">emissive</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">emissive</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">a</span>.<span class="pl-smi">emissive</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">specular</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">specular</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">a</span>.<span class="pl-smi">specular</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">shininess</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shininess</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">shading</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shading</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">blending</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">b</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blending</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">side</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">side</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">opacity</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">transparent</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">transparent</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaTest</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">depthTest</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">depthTest</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthTest</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthWrite</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">size</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">size</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">sizeAttenuation</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">map</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">alphaMap</span>),<span class="pl-smi">b</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">bumpMap</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bumpScale</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">normalMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">normalMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normalMap</span>));<span class="pl-smi">a</span>.<span class="pl-smi">normalScale</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">normalScale</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normalScale</span>,<span class="pl-smi">a</span>.<span class="pl-smi">normalScale</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">displacementMap</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementScale</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">b</span>.<span class="pl-smi">displacementScale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementScale</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementBias</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">displacementBias</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementBias</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">envMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">envMap</span>),<span class="pl-smi">b</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>);<span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">lightMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">lightMap</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">lightMapIntensity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lightMapIntensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">lightMapIntensity</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">aoMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">aoMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">aoMap</span>));</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">aoMapIntensity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">aoMapIntensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">aoMapIntensity</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-c1">parse</span>(<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>[c]));<span class="pl-k">return</span> b}};<span class="pl-c1">THREE</span>.<span class="pl-en">ObjectLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>;<span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ObjectLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.ObjectLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-c1">1</span>));<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-smi">e</span>.<span class="pl-smi">manager</span>);<span class="pl-smi">g</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">g</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">e</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(a),b)},c,d)},<span class="pl-en">setTexturePath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span><span class="pl-k">=</span>a},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">parseGeometries</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometries</span>),d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">parseImages</span>(<span class="pl-smi">a</span>.<span class="pl-c1">images</span>,<span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">b</span>(e)}),</td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">parseTextures</span>(<span class="pl-smi">a</span>.<span class="pl-smi">textures</span>,d),d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">parseMaterials</span>(<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>,d),e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">parseObject</span>(<span class="pl-smi">a</span>.<span class="pl-c1">object</span>,c,d);<span class="pl-smi">a</span>.<span class="pl-smi">animations</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">animations</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">parseAnimations</span>(<span class="pl-smi">a</span>.<span class="pl-smi">animations</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">images</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">images</span>.<span class="pl-c1">length</span><span class="pl-k">||</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-en">b</span>(e);<span class="pl-k">return</span> e},<span class="pl-en">parseGeometries</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.JSONLoader</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometryLoader</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f,h<span class="pl-k">=</span>a[e];<span class="pl-k">switch</span>(<span class="pl-smi">h</span>.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>PlaneGeometry<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>PlaneBufferGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[<span class="pl-smi">h</span>.<span class="pl-c1">type</span>](<span class="pl-smi">h</span>.<span class="pl-c1">width</span>,<span class="pl-smi">h</span>.<span class="pl-c1">height</span>,<span class="pl-smi">h</span>.<span class="pl-smi">widthSegments</span>,</td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">heightSegments</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>BoxGeometry<span class="pl-pds">&quot;</span></span>:<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CubeGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BoxGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-c1">width</span>,<span class="pl-smi">h</span>.<span class="pl-c1">height</span>,<span class="pl-smi">h</span>.<span class="pl-smi">depth</span>,<span class="pl-smi">h</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">depthSegments</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CircleBufferGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CircleBufferGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">segments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaLength</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CircleGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CircleGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">segments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaLength</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CylinderGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radiusTop</span>,<span class="pl-smi">h</span>.<span class="pl-smi">radiusBottom</span>,<span class="pl-smi">h</span>.<span class="pl-c1">height</span>,<span class="pl-smi">h</span>.<span class="pl-smi">radialSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">heightSegments</span>,</td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">openEnded</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaLength</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>SphereGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">phiStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">phiLength</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaLength</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>SphereBufferGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereBufferGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">phiStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">phiLength</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaLength</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>DodecahedronGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DodecahedronGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">detail</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>IcosahedronGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.IcosahedronGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,</td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">detail</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>OctahedronGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OctahedronGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">detail</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TetrahedronGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TetrahedronGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">detail</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>RingGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RingGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">innerRadius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">outerRadius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">phiSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">h</span>.<span class="pl-smi">thetaLength</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TorusGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TorusGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">tube</span>,<span class="pl-smi">h</span>.<span class="pl-smi">radialSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">tubularSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">arc</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TorusKnotGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TorusKnotGeometry</span>(<span class="pl-smi">h</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">h</span>.<span class="pl-smi">tube</span>,</td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">radialSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">tubularSegments</span>,<span class="pl-smi">h</span>.<span class="pl-smi">p</span>,<span class="pl-smi">h</span>.<span class="pl-smi">q</span>,<span class="pl-smi">h</span>.<span class="pl-smi">heightScale</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">parse</span>(h);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Geometry<span class="pl-pds">&quot;</span></span>:f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">parse</span>(<span class="pl-smi">h</span>.<span class="pl-c1">data</span>,<span class="pl-c1">this</span>.<span class="pl-smi">texturePath</span>).<span class="pl-smi">geometry</span>;<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.ObjectLoader: Unsupported geometry type &quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>);<span class="pl-k">continue</span>}<span class="pl-smi">f</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">uuid</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">h</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">name</span>);b[<span class="pl-smi">h</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">=</span>f}<span class="pl-k">return</span> b},<span class="pl-en">parseMaterials</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MaterialLoader</span>;<span class="pl-smi">d</span>.<span class="pl-en">setTextures</span>(b);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">parse</span>(a[e]);c[<span class="pl-smi">f</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">=</span>f}}<span class="pl-k">return</span> c},</td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line"><span class="pl-en">parseAnimations</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationClip</span>.<span class="pl-c1">parse</span>(a[c]);<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(d)}<span class="pl-k">return</span> b},<span class="pl-en">parseImages</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-smi">d</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemStart</span>(a);<span class="pl-k">return</span> <span class="pl-smi">f</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(){<span class="pl-smi">d</span>.<span class="pl-smi">manager</span>.<span class="pl-en">itemEnd</span>(a)})}<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>,e<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LoadingManager</span>(b),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>(g);<span class="pl-smi">f</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>h;g<span class="pl-k">++</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>a[g],k<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-cce">\/\/</span>)<span class="pl-k">|</span>(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>:(<span class="pl-cce">\/\/</span>)<span class="pl-k">?</span>)<span class="pl-pds">/</span>i</span>.<span class="pl-c1">test</span>(<span class="pl-smi">l</span>.<span class="pl-smi">url</span>)<span class="pl-k">?</span><span class="pl-smi">l</span>.<span class="pl-smi">url</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">texturePath</span><span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">url</span>;e[<span class="pl-smi">l</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">=</span><span class="pl-en">c</span>(k)}}<span class="pl-k">return</span> e},</td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line"><span class="pl-en">parseTextures</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> a)<span class="pl-k">return</span> a;<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ObjectLoader.parseTexture: Constant should be in numeric form.<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">return</span> <span class="pl-c1">THREE</span>[a]}<span class="pl-k">var</span> d<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>a[e];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-smi">image</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.ObjectLoader: No &quot;image&quot; specified for<span class="pl-pds">&#39;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">uuid</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b[<span class="pl-smi">f</span>.<span class="pl-smi">image</span>]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ObjectLoader: Undefined image<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">image</span>);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(b[<span class="pl-smi">f</span>.<span class="pl-smi">image</span>]);<span class="pl-smi">h</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">h</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">uuid</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-c1">name</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-c1">name</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">mapping</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-smi">f</span>.<span class="pl-smi">mapping</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">offset</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">offset</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">f</span>.<span class="pl-smi">offset</span>[<span class="pl-c1">0</span>],<span class="pl-smi">f</span>.<span class="pl-smi">offset</span>[<span class="pl-c1">1</span>]));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">repeat</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">repeat</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">f</span>.<span class="pl-smi">repeat</span>[<span class="pl-c1">0</span>],<span class="pl-smi">f</span>.<span class="pl-smi">repeat</span>[<span class="pl-c1">1</span>]));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">minFilter</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-smi">f</span>.<span class="pl-smi">minFilter</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">magFilter</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-smi">f</span>.<span class="pl-smi">magFilter</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">anisotropy</span>);<span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(<span class="pl-smi">f</span>.<span class="pl-smi">wrap</span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-smi">f</span>.<span class="pl-smi">wrap</span>[<span class="pl-c1">0</span>]),<span class="pl-smi">h</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-smi">f</span>.<span class="pl-smi">wrap</span>[<span class="pl-c1">1</span>]));d[<span class="pl-smi">f</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">=</span>h}<span class="pl-k">return</span> d},<span class="pl-en">parseObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,</td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c[a]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ObjectLoader: Undefined geometry<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">return</span> c[a]}function g(a){if(void 0!==a)return void 0===d[a]&amp;&amp;console.warn(&quot;THREE.ObjectLoader: Undefined material&quot;,a),d[a]}var f;switch(b.type){case &quot;Scene&quot;:f=new THREE.Scene;break;case &quot;PerspectiveCamera&quot;:f=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);break;case &quot;OrthographicCamera&quot;:f=new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case &quot;AmbientLight&quot;:f=new THREE.AmbientLight(b.color);</td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>DirectionalLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DirectionalLight</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span>,<span class="pl-smi">b</span>.<span class="pl-smi">intensity</span>);<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>PointLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PointLight</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span>,<span class="pl-smi">b</span>.<span class="pl-smi">intensity</span>,<span class="pl-smi">b</span>.<span class="pl-smi">distance</span>,<span class="pl-smi">b</span>.<span class="pl-smi">decay</span>);<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>SpotLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SpotLight</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span>,<span class="pl-smi">b</span>.<span class="pl-smi">intensity</span>,<span class="pl-smi">b</span>.<span class="pl-smi">distance</span>,<span class="pl-smi">b</span>.<span class="pl-smi">angle</span>,<span class="pl-smi">b</span>.<span class="pl-smi">exponent</span>,<span class="pl-smi">b</span>.<span class="pl-smi">decay</span>);<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>HemisphereLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.HemisphereLight</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span>,<span class="pl-smi">b</span>.<span class="pl-smi">groundColor</span>,<span class="pl-smi">b</span>.<span class="pl-smi">intensity</span>);<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>Mesh<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(<span class="pl-en">e</span>(<span class="pl-smi">b</span>.<span class="pl-smi">geometry</span>),<span class="pl-en">g</span>(<span class="pl-smi">b</span>.<span class="pl-smi">material</span>));<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>LOD<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LOD</span>;<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>Line<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(<span class="pl-en">e</span>(<span class="pl-smi">b</span>.<span class="pl-smi">geometry</span>),</td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line"><span class="pl-en">g</span>(<span class="pl-smi">b</span>.<span class="pl-smi">material</span>),<span class="pl-smi">b</span>.<span class="pl-smi">mode</span>);<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>PointCloud<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>case <span class="pl-s"><span class="pl-pds">&quot;</span>Points<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Points</span>(<span class="pl-en">e</span>(<span class="pl-smi">b</span>.<span class="pl-smi">geometry</span>),<span class="pl-en">g</span>(<span class="pl-smi">b</span>.<span class="pl-smi">material</span>));<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>Sprite<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sprite</span>(<span class="pl-en">g</span>(<span class="pl-smi">b</span>.<span class="pl-smi">material</span>));<span class="pl-k">break</span>;case <span class="pl-s"><span class="pl-pds">&quot;</span>Group<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Group</span>;<span class="pl-k">break</span>;default<span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>}<span class="pl-smi">f</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">uuid</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">name</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">matrix</span><span class="pl-k">?</span>(<span class="pl-smi">a</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrix</span>),<span class="pl-smi">a</span>.<span class="pl-en">decompose</span>(<span class="pl-smi">f</span>.<span class="pl-smi">position</span>,<span class="pl-smi">f</span>.<span class="pl-smi">quaternion</span>,<span class="pl-smi">f</span>.<span class="pl-smi">scale</span>))<span class="pl-k">:</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">position</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">position</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">rotation</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">rotation</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">rotation</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">scale</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">scale</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">scale</span>));</td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">castShadow</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">receiveShadow</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">visible</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">userData</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">userData</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">children</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> h <span class="pl-k">in</span> <span class="pl-smi">b</span>.<span class="pl-smi">children</span>)<span class="pl-smi">f</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-en">parseObject</span>(<span class="pl-smi">b</span>.<span class="pl-smi">children</span>[h],c,d));<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>LOD<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">type</span>){b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">levels</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;l<span class="pl-k">++</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span>b[l];h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">getObjectByProperty</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uuid<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">k</span>.<span class="pl-c1">object</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-en">addLevel</span>(h,<span class="pl-smi">k</span>.<span class="pl-smi">distance</span>)}}<span class="pl-k">return</span> f}}()};</td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">TextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.TextureLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>(<span class="pl-c1">this</span>.<span class="pl-smi">manager</span>);<span class="pl-smi">g</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">g</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">e</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>a;<span class="pl-smi">e</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">b</span>(e)},c,d);<span class="pl-k">return</span> e},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-en">CubeTextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>};</td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CubeTextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.CubeTextureLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">c</span>){<span class="pl-smi">f</span>.<span class="pl-c1">load</span>(a[c],<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">g</span>.<span class="pl-c1">images</span>[c]<span class="pl-k">=</span>a;h<span class="pl-k">++</span>;<span class="pl-c1">6</span><span class="pl-k">===</span>h<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,b<span class="pl-k">&amp;&amp;</span><span class="pl-en">b</span>(g))},<span class="pl-k">void</span> <span class="pl-c1">0</span>,d)}<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CubeTexture</span>([]),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>;<span class="pl-smi">f</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span>c)<span class="pl-en">e</span>(c);<span class="pl-k">return</span> g},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DataTextureLoader</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-en">BinaryTextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_parser</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryTextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.BinaryTextureLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-c1">this</span>.<span class="pl-smi">manager</span>);<span class="pl-smi">f</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">f</span>.<span class="pl-en">setResponseType</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">f</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">_parser</span>(a))<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span><span class="pl-k">?</span><span class="pl-smi">g</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span><span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">g</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-smi">g</span>.<span class="pl-smi">image</span>.<span class="pl-c1">data</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">data</span>),<span class="pl-smi">g</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>,<span class="pl-smi">g</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>,</td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">magFilter</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">magFilter</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>,<span class="pl-smi">g</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span>,<span class="pl-smi">g</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">type</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>),<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmapCount</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>),<span class="pl-smi">g</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,b<span class="pl-k">&amp;&amp;</span><span class="pl-en">b</span>(g,a)},c,d);<span class="pl-k">return</span> g},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CompressedTextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">manager</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DefaultLoadingManager</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_parser</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.CompressedTextureLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>,g<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CompressedTexture</span>;<span class="pl-smi">f</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>g;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-c1">this</span>.<span class="pl-smi">manager</span>);<span class="pl-smi">h</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">h</span>.<span class="pl-en">setResponseType</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(a))<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-en">k</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-smi">h</span>.<span class="pl-c1">load</span>(a[k],<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">_parser</span>(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);g[k]<span class="pl-k">=</span>{width<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>,height<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>,format<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span>,mipmaps<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>};l<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-c1">6</span><span class="pl-k">===</span>l<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmapCount</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>),<span class="pl-smi">f</span>.<span class="pl-smi">format</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">format</span>,<span class="pl-smi">f</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,b<span class="pl-k">&amp;&amp;</span><span class="pl-en">b</span>(f))},c,d)},m<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>p;<span class="pl-k">++</span>m)<span class="pl-en">k</span>(m);<span class="pl-k">else</span> <span class="pl-smi">h</span>.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">_parser</span>(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">isCubemap</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmapCount</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c;d<span class="pl-k">++</span>){g[d]<span class="pl-k">=</span>{mipmaps<span class="pl-k">:</span>[]};<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmapCount</span>;h<span class="pl-k">++</span>)g[d].<span class="pl-smi">mipmaps</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>[d<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmapCount</span><span class="pl-k">+</span>h]),g[d].<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span>,g[d].<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>,g[d].<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>}<span class="pl-k">else</span> <span class="pl-smi">f</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">f</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-smi">f</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>;<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmapCount</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>);<span class="pl-smi">f</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span>;<span class="pl-smi">f</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;b<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line"><span class="pl-en">b</span>(f)},c,d);<span class="pl-k">return</span> f},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Material</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialIdCount</span><span class="pl-k">++</span>});<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Material<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span>;<span class="pl-c1">this</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendSrc</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaFactor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendDst</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcAlphaFactor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendEquation</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AddEquation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendEquationAlpha</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blendDstAlpha</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blendSrcAlpha</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">depthFunc</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LessEqualDepth</span>;<span class="pl-c1">this</span>.<span class="pl-smi">colorWrite</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">depthTest</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">precision</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">polygonOffset</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">overdraw</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetUnits</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetFactor</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_needsUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Material,get <span class="pl-en">needsUpdate</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_needsUpdate</span>},<span class="pl-k">set</span> <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">update</span>();<span class="pl-c1">this</span>.<span class="pl-smi">_needsUpdate</span><span class="pl-k">=</span>a},<span class="pl-en">setValues</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> a){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[b];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Material: &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39; parameter is undefined.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>[b];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">?</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39; is not a property of this material.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-c1">set</span>(c)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">&amp;&amp;</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-en">copy</span>(c)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>[b]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>overdraw<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span><span class="pl-c1">Number</span>(c)<span class="pl-k">:</span>c}}},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Material<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Material.toJSON<span class="pl-pds">&quot;</span></span>}};<span class="pl-smi">b</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>;<span class="pl-smi">b</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">getHex</span>());<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">emissive</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">emissive</span>.<span class="pl-en">getHex</span>());<span class="pl-c1">this</span>.<span class="pl-smi">specular</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">specular</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specular</span>.<span class="pl-en">getHex</span>());<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">shininess</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shininess</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">b</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>);<span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>);<span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>);<span class="pl-c1">this</span>.<span class="pl-smi">bumpMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bumpMap</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>,<span class="pl-smi">b</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bumpScale</span>);<span class="pl-c1">this</span>.<span class="pl-smi">normalMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">normalMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normalMap</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>,<span class="pl-smi">b</span>.<span class="pl-smi">normalScale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normalScale</span>);<span class="pl-c1">this</span>.<span class="pl-smi">displacementMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">displacementMap</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>,</td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">displacementScale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">displacementScale</span>,<span class="pl-smi">b</span>.<span class="pl-smi">displacementBias</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">displacementBias</span>);<span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>);<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">envMap</span>.<span class="pl-en">toJSON</span>(a).<span class="pl-smi">uuid</span>,<span class="pl-smi">b</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-c1">size</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">size</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">sizeAttenuation</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shading</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">blending</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">blending</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blending</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">side</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">side</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">side</span>);<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">opacity</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">transparent</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">transparent</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaTest</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span>);<span class="pl-k">return</span> b},</td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line"><span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">name</span>;<span class="pl-c1">this</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">side</span>;<span class="pl-c1">this</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">opacity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">transparent</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blending</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendSrc</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blendSrc</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendDst</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blendDst</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendEquation</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blendEquation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendSrcAlpha</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blendSrcAlpha</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendDstAlpha</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blendDstAlpha</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendEquationAlpha</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">blendEquationAlpha</span>;<span class="pl-c1">this</span>.<span class="pl-smi">depthFunc</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthFunc</span>;<span class="pl-c1">this</span>.<span class="pl-smi">depthTest</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthTest</span>;<span class="pl-c1">this</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthWrite</span>;<span class="pl-c1">this</span>.<span class="pl-smi">precision</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">precision</span>;<span class="pl-c1">this</span>.<span class="pl-smi">polygonOffset</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">polygonOffset</span>;<span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetFactor</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">polygonOffsetFactor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetUnits</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">polygonOffsetUnits</span>;<span class="pl-c1">this</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaTest</span>;<span class="pl-c1">this</span>.<span class="pl-smi">overdraw</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">overdraw</span>;<span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">visible</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>update<span class="pl-pds">&quot;</span></span>})},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})},<span class="pl-k">get</span> <span class="pl-en">wrapAround</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: .wrapAround has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-k">set</span> <span class="pl-en">wrapAround</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: .wrapAround has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-k">get</span> <span class="pl-en">wrapRGB</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: .wrapRGB has been removed.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">LineBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LineBasicMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">linewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">linecap</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">linewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">linewidth</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linecap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">linecap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linejoin</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">linejoin</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LineDashedMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LineDashedMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">scale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">linewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">dashSize</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">gapSize</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineDashedMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">LineDashedMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LineDashedMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LineDashedMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">linewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">linewidth</span>;<span class="pl-c1">this</span>.<span class="pl-smi">scale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">scale</span>;<span class="pl-c1">this</span>.<span class="pl-smi">dashSize</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dashSize</span>;<span class="pl-c1">this</span>.<span class="pl-smi">gapSize</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">gapSize</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshBasicMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">aoMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aoMapIntensity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">.98</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aoMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">aoMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aoMapIntensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">aoMapIntensity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">envMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">combine</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">refractionRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinecap</span>;</td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinejoin</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinning</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshLambertMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshLambertMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">.98</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">emissive</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span>;<span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">envMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">combine</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">refractionRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinecap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinejoin</span>;</td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinning</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshPhongMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">specular</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">1118481</span>);<span class="pl-c1">this</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span><span class="pl-c1">30</span>;<span class="pl-c1">this</span>.<span class="pl-smi">metal</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lightMapIntensity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aoMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aoMapIntensity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">emissiveMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalScale</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">displacementScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">displacementBias</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">.98</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">emissive</span>);<span class="pl-c1">this</span>.<span class="pl-smi">specular</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">specular</span>);<span class="pl-c1">this</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shininess</span>;<span class="pl-c1">this</span>.<span class="pl-smi">metal</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">metal</span>;<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">lightMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lightMapIntensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">lightMapIntensity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aoMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">aoMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aoMapIntensity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">aoMapIntensity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">emissiveMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">emissiveMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bumpMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bumpScale</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normalMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalScale</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normalScale</span>);</td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">displacementScale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementScale</span>;<span class="pl-c1">this</span>.<span class="pl-smi">displacementBias</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">displacementBias</span>;<span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">envMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">combine</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">refractionRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinecap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinejoin</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinning</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">MeshDepthMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshDepthMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">MeshNormalMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshNormalMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">MultiMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MultiMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span>a<span class="pl-k">:</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.MultiMaterial,toJSON:<span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.2</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>material<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>MaterialExporter<span class="pl-pds">&quot;</span></span>},uuid<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>,type<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>,materials<span class="pl-k">:</span>[]},b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">materials</span>[b].<span class="pl-en">toJSON</span>());<span class="pl-smi">a</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span>;<span class="pl-k">return</span> a},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">this.constructor</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">materials</span>[b].<span class="pl-en">clone</span>());<span class="pl-smi">a</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span>;<span class="pl-k">return</span> a}};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PointsMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PointsMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">PointsMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PointsMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PointsMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PointsMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span>;<span class="pl-c1">this</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">size</span>;<span class="pl-c1">this</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">sizeAttenuation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">PointCloudMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>(a)};</td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ParticleBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleSystemMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>(a)};</td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ShaderMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ShaderMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">defines</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lights</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">derivatives</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">defaultAttributeValues</span><span class="pl-k">=</span>{color<span class="pl-k">:</span>[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],uv<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],uv2<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>]};<span class="pl-c1">this</span>.<span class="pl-smi">index0AttributeName</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a))};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span>;<span class="pl-c1">this</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span>);<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>;<span class="pl-c1">this</span>.<span class="pl-smi">defines</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">defines</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lights</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">lights</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinning</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span>;<span class="pl-c1">this</span>.<span class="pl-smi">derivatives</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">derivatives</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">toJSON</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uniforms</span>;<span class="pl-smi">a</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexShader</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fragmentShader</span>;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">RawShaderMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>RawShaderMaterial<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">RawShaderMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">RawShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RawShaderMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">SpriteMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SpriteMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteMaterial</span>;</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">rotation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Texture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TextureIdCount</span><span class="pl-k">++</span>});<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-smi">sourceFile</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">DEFAULT_IMAGE</span>;<span class="pl-c1">this</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">DEFAULT_MAPPING</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span>;</td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">?</span>l<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">?</span>h<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span>;<span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">premultiplyAlpha</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">unpackAlignment</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">this</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">onUpdate</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">DEFAULT_IMAGE</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">DEFAULT_MAPPING</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UVMapping</span>;</td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Texture,set <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">version</span><span class="pl-k">++</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span>;<span class="pl-c1">this</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span>;<span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">magFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">anisotropy</span>;<span class="pl-c1">this</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">type</span>;<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">offset</span>);<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">repeat</span>);<span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span>;<span class="pl-c1">this</span>.<span class="pl-smi">premultiplyAlpha</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">premultiplyAlpha</span>;<span class="pl-c1">this</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">flipY</span>;<span class="pl-c1">this</span>.<span class="pl-smi">unpackAlignment</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">unpackAlignment</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">textures</span>[<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>])<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">textures</span>[<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>];<span class="pl-k">var</span> b<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Texture<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Texture.toJSON<span class="pl-pds">&quot;</span></span>},uuid<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>,name<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span>,mapping<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">mapping</span>,repeat<span class="pl-k">:</span>[<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">y</span>],offset<span class="pl-k">:</span>[<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>.<span class="pl-c1">y</span>],wrap<span class="pl-k">:</span>[<span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span>,<span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span>],minFilter<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span>,magFilter<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span>,anisotropy<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span>};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">image</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">image</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">uuid</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>());<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">images</span>[<span class="pl-smi">c</span>.<span class="pl-smi">uuid</span>]){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">images</span>,e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">uuid</span>,g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">uuid</span>,f;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">toDataURL</span><span class="pl-k">?</span>f<span class="pl-k">=</span>c<span class="pl-k">:</span>(f<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),<span class="pl-smi">f</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">width</span>,<span class="pl-smi">f</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">height</span>,<span class="pl-smi">f</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).<span class="pl-en">drawImage</span>(c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-smi">c</span>.<span class="pl-c1">width</span>,<span class="pl-smi">c</span>.<span class="pl-c1">height</span>));f<span class="pl-k">=</span><span class="pl-c1">2048</span><span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">width</span><span class="pl-k">||</span><span class="pl-c1">2048</span><span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">height</span><span class="pl-k">?</span><span class="pl-smi">f</span>.<span class="pl-c1">toDataURL</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>image/jpeg<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">.6</span>)<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-c1">toDataURL</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>image/png<span class="pl-pds">&quot;</span></span>);d[e]<span class="pl-k">=</span>{uuid<span class="pl-k">:</span>g,url<span class="pl-k">:</span>f}}<span class="pl-smi">b</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">uuid</span>}<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">textures</span>[<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span>]<span class="pl-k">=</span>b},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})},<span class="pl-en">transformUv</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">mapping</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">UVMapping</span>){<span class="pl-smi">a</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>);<span class="pl-smi">a</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>)<span class="pl-k">switch</span>(<span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span>){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>:<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>:<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span>:<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>)<span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>)<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>)}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>)<span class="pl-k">switch</span>(<span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span>){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>:<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>:<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span>:<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>)<span class="pl-k">%</span></td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>)<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>)}<span class="pl-c1">this</span>.<span class="pl-smi">flipY</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>)}}};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">TextureIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">CanvasTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b,c,d,e,g,f,h,l);<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CanvasTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CanvasTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CanvasTexture</span>;</td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubeTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){b<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CubeReflectionMapping</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b,c,d,e,g,f,h,l);<span class="pl-c1">this</span>.<span class="pl-c1">images</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CubeTexture</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-c1">images</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">images</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CompressedTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">k</span>,<span class="pl-smi">m</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-c1">null</span>,g,f,h,l,k,d,e,m);<span class="pl-c1">this</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>{width<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c};<span class="pl-c1">this</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>;</td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DataTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">k</span>,<span class="pl-smi">m</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-c1">null</span>,g,f,h,l,k,d,e,m);<span class="pl-c1">this</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>{data<span class="pl-k">:</span>a,width<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c};<span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">?</span>l<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">?</span>k<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span>;</td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">VideoTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-k">function</span> <span class="pl-en">k</span>(){<span class="pl-en">requestAnimationFrame</span>(k);<span class="pl-smi">a</span>.<span class="pl-c1">readyState</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">HAVE_ENOUGH_DATA</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">m</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)}<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b,c,d,e,g,f,h,l);<span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-en">k</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">VideoTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">VideoTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VideoTexture</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">Group</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Group<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Group</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Group</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Group</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">Points</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Points<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()})};<span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span>;</td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Ray</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">distanceSqToPoint</span>(a);<span class="pl-k">if</span>(f<span class="pl-k">&lt;</span>l){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">closestPointToPoint</span>(a);<span class="pl-smi">h</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-smi">g</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>.<span class="pl-en">distanceTo</span>(h);k<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-smi">near</span><span class="pl-k">||</span>k<span class="pl-k">&gt;</span><span class="pl-smi">c</span>.<span class="pl-smi">far</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>k,distanceToRay<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f),point<span class="pl-k">:</span><span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),index<span class="pl-k">:</span>e,face<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span>g})}}<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>,f<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">geometry</span>,h<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">params</span>.<span class="pl-smi">Points</span>.<span class="pl-smi">threshold</span>;<span class="pl-smi">a</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(<span class="pl-smi">c</span>.<span class="pl-smi">ray</span>).<span class="pl-en">applyMatrix4</span>(a);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">isIntersectionBox</span>(<span class="pl-smi">f</span>.<span class="pl-smi">boundingBox</span>)){<span class="pl-k">var</span> h<span class="pl-k">=</span>h<span class="pl-k">/</span>((<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">z</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>),l<span class="pl-k">=</span>h<span class="pl-k">*</span>h,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">index</span>,f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>;<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>k)<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">array</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>p;k<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span>m[k];<span class="pl-smi">h</span>.<span class="pl-en">fromArray</span>(f,<span class="pl-c1">3</span><span class="pl-k">*</span>n);<span class="pl-en">e</span>(h,n)}<span class="pl-k">else</span> <span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">++</span>)<span class="pl-smi">h</span>.<span class="pl-en">fromArray</span>(f,<span class="pl-c1">3</span><span class="pl-k">*</span>k),<span class="pl-en">e</span>(h,k)}<span class="pl-k">else</span> <span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">vertices</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">++</span>)<span class="pl-en">e</span>(h[k],k)}}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>)).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)};</td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PointCloud</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.PointCloud has been renamed to THREE.Points.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Points</span>(a,b)};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleSystem</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ParticleSystem has been renamed to THREE.Points.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Points</span>(a,b)};</td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Line</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span>c)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-k">new</span> <span class="pl-en">THREE.LineSegments</span>(a,b);<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Line<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()})};<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>;</td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Ray</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">linePrecision</span>,g<span class="pl-k">=</span>g<span class="pl-k">*</span>g,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>;<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-en">computeBoundingSphere</span>();<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-smi">f</span>.<span class="pl-smi">boundingSphere</span>);<span class="pl-smi">c</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">ray</span>.<span class="pl-en">isIntersectionSphere</span>(c)){<span class="pl-smi">a</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(<span class="pl-smi">d</span>.<span class="pl-smi">ray</span>).<span class="pl-en">applyMatrix4</span>(a);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span><span class="pl-c1">this</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span><span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">index</span>,q<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">attributes</span>;<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>n)<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">array</span>,q<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,s<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;n<span class="pl-k">&lt;</span>s;n<span class="pl-k">+=</span>p){<span class="pl-k">var</span> t<span class="pl-k">=</span>f[n<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-smi">h</span>.<span class="pl-en">fromArray</span>(q,<span class="pl-c1">3</span><span class="pl-k">*</span>f[n]);<span class="pl-smi">l</span>.<span class="pl-en">fromArray</span>(q,<span class="pl-c1">3</span><span class="pl-k">*</span>t);t<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">distanceSqToSegment</span>(h,l,m,k);t<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>(<span class="pl-smi">m</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>),t<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>.<span class="pl-en">distanceTo</span>(m),t<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">near</span><span class="pl-k">||</span>t<span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">far</span><span class="pl-k">||</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>t,point<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">clone</span>().<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>),index<span class="pl-k">:</span>n,face<span class="pl-k">:</span><span class="pl-c1">null</span>,faceIndex<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-c1">this</span>}))}<span class="pl-k">else</span> <span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,s<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">1</span>;n<span class="pl-k">&lt;</span>s;n<span class="pl-k">+=</span>p)<span class="pl-smi">h</span>.<span class="pl-en">fromArray</span>(q,<span class="pl-c1">3</span><span class="pl-k">*</span>n),<span class="pl-smi">l</span>.<span class="pl-en">fromArray</span>(q,</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">3</span>),t<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">distanceSqToSegment</span>(h,l,m,k),t<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>(<span class="pl-smi">m</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>),t<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>.<span class="pl-en">distanceTo</span>(m),t<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">near</span><span class="pl-k">||</span>t<span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">far</span><span class="pl-k">||</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>t,point<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">clone</span>().<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>),index<span class="pl-k">:</span>n,face<span class="pl-k">:</span><span class="pl-c1">null</span>,faceIndex<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-c1">this</span>}))}<span class="pl-k">else</span> <span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>)<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">vertices</span>,l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>l<span class="pl-k">-</span><span class="pl-c1">1</span>;n<span class="pl-k">+=</span>p)t<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">distanceSqToSegment</span>(h[n],h[n<span class="pl-k">+</span><span class="pl-c1">1</span>],m,k),t<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>(<span class="pl-smi">m</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>),t<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>.<span class="pl-en">distanceTo</span>(m),t<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">near</span><span class="pl-k">||</span>t<span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">far</span><span class="pl-k">||</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>t,point<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">clone</span>().<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>),</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line">index<span class="pl-k">:</span>n,face<span class="pl-k">:</span><span class="pl-c1">null</span>,faceIndex<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-c1">this</span>}))}}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>)).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineStrip</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinePieces</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">LineSegments</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LineSegments<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>;</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Mesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Mesh<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()});<span class="pl-c1">this</span>.<span class="pl-en">updateMorphTargets</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>;</td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMorphTargets</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>){<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetBase</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span><span class="pl-k">=</span>{};<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>),<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span>[<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>[a].<span class="pl-c1">name</span>]<span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getMorphTargetIndexByName</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span>[a])<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span>[a];<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Mesh.getMorphTargetIndexByName: morph target <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> does not exist. Returning 0.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Triangle</span>.<span class="pl-en">barycoordFromPoint</span>(a,b,c,d,t);<span class="pl-smi">e</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-smi">t</span>.<span class="pl-c1">x</span>);<span class="pl-smi">f</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-smi">t</span>.<span class="pl-c1">y</span>);<span class="pl-smi">g</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-smi">t</span>.<span class="pl-c1">z</span>);<span class="pl-smi">e</span>.<span class="pl-c1">add</span>(f).<span class="pl-c1">add</span>(g);<span class="pl-k">return</span> <span class="pl-smi">e</span>.<span class="pl-en">clone</span>()}function b(a,b,c,d,e,f,g){var h=a.material;if(null===(h.side===THREE.BackSide?c.intersectTriangle(f,e,d,!0,g):c.intersectTriangle(d,e,f,h.side!==THREE.DoubleSide,g)))return null;u.copy(g);u.applyMatrix4(a.matrixWorld);c=b.ray.origin.distanceTo(u);return c&lt;b.near||c&gt;b.far?null:{distance:c,point:u.clone(),</td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line">object<span class="pl-k">:</span>a}}function c(c,d,e,g,k,m,p,u){f.fromArray(g,3*m);h.fromArray(g,3*p);l.fromArray(g,3*u);if(c=b(c,d,e,f,h,l,v))k&amp;&amp;(n.fromArray(k,2*m),q.fromArray(k,2*p),s.fromArray(k,2*u),c.uv=a(v,f,h,l,n,q,s)),c.face=new THREE.Face3(m,p,u,THREE.Triangle.normal(f,h,l)),c.faceIndex=m;return c}var d=new THREE.Matrix4,e=new THREE.Ray,g=new THREE.Sphere,f=new THREE.Vector3,h=new THREE.Vector3,l=new THREE.Vector3,k=new THREE.Vector3,m=new THREE.Vector3,p=new THREE.Vector3,n=new THREE.Vector2,q=new THREE.Vector2,</td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line">s<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">u</span>,<span class="pl-smi">t</span>){<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">material</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">B</span>){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">x</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">x</span>.<span class="pl-en">computeBoundingSphere</span>();<span class="pl-k">var</span> y<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-smi">g</span>.<span class="pl-en">copy</span>(<span class="pl-smi">x</span>.<span class="pl-smi">boundingSphere</span>);<span class="pl-smi">g</span>.<span class="pl-en">applyMatrix4</span>(y);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">u</span>.<span class="pl-smi">ray</span>.<span class="pl-en">isIntersectionSphere</span>(g)<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-en">getInverse</span>(y),<span class="pl-smi">e</span>.<span class="pl-en">copy</span>(<span class="pl-smi">u</span>.<span class="pl-smi">ray</span>).<span class="pl-en">applyMatrix4</span>(d),<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">x</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-en">isIntersectionBox</span>(<span class="pl-smi">x</span>.<span class="pl-smi">boundingBox</span>))){<span class="pl-k">var</span> z,<span class="pl-c1">A</span>;<span class="pl-k">if</span>(x <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>){<span class="pl-k">var</span> <span class="pl-c1">J</span>,<span class="pl-c1">F</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-c1">index</span>,y<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-c1">attributes</span>,x<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>;</td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">y</span>.<span class="pl-smi">uv</span><span class="pl-k">&amp;&amp;</span>(z<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">uv</span>.<span class="pl-smi">array</span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">B</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> y<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-smi">array</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">length</span>;<span class="pl-c1">C</span><span class="pl-k">&lt;</span><span class="pl-c1">N</span>;<span class="pl-c1">C</span><span class="pl-k">+=</span><span class="pl-c1">3</span>){<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">=</span>y[<span class="pl-c1">C</span>],<span class="pl-c1">J</span><span class="pl-k">=</span>y[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">F</span><span class="pl-k">=</span>y[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-c1">this</span>,u,e,x,z,<span class="pl-c1">B</span>,<span class="pl-c1">J</span>,<span class="pl-c1">F</span>))<span class="pl-c1">A</span>.<span class="pl-smi">faceIndex</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">C</span><span class="pl-k">/</span><span class="pl-c1">3</span>),<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(<span class="pl-c1">A</span>)}<span class="pl-k">else</span> <span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-c1">length</span>;<span class="pl-c1">C</span><span class="pl-k">&lt;</span><span class="pl-c1">N</span>;<span class="pl-c1">C</span><span class="pl-k">+=</span><span class="pl-c1">9</span>)<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">/</span><span class="pl-c1">3</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">B</span><span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">B</span><span class="pl-k">+</span><span class="pl-c1">2</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-c1">this</span>,u,e,x,z,<span class="pl-c1">B</span>,<span class="pl-c1">J</span>,<span class="pl-c1">F</span>))<span class="pl-c1">A</span>.<span class="pl-c1">index</span><span class="pl-k">=</span><span class="pl-c1">B</span>,<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(<span class="pl-c1">A</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(x <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>){<span class="pl-k">var</span> <span class="pl-c1">L</span>,<span class="pl-c1">Q</span>,y<span class="pl-k">=</span><span class="pl-c1">B</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>y<span class="pl-k">?</span><span class="pl-c1">B</span>.<span class="pl-smi">materials</span><span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">vertices</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">faces</span>;<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>];<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">F</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(z<span class="pl-k">=</span><span class="pl-c1">F</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">length</span>;<span class="pl-c1">M</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">M</span><span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">J</span>[<span class="pl-c1">M</span>];<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>y<span class="pl-k">?</span><span class="pl-c1">C</span>[<span class="pl-c1">E</span>.<span class="pl-smi">materialIndex</span>]<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">B</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">A</span>){<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">N</span>[<span class="pl-c1">E</span>.<span class="pl-smi">a</span>];<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">N</span>[<span class="pl-c1">E</span>.<span class="pl-smi">b</span>];<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">N</span>[<span class="pl-c1">E</span>.<span class="pl-smi">c</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">A</span>.<span class="pl-smi">morphTargets</span>){<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-k">var</span> <span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>;<span class="pl-smi">f</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-smi">h</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-smi">l</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-c1">length</span>;<span class="pl-c1">T</span><span class="pl-k">&lt;</span><span class="pl-c1">H</span>;<span class="pl-c1">T</span><span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">O</span>[<span class="pl-c1">T</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">R</span>){<span class="pl-k">var</span> <span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">A</span>[<span class="pl-c1">T</span>].<span class="pl-smi">vertices</span>;<span class="pl-smi">f</span>.<span class="pl-en">addScaledVector</span>(<span class="pl-smi">k</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">G</span>[<span class="pl-c1">E</span>.<span class="pl-smi">a</span>],<span class="pl-c1">F</span>),<span class="pl-c1">R</span>);<span class="pl-smi">h</span>.<span class="pl-en">addScaledVector</span>(<span class="pl-smi">m</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">G</span>[<span class="pl-c1">E</span>.<span class="pl-smi">b</span>],<span class="pl-c1">L</span>),<span class="pl-c1">R</span>);<span class="pl-smi">l</span>.<span class="pl-en">addScaledVector</span>(<span class="pl-smi">p</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">G</span>[<span class="pl-c1">E</span>.<span class="pl-smi">c</span>],<span class="pl-c1">Q</span>),<span class="pl-c1">R</span>)}}<span class="pl-smi">f</span>.<span class="pl-c1">add</span>(<span class="pl-c1">F</span>);<span class="pl-smi">h</span>.<span class="pl-c1">add</span>(<span class="pl-c1">L</span>);<span class="pl-smi">l</span>.<span class="pl-c1">add</span>(<span class="pl-c1">Q</span>);<span class="pl-c1">F</span><span class="pl-k">=</span>f;<span class="pl-c1">L</span><span class="pl-k">=</span>h;<span class="pl-c1">Q</span><span class="pl-k">=</span>l}<span class="pl-k">if</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-c1">this</span>,u,e,<span class="pl-c1">F</span>,<span class="pl-c1">L</span>,<span class="pl-c1">Q</span>,v))z<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">O</span><span class="pl-k">=</span>z[<span class="pl-c1">M</span>],<span class="pl-smi">n</span>.<span class="pl-en">copy</span>(<span class="pl-c1">O</span>[<span class="pl-c1">0</span>]),<span class="pl-smi">q</span>.<span class="pl-en">copy</span>(<span class="pl-c1">O</span>[<span class="pl-c1">1</span>]),<span class="pl-smi">s</span>.<span class="pl-en">copy</span>(<span class="pl-c1">O</span>[<span class="pl-c1">2</span>]),<span class="pl-c1">A</span>.<span class="pl-smi">uv</span><span class="pl-k">=</span><span class="pl-en">a</span>(v,<span class="pl-c1">F</span>,<span class="pl-c1">L</span>,<span class="pl-c1">Q</span>,n,q,s)),<span class="pl-c1">A</span>.<span class="pl-c1">face</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">E</span>,<span class="pl-c1">A</span>.<span class="pl-smi">faceIndex</span><span class="pl-k">=</span><span class="pl-c1">M</span>,<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(<span class="pl-c1">A</span>)}}}}}}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>)).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)};<span class="pl-c1">THREE</span>.<span class="pl-en">Bone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Bone<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">skin</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">skin</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skin</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="LC446" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Skeleton</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">identityMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;a<span class="pl-k">=</span>a<span class="pl-k">||</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">bones</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span>(a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>),a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">nextPowerOfTwo</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a)),<span class="pl-c1">this</span>.<span class="pl-smi">boneTextureHeight</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boneTextureWidth</span><span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,<span class="pl-c1">4</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneTextureWidth</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">boneTextureHeight</span><span class="pl-k">*</span><span class="pl-c1">4</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneTextureWidth</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneTextureHeight</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span>))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="LC447" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-c1">this</span>.<span class="pl-en">calculateInverses</span>();<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>)<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>);<span class="pl-k">else</span> <span class="pl-k">for</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Skeleton bonInverses is the wrong length.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span><span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>a;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>)};</td>
      </tr>
      <tr>
        <td id="L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="LC448" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">calculateInverses</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[a]<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[a].<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>.<span class="pl-c1">push</span>(c)}};</td>
      </tr>
      <tr>
        <td id="L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="LC449" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[b])<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>[b]);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[b])<span class="pl-smi">a</span>.<span class="pl-c1">parent</span><span class="pl-k">?</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">a</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>))<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">decompose</span>(<span class="pl-smi">a</span>.<span class="pl-smi">position</span>,<span class="pl-smi">a</span>.<span class="pl-smi">quaternion</span>,<span class="pl-smi">a</span>.<span class="pl-smi">scale</span>)};</td>
      </tr>
      <tr>
        <td id="L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="LC450" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[b]<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[b].<span class="pl-smi">matrixWorld</span><span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">identityMatrix</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>[b]),<span class="pl-smi">a</span>.<span class="pl-en">flattenToArrayOffset</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span>,<span class="pl-c1">16</span><span class="pl-k">*</span>b);<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Skeleton</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>,<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span>)};</td>
      </tr>
      <tr>
        <td id="L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="LC451" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SkinnedMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SkinnedMesh<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">bindMode</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>attached<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">bindMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bindMatrixInverse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;a<span class="pl-k">=</span>[];<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;<span class="pl-k">++</span>e)d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>[e],b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Bone</span>(<span class="pl-c1">this</span>),<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(b),<span class="pl-smi">b</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">name</span>,<span class="pl-smi">b</span>.<span class="pl-smi">position</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">d</span>.<span class="pl-smi">pos</span>),<span class="pl-smi">b</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">d</span>.<span class="pl-smi">rotq</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">scl</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">scale</span>.<span class="pl-en">fromArray</span>(<span class="pl-smi">d</span>.<span class="pl-smi">scl</span>);e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;<span class="pl-k">++</span>e)d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="LC452" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>[e],<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-c1">parent</span><span class="pl-k">?</span>a[<span class="pl-smi">d</span>.<span class="pl-c1">parent</span>].<span class="pl-c1">add</span>(a[e])<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">add</span>(a[e])}<span class="pl-c1">this</span>.<span class="pl-en">normalizeSkinWeights</span>();<span class="pl-c1">this</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-en">bind</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Skeleton</span>(a,<span class="pl-k">void</span> <span class="pl-c1">0</span>,c),<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>;</td>
      </tr>
      <tr>
        <td id="L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="LC453" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bind</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">skeleton</span><span class="pl-k">=</span>a;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-c1">this</span>.<span class="pl-smi">skeleton</span>.<span class="pl-en">calculateInverses</span>(),b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">this</span>.<span class="pl-smi">bindMatrix</span>.<span class="pl-en">copy</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">bindMatrixInverse</span>.<span class="pl-en">getInverse</span>(b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">skeleton</span>.<span class="pl-en">pose</span>()};</td>
      </tr>
      <tr>
        <td id="L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="LC454" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">normalizeSkinWeights</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">skinWeights</span>[a],c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-en">lengthManhattan</span>();<span class="pl-c1">Infinity</span><span class="pl-k">!==</span>c<span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-en">multiplyScalar</span>(c)<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>)}};</td>
      </tr>
      <tr>
        <td id="L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="LC455" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">updateMatrixWorld</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-s"><span class="pl-pds">&quot;</span>attached<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">bindMode</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">bindMatrixInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>detached<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">bindMode</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">bindMatrixInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bindMatrix</span>)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.SkinnedMesh unrecognized bindMode: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">bindMode</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>,<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span>)).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)};</td>
      </tr>
      <tr>
        <td id="L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="LC456" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LOD</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LOD<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(<span class="pl-c1">this</span>,{levels<span class="pl-k">:</span>{enumerable<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>[]},objects<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.LOD: .objects has been renamed to .levels.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">levels</span>}}})};<span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>;</td>
      </tr>
      <tr>
        <td id="L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="LC457" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addLevel</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">levels</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;!</span>(b<span class="pl-k">&lt;</span>c[d].<span class="pl-smi">distance</span>);d<span class="pl-k">++</span>);<span class="pl-smi">c</span>.<span class="pl-c1">splice</span>(d,<span class="pl-c1">0</span>,{distance<span class="pl-k">:</span>b,object<span class="pl-k">:</span>a});<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getObjectForDistance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">levels</span>,c<span class="pl-k">=</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d<span class="pl-k">&amp;&amp;!</span>(a<span class="pl-k">&lt;</span>b[c].<span class="pl-smi">distance</span>);c<span class="pl-k">++</span>);<span class="pl-k">return</span> b[c<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">object</span>};</td>
      </tr>
      <tr>
        <td id="L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="LC458" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">ray</span>.<span class="pl-smi">origin</span>.<span class="pl-en">distanceTo</span>(a);<span class="pl-c1">this</span>.<span class="pl-en">getObjectForDistance</span>(d).<span class="pl-en">raycast</span>(b,c)}}();</td>
      </tr>
      <tr>
        <td id="L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="LC459" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">levels</span>;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>){<span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">c</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">distanceTo</span>(b);d[<span class="pl-c1">0</span>].<span class="pl-c1">object</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)<span class="pl-k">if</span>(c<span class="pl-k">&gt;=</span>d[e].<span class="pl-smi">distance</span>)d[e<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">object</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,d[e].<span class="pl-c1">object</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">else</span> <span class="pl-k">break</span>;<span class="pl-k">for</span>(;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)d[e].<span class="pl-c1">object</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}}}();</td>
      </tr>
      <tr>
        <td id="L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="LC460" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,<span class="pl-k">!</span><span class="pl-c1">1</span>);a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">levels</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[b];<span class="pl-c1">this</span>.<span class="pl-en">addLevel</span>(<span class="pl-smi">d</span>.<span class="pl-c1">object</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">d</span>.<span class="pl-smi">distance</span>)}<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">toJSON</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">levels</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">levels</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b[c];<span class="pl-smi">a</span>.<span class="pl-c1">object</span>.<span class="pl-smi">levels</span>.<span class="pl-c1">push</span>({object<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-c1">object</span>.<span class="pl-smi">uuid</span>,distance<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">distance</span>})}<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="LC461" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Sprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]),b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>]),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]),d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;<span class="pl-smi">d</span>.<span class="pl-en">setIndex</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(a,<span class="pl-c1">1</span>));<span class="pl-smi">d</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>));<span class="pl-smi">d</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">2</span>));<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Sprite<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.SpriteMaterial</span>}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="LC462" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">ray</span>.<span class="pl-en">distanceSqToPoint</span>(a);d<span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d),point<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">position</span>,face<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-c1">this</span>})}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">material</span>)).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Particle</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>;</td>
      </tr>
      <tr>
        <td id="L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="LC463" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LensFlare</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">customUpdateCallback</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">add</span>(a,b,c,d,e)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>;</td>
      </tr>
      <tr>
        <td id="L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="LC464" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span>);c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(c,<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,c));<span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">push</span>({texture<span class="pl-k">:</span>a,size<span class="pl-k">:</span>b,distance<span class="pl-k">:</span>c,x<span class="pl-k">:</span><span class="pl-c1">0</span>,y<span class="pl-k">:</span><span class="pl-c1">0</span>,z<span class="pl-k">:</span><span class="pl-c1">0</span>,scale<span class="pl-k">:</span><span class="pl-c1">1</span>,rotation<span class="pl-k">:</span><span class="pl-c1">0</span>,opacity<span class="pl-k">:</span>g,color<span class="pl-k">:</span>e,blending<span class="pl-k">:</span>d})};</td>
      </tr>
      <tr>
        <td id="L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="LC465" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateLensFlares</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">length</span>,c,d<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*-</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,e<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*-</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span>[a],<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>d<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">distance</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">distance</span>,<span class="pl-smi">c</span>.<span class="pl-smi">wantedRotation</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">.25</span>,<span class="pl-smi">c</span>.<span class="pl-smi">rotation</span><span class="pl-k">+=</span><span class="pl-c1">.25</span><span class="pl-k">*</span>(<span class="pl-smi">c</span>.<span class="pl-smi">wantedRotation</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-smi">rotation</span>)};</td>
      </tr>
      <tr>
        <td id="L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="LC466" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">positionScreen</span>);<span class="pl-c1">this</span>.<span class="pl-smi">customUpdateCallback</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">customUpdateCallback</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">lensFlares</span>[b]);<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">Scene</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Scene<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">overrideMaterial</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span>;</td>
      </tr>
      <tr>
        <td id="L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="LC467" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">copy</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>.<span class="pl-en">clone</span>());<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">overrideMaterial</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">overrideMaterial</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">overrideMaterial</span>.<span class="pl-en">clone</span>());<span class="pl-c1">this</span>.<span class="pl-smi">autoUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">autoUpdate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixAutoUpdate</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">Fog</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1E3</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Fog</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Fog</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">getHex</span>(),<span class="pl-c1">this</span>.<span class="pl-smi">near</span>,<span class="pl-c1">this</span>.<span class="pl-smi">far</span>)};</td>
      </tr>
      <tr>
        <td id="L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="LC468" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">FogExp2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">density</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">FogExp2</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.FogExp2</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>.<span class="pl-en">getHex</span>(),<span class="pl-c1">this</span>.<span class="pl-smi">density</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span><span class="pl-k">=</span>{};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ALPHAMAP<span class="pl-cce">\n\n\t</span>diffuseColor.a *= texture2D( alphaMap, vUv ).g;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ALPHAMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D alphaMap;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef ALPHATEST<span class="pl-cce">\n\n\t</span>if ( diffuseColor.a &lt; ALPHATEST ) discard;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="LC469" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.aomap_fragment=&quot;#ifdef USE_AOMAP\n\n\ttotalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n#endif\n&quot;;THREE.ShaderChunk.aomap_pars_fragment=&quot;#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif&quot;;THREE.ShaderChunk.begin_vertex=&quot;\nvec3 transformed = vec3( position );\n&quot;;THREE.ShaderChunk.beginnormal_vertex=&quot;\nvec3 objectNormal = vec3( normal );\n&quot;;THREE.ShaderChunk.bumpmap_pars_fragment=&quot;#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="LC470" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.color_fragment=&quot;#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif&quot;;THREE.ShaderChunk.color_pars_fragment=&quot;#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n&quot;;THREE.ShaderChunk.color_pars_vertex=&quot;#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif&quot;;THREE.ShaderChunk.color_vertex=&quot;#ifdef USE_COLOR\n\n\tvColor.xyz = color.xyz;\n\n#endif&quot;;THREE.ShaderChunk.common=&quot;#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\n\tif ( decayExponent &gt; 0.0 ) {\n\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t}\n\n\treturn 1.0;\n\n}\n\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\n\n\n\tfloat fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\n\n\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\n\n\n\treturn ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( lightDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * G * D;\n\n}\n\nvec3 inputToLinear( in vec3 a ) {\n\n\t#ifdef GAMMA_INPUT\n\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n\nvec3 linearToOutput( in vec3 a ) {\n\n\t#ifdef GAMMA_OUTPUT\n\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n&quot;;</td>
      </tr>
      <tr>
        <td id="L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="LC471" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">defaultnormal_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef FLIP_SIDED<span class="pl-cce">\n\n\t</span>objectNormal = -objectNormal;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n\n</span>vec3 transformedNormal = normalMatrix * objectNormal;<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">displacementmap_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_DISPLACEMENTMAP<span class="pl-cce">\n\n\t</span>transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">displacementmap_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_DISPLACEMENTMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D displacementMap;<span class="pl-cce">\n\t</span>uniform float displacementScale;<span class="pl-cce">\n\t</span>uniform float displacementBias;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="LC472" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.emissivemap_fragment=&quot;#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n\n\ttotalEmissiveLight *= emissiveColor.rgb;\n\n#endif\n&quot;;THREE.ShaderChunk.emissivemap_pars_fragment=&quot;#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n&quot;;THREE.ShaderChunk.envmap_fragment=&quot;#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="LC473" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ENVMAP<span class="pl-cce">\n\n\t</span>uniform float reflectivity;<span class="pl-cce">\n\t</span>#ifdef ENVMAP_TYPE_CUBE<span class="pl-cce">\n\t\t</span>uniform samplerCube envMap;<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>uniform sampler2D envMap;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\t</span>uniform float flipEnvMap;<span class="pl-cce">\n\n\t</span>#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )<span class="pl-cce">\n\n\t\t</span>uniform float refractionRatio;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>varying vec3 vReflect;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP ) &amp;&amp; ! defined( PHONG )<span class="pl-cce">\n\n\t</span>varying vec3 vReflect;<span class="pl-cce">\n\n\t</span>uniform float refractionRatio;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="LC474" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP ) &amp;&amp; ! defined( PHONG )<span class="pl-cce">\n\n\t</span>vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );<span class="pl-cce">\n\n\t</span>vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );<span class="pl-cce">\n\n\t</span>#ifdef ENVMAP_MODE_REFLECTION<span class="pl-cce">\n\n\t\t</span>vReflect = reflect( cameraToVertex, worldNormal );<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>vReflect = refract( cameraToVertex, worldNormal, refractionRatio );<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="LC475" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_FOG<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>float depth = gl_FragDepthEXT / gl_FragCoord.w;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n\t</span>#ifdef FOG_EXP2<span class="pl-cce">\n\n\t\t</span>float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>float fogFactor = smoothstep( fogNear, fogFar, depth );<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\t\n\t</span>outgoingLight = mix( outgoingLight, fogColor, fogFactor );<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="LC476" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_FOG<span class="pl-cce">\n\n\t</span>uniform vec3 fogColor;<span class="pl-cce">\n\n\t</span>#ifdef FOG_EXP2<span class="pl-cce">\n\n\t\t</span>uniform float fogDensity;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>uniform float fogNear;<span class="pl-cce">\n\t\t</span>uniform float fogFar;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">hemilight_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if MAX_HEMI_LIGHTS &gt; 0<span class="pl-cce">\n\n\t</span>for ( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {<span class="pl-cce">\n\n\t\t</span>vec3 lightDir = hemisphereLightDirection[ i ];<span class="pl-cce">\n\n\t\t</span>float dotProduct = dot( normal, lightDir );<span class="pl-cce">\n\n\t\t</span>float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;<span class="pl-cce">\n\n\t\t</span>vec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );<span class="pl-cce">\n\n\t\t</span>totalAmbientLight += lightColor;<span class="pl-cce">\n\n\t</span>}<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="LC477" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lightmap_fragment=&quot;#ifdef USE_LIGHTMAP\n\n\ttotalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n#endif\n&quot;;THREE.ShaderChunk.lightmap_pars_fragment=&quot;#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif&quot;;THREE.ShaderChunk.lights_lambert_pars_vertex=&quot;#if MAX_DIR_LIGHTS &gt; 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS &gt; 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="LC478" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lights_lambert_vertex=&quot;vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\nvec3 normal = normalize( transformedNormal );\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect &gt; spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\n\t\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tfloat hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="LC479" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lights_phong_fragment=&quot;vec3 viewDir = normalize( vViewPosition );\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lightPosition = pointLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect &gt; spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\n\t\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n\t\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * cosineTerm;\n\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\n\n\t}\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="LC480" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lights_phong_pars_fragment=&quot;uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS &gt; 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS &gt; 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="LC481" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_ENVMAP )<span class="pl-cce">\n\n\t</span>varying vec3 vWorldPosition;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n\n</span>#if MAX_POINT_LIGHTS &gt; 0<span class="pl-cce">\n\n\t</span>uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_ENVMAP )<span class="pl-cce">\n\n\t</span>vWorldPosition = worldPosition.xyz;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n\t</span>outgoingLight = linearToOutput( outgoingLight );<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="LC482" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined(USE_LOGDEPTHBUF) &amp;&amp; defined(USE_LOGDEPTHBUF_EXT)<span class="pl-cce">\n\n\t</span>gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LOGDEPTHBUF<span class="pl-cce">\n\n\t</span>uniform float logDepthBufFC;<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>varying float vFragDepth;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LOGDEPTHBUF<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>varying float vFragDepth;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n\t</span>uniform float logDepthBufFC;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="LC483" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LOGDEPTHBUF<span class="pl-cce">\n\n\t</span>gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>vFragDepth = 1.0 + gl_Position.w;<span class="pl-cce">\n\n</span>#else<span class="pl-cce">\n\n\t\t</span>gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>vec4 texelColor = texture2D( map, vUv );<span class="pl-cce">\n\n\t</span>texelColor.xyz = inputToLinear( texelColor.xyz );<span class="pl-cce">\n\n\t</span>diffuseColor *= texelColor;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="LC484" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>uniform sampler2D map;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_particle_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>diffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_particle_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>uniform vec4 offsetRepeat;<span class="pl-cce">\n\t</span>uniform sampler2D map;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphnormal_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHNORMALS<span class="pl-cce">\n\n\t</span>objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];<span class="pl-cce">\n\t</span>objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];<span class="pl-cce">\n\t</span>objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];<span class="pl-cce">\n\t</span>objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="LC485" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-cce">\n\n\t</span>#ifndef USE_MORPHNORMALS<span class="pl-cce">\n\n\t</span>uniform float morphTargetInfluences[ 8 ];<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t</span>uniform float morphTargetInfluences[ 4 ];<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-cce">\n\n\t</span>transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];<span class="pl-cce">\n\n\t</span>#ifndef USE_MORPHNORMALS<span class="pl-cce">\n\n\t</span>transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="LC486" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">normal_phong_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifndef FLAT_SHADED<span class="pl-cce">\n\n\t</span>vec3 normal = normalize( vNormal );<span class="pl-cce">\n\n\t</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n\n\t\t</span>normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#else<span class="pl-cce">\n\n\t</span>vec3 fdx = dFdx( vViewPosition );<span class="pl-cce">\n\t</span>vec3 fdy = dFdy( vViewPosition );<span class="pl-cce">\n\t</span>vec3 normal = normalize( cross( fdx, fdy ) );<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n\n</span>#ifdef USE_NORMALMAP<span class="pl-cce">\n\n\t</span>normal = perturbNormal2Arb( -vViewPosition, normal );<span class="pl-cce">\n\n</span>#elif defined( USE_BUMPMAP )<span class="pl-cce">\n\n\t</span>normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="LC487" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">normalmap_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_NORMALMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D normalMap;<span class="pl-cce">\n\t</span>uniform vec2 normalScale;<span class="pl-cce">\n\n\n\t</span>vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {<span class="pl-cce">\n\n\t\t</span>vec3 q0 = dFdx( eye_pos.xyz );<span class="pl-cce">\n\t\t</span>vec3 q1 = dFdy( eye_pos.xyz );<span class="pl-cce">\n\t\t</span>vec2 st0 = dFdx( vUv.st );<span class="pl-cce">\n\t\t</span>vec2 st1 = dFdy( vUv.st );<span class="pl-cce">\n\n\t\t</span>vec3 S = normalize( q0 * st1.t - q1 * st0.t );<span class="pl-cce">\n\t\t</span>vec3 T = normalize( -q0 * st1.s + q1 * st0.s );<span class="pl-cce">\n\t\t</span>vec3 N = normalize( surf_norm );<span class="pl-cce">\n\n\t\t</span>vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;<span class="pl-cce">\n\t\t</span>mapN.xy = normalScale * mapN.xy;<span class="pl-cce">\n\t\t</span>mat3 tsn = mat3( S, T, N );<span class="pl-cce">\n\t\t</span>return normalize( tsn * mapN );<span class="pl-cce">\n\n\t</span>}<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="LC488" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.project_vertex=&quot;#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n&quot;;THREE.ShaderChunk.shadowmap_fragment=&quot;#ifdef USE_SHADOWMAP\n\n\tfor ( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\n\n\t\tfloat texelSizeY =  1.0 / shadowMapSize[ i ].y;\n\n\t\tfloat shadow = 0.0;\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n\t\tbool isPointLight = shadowDarkness[ i ] &lt; 0.0;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tfloat realShadowDarkness = abs( shadowDarkness[ i ] );\n\n\t\t\tvec3 lightToPosition = vShadowCoord[ i ].xyz;\n\n\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tfloat dp = length( lightToPosition );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\n\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tconst float Dr = 1.25;\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tconst float Dr = 2.25;\n\t#endif\n\n\t\t\tfloat os = Dr *  2.0 * texelSizeY;\n\n\t\t\tconst vec3 Gsd = vec3( - 1, 0, 1 );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tshadow *= realShadowDarkness * ( 1.0 / 21.0 );\n\n\t#else \n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tfloat dp = length( lightToPosition );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tshadow *= realShadowDarkness;\n\n\t#endif\n\n\t\t} else {\n\n#endif \n\t\t\tfloat texelSizeX =  1.0 / shadowMapSize[ i ].x;\n\n\t\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\n\t\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x &gt;= 0.0, shadowCoord.x &lt;= 1.0, shadowCoord.y &gt;= 0.0, shadowCoord.y &lt;= 1.0 );\n\t\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z &lt;= 1.0 );\n\n\t\t\tbool frustumTest = all( frustumTestVec );\n\n\t\t\tif ( frustumTest ) {\n\n\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\n\t\t\t\t/*\n\t\t\t\t\tfor ( float y = -1.25; y &lt;= 1.25; y += 1.25 )\n\t\t\t\t\t\tfor ( float x = -1.25; x &lt;= 1.25; x += 1.25 ) {\n\t\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\t\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\t\t\t\t\t\t\tif ( fDepth &lt; shadowCoord.z )\n\t\t\t\t\t\t\t\tshadow += 1.0;\n\t\t\t\t\t}\n\t\t\t\t\tshadow /= 9.0;\n\t\t\t\t*/\n\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tconst float ShadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = texelSizeX;\n\t\t\t\tfloat yPixelOffset = texelSizeY;\n\n\t\t\t\tfloat dx0 = - 1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = - 1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfloat fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tshadow *= shadowDarkness[ i ];\n\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tfloat xPixelOffset = texelSizeX;\n\t\t\t\tfloat yPixelOffset = texelSizeY;\n\n\t\t\t\tfloat dx0 = - 1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = - 1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 0 ] *= vec3( 0.25 );\n\n\t\t\t\tshadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 1 ] *= vec3( 0.25 );\n\n\t\t\t\tshadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 2 ] *= vec3( 0.25 );\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\n\n\t\t\t\tshadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\n\t\t\t\tshadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\n\n\t#else \n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth &lt; shadowCoord.z )\n\t\t\t\t\tshadow = shadowDarkness[ i ];\n\n\t#endif\n\n\t\t\t}\n\n#ifdef SHADOWMAP_DEBUG\n\n\t\t\tif ( inFrustum ) {\n\n\t\t\t\tif ( i == 0 ) {\n\n\t\t\t\t\toutgoingLight *= vec3( 1.0, 0.5, 0.0 );\n\n\t\t\t\t} else if ( i == 1 ) {\n\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 1.0, 0.8 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 0.5, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n#endif\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n\t\t}\n\n#endif\n\n\t\tshadowMask = shadowMask * vec3( 1.0 - shadow );\n\n\t}\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="LC489" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.shadowmap_pars_fragment=&quot;#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n\t#if defined(POINT_LIGHT_SHADOWS)\n\n\n\t\tvoid adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\n\n\t\t\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\t\tif ( testDepth &gt;= dot( textureData, bitSh ) * 1000.0 + bias )\n\t\t\t\tshadowValue += 1.0;\n\n\t\t}\n\n\n\t\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\n\t\t\tvec3 absV = abs( v );\n\n\n\t\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\t\tabsV *= scaleToCube;\n\n\n\t\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\n\n\t\t\tvec2 planar = v.xy;\n\n\t\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\t\tif ( absV.z &gt;= almostOne ) {\n\n\t\t\t\tif ( v.z &gt; 0.0 )\n\t\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t\t} else if ( absV.x &gt;= almostOne ) {\n\n\t\t\t\tfloat signX = sign( v.x );\n\t\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t\t} else if ( absV.y &gt;= almostOne ) {\n\n\t\t\t\tfloat signY = sign( v.y );\n\t\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t\t}\n\n\n\t\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t\t}\n\n\t#endif\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="LC490" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SHADOWMAP<span class="pl-cce">\n\n\t</span>uniform float shadowDarkness[ MAX_SHADOWS ];<span class="pl-cce">\n\t</span>uniform mat4 shadowMatrix[ MAX_SHADOWS ];<span class="pl-cce">\n\t</span>varying vec4 vShadowCoord[ MAX_SHADOWS ];<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SHADOWMAP<span class="pl-cce">\n\n\t</span>for ( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {<span class="pl-cce">\n\n\t\t\t</span>vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;<span class="pl-cce">\n\n\t</span>}<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t</span>mat4 boneMatX = getBoneMatrix( skinIndex.x );<span class="pl-cce">\n\t</span>mat4 boneMatY = getBoneMatrix( skinIndex.y );<span class="pl-cce">\n\t</span>mat4 boneMatZ = getBoneMatrix( skinIndex.z );<span class="pl-cce">\n\t</span>mat4 boneMatW = getBoneMatrix( skinIndex.w );<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="LC491" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.skinning_pars_vertex=&quot;#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="LC492" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t</span>vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );<span class="pl-cce">\n\n\t</span>vec4 skinned = vec4( 0.0 );<span class="pl-cce">\n\t</span>skinned += boneMatX * skinVertex * skinWeight.x;<span class="pl-cce">\n\t</span>skinned += boneMatY * skinVertex * skinWeight.y;<span class="pl-cce">\n\t</span>skinned += boneMatZ * skinVertex * skinWeight.z;<span class="pl-cce">\n\t</span>skinned += boneMatW * skinVertex * skinWeight.w;<span class="pl-cce">\n\t</span>skinned  = bindMatrixInverse * skinned;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinnormal_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t</span>mat4 skinMatrix = mat4( 0.0 );<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.x * boneMatX;<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.y * boneMatY;<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.z * boneMatZ;<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.w * boneMatW;<span class="pl-cce">\n\t</span>skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;<span class="pl-cce">\n\n\t</span>objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="LC493" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>float specularStrength;<span class="pl-cce">\n\n</span>#ifdef USE_SPECULARMAP<span class="pl-cce">\n\n\t</span>vec4 texelSpecular = texture2D( specularMap, vUv );<span class="pl-cce">\n\t</span>specularStrength = texelSpecular.r;<span class="pl-cce">\n\n</span>#else<span class="pl-cce">\n\n\t</span>specularStrength = 1.0;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SPECULARMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D specularMap;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )<span class="pl-cce">\n\n\t</span>varying vec2 vUv2;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="LC494" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )<span class="pl-cce">\n\n\t</span>attribute vec2 uv2;<span class="pl-cce">\n\t</span>varying vec2 vUv2;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )<span class="pl-cce">\n\n\t</span>vUv2 = uv2;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_fragment</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )<span class="pl-cce">\n\n\t</span>varying vec2 vUv;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="LC495" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )<span class="pl-cce">\n\n\t</span>varying vec2 vUv;<span class="pl-cce">\n\t</span>uniform vec4 offsetRepeat;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )<span class="pl-cce">\n\n\t</span>vUv = uv * offsetRepeat.zw + offsetRepeat.xy;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="LC496" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )<span class="pl-cce">\n\n\t</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t\t</span>vec4 worldPosition = modelMatrix * skinned;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="LC497" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span><span class="pl-k">=</span>{<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>{},c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">clone</span>(a[c]),e;<span class="pl-k">for</span>(e <span class="pl-k">in</span> d)b[e]<span class="pl-k">=</span>d[e]}<span class="pl-k">return</span> b},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{},c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a){b[c]<span class="pl-k">=</span>{};<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> a[c]){<span class="pl-k">var</span> e<span class="pl-k">=</span>a[c][d];e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector2</span><span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector4</span><span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix3</span><span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span><span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">?</span>b[c][d]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">clone</span>()<span class="pl-k">:</span><span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(e)<span class="pl-k">?</span>b[c][d]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">slice</span>()<span class="pl-k">:</span>b[c][d]<span class="pl-k">=</span>e}}<span class="pl-k">return</span> b}};</td>
      </tr>
      <tr>
        <td id="L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="LC498" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span><span class="pl-k">=</span>{common<span class="pl-k">:</span>{diffuse<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">15658734</span>)},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},map<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},offsetRepeat<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)},specularMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},alphaMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},envMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},flipEnvMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>},reflectivity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},refractionRatio<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">.98</span>}},aomap<span class="pl-k">:</span>{aoMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},aoMapIntensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},lightmap<span class="pl-k">:</span>{lightMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},lightMapIntensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="LC499" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-c1">1</span>}},emissivemap<span class="pl-k">:</span>{emissiveMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>}},bumpmap<span class="pl-k">:</span>{bumpMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},bumpScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},normalmap<span class="pl-k">:</span>{normalMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},normalScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)}},displacementmap<span class="pl-k">:</span>{displacementMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},displacementScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},displacementBias<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>}},fog<span class="pl-k">:</span>{fogDensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>},fogNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},fogFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},fogColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)}},</td>
      </tr>
      <tr>
        <td id="L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="LC500" class="blob-code blob-code-inner js-file-line">lights<span class="pl-k">:</span>{ambientLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},directionalLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},directionalLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightSkyColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightGroundColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightPosition<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightDistance<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightDecay<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightPosition<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},</td>
      </tr>
      <tr>
        <td id="L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="LC501" class="blob-code blob-code-inner js-file-line">spotLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightDistance<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightAngleCos<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightExponent<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightDecay<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]}},points<span class="pl-k">:</span>{psColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">15658734</span>)},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},size<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},scale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},map<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},offsetRepeat<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)},fogDensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>},fogNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},fogFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},</td>
      </tr>
      <tr>
        <td id="L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="LC502" class="blob-code blob-code-inner js-file-line">fogColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)}},shadowmap<span class="pl-k">:</span>{shadowMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>tv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowMapSize<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2v<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowBias<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowDarkness<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowMatrix<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>m4v<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]}}};</td>
      </tr>
      <tr>
        <td id="L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="LC503" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span><span class="pl-k">=</span>{basic<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">aomap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>]),vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="LC504" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_ENVMAP<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">beginnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">defaultnormal_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">begin_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">project_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="LC505" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">aomap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="LC506" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-cce">\n\t</span>vec3 totalAmbientLight = vec3( 1.0 );<span class="pl-cce">\n\t</span>vec3 shadowMask = vec3( 1.0 );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">aomap_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="LC507" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>outgoingLight = diffuseColor.rgb * totalAmbientLight * shadowMask;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},lambert<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">lights</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>,{emissive<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>)}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define LAMBERT<span class="pl-cce">\n</span>varying vec3 vLightFront;<span class="pl-cce">\n</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n\t</span>varying vec3 vLightBack;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="LC508" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_lambert_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">beginnormal_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="LC509" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">defaultnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">begin_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">project_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_lambert_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform vec3 emissive;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform vec3 ambientLightColor;<span class="pl-cce">\n</span>varying vec3 vLightFront;<span class="pl-cce">\n</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n\t</span>varying vec3 vLightBack;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="LC510" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-cce">\n\t</span>vec3 totalAmbientLight = ambientLightColor;<span class="pl-cce">\n\t</span>vec3 shadowMask = vec3( 1.0 );<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="LC511" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n\t\t</span>if ( gl_FrontFacing )<span class="pl-cce">\n\t\t\t</span>outgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;<span class="pl-cce">\n\t\t</span>else<span class="pl-cce">\n\t\t\t</span>outgoingLight += diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>outgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;<span class="pl-cce">\n\t</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="LC512" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},phong<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">aomap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">lightmap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">emissivemap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">bumpmap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">normalmap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">displacementmap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">lights</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>,{emissive<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="LC513" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>)},specular<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">1118481</span>)},shininess<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">30</span>}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define PHONG<span class="pl-cce">\n</span>varying vec3 vViewPosition;<span class="pl-cce">\n</span>#ifndef FLAT_SHADED<span class="pl-cce">\n\t</span>varying vec3 vNormal;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">displacementmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="LC514" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">beginnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">defaultnormal_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifndef FLAT_SHADED<span class="pl-cce">\n\t</span>vNormal = normalize( transformedNormal );<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">begin_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="LC515" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">displacementmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">project_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>vViewPosition = - mvPosition.xyz;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define PHONG<span class="pl-cce">\n</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform vec3 emissive;<span class="pl-cce">\n</span>uniform vec3 specular;<span class="pl-cce">\n</span>uniform float shininess;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="LC516" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">uv2_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">aomap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">emissivemap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">bumpmap_pars_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="LC517" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">normalmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-cce">\n\t</span>vec3 totalAmbientLight = ambientLightColor;<span class="pl-cce">\n\t</span>vec3 totalEmissiveLight = emissive;<span class="pl-cce">\n\t</span>vec3 shadowMask = vec3( 1.0 );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphamap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="LC518" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">normal_phong_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">hemilight_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">aomap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">emissivemap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>totalDiffuseLight *= shadowMask;<span class="pl-cce">\n</span>totalSpecularLight *= shadowMask;<span class="pl-cce">\n</span>#ifdef METAL<span class="pl-cce">\n\t</span>outgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;<span class="pl-cce">\n</span>#else<span class="pl-cce">\n\t</span>outgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="LC519" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},points<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">points</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float size;<span class="pl-cce">\n</span>uniform float scale;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="LC520" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n\t</span>#ifdef USE_SIZEATTENUATION<span class="pl-cce">\n\t\t</span>gl_PointSize = size * ( scale / length( mvPosition.xyz ) );<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>gl_PointSize = size;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 psColor;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_particle_pars_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="LC521" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( psColor, opacity );<span class="pl-cce">\n\t</span>vec3 shadowMask = vec3( 1.0 );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_particle_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>outgoingLight = diffuseColor.rgb * shadowMask;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="LC522" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},dashed<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,{scale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},dashSize<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},totalSize<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2</span>}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float scale;<span class="pl-cce">\n</span>attribute float lineDistance;<span class="pl-cce">\n</span>varying float vLineDistance;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>vLineDistance = scale * lineDistance;<span class="pl-cce">\n\t</span>vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="LC523" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform float dashSize;<span class="pl-cce">\n</span>uniform float totalSize;<span class="pl-cce">\n</span>varying float vLineDistance;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>if ( mod( vLineDistance, totalSize ) &gt; dashSize ) {<span class="pl-cce">\n\t\t</span>discard;<span class="pl-cce">\n\t</span>}<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="LC524" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>outgoingLight = diffuseColor.rgb;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},depth<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{mNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},mFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">begin_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="LC525" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">project_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float mNear;<span class="pl-cce">\n</span>uniform float mFar;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\t\t</span>float depth = gl_FragDepthEXT / gl_FragCoord.w;<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\t</span>float color = 1.0 - smoothstep( mNear, mFar, depth );<span class="pl-cce">\n\t</span>gl_FragColor = vec4( vec3( color ), opacity );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="LC526" class="blob-code blob-code-inner js-file-line">normal<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vNormal;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vNormal = normalize( normalMatrix * normal );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">begin_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">project_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float opacity;<span class="pl-cce">\n</span>varying vec3 vNormal;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,</td>
      </tr>
      <tr>
        <td id="L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="LC527" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},cube<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{tCube<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tFlip<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vWorldPosition = transformDirection( position, modelMatrix );<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="LC528" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform samplerCube tCube;<span class="pl-cce">\n</span>uniform float tFlip;<span class="pl-cce">\n</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},equirect<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{tEquirect<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tFlip<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="LC529" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vWorldPosition = transformDirection( position, modelMatrix );<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform sampler2D tEquirect;<span class="pl-cce">\n</span>uniform float tFlip;<span class="pl-cce">\n</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n</span>vec3 direction = normalize( vWorldPosition );<span class="pl-cce">\n</span>vec2 sampleUV;<span class="pl-cce">\n</span>sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );<span class="pl-cce">\n</span>sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;<span class="pl-cce">\n</span>gl_FragColor = texture2D( tEquirect, sampleUV );<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="LC530" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},depthRGBA<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{},vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">begin_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">project_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,</td>
      </tr>
      <tr>
        <td id="L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="LC531" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>vec4 pack_depth( const in float depth ) {<span class="pl-cce">\n\t</span>const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );<span class="pl-cce">\n\t</span>const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );<span class="pl-cce">\n\t</span>vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );<span class="pl-cce">\n\t</span>res -= res.xxyz * bit_mask;<span class="pl-cce">\n\t</span>return res;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">logdepthbuf_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\t\t</span>gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="LC532" class="blob-code blob-code-inner js-file-line">distanceRGBA<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{lightPos<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}},vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>varying vec4 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">begin_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">project_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>vWorldPosition = worldPosition;<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 lightPos;<span class="pl-cce">\n</span>varying vec4 vWorldPosition;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="LC533" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">common</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>vec4 pack1K ( float depth ) {<span class="pl-cce">\n</span>   depth /= 1000.0;<span class="pl-cce">\n</span>   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );<span class="pl-cce">\n\t</span>const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );<span class="pl-cce">\n\t</span>vec4 res = fract( depth * bitSh );<span class="pl-cce">\n\t</span>res -= res.xxyz * bitMsk;<span class="pl-cce">\n\t</span>return res; <span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>float unpack1K ( vec4 color ) {<span class="pl-cce">\n\t</span>const vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );<span class="pl-cce">\n\t</span>return dot( color, bitSh ) * 1000.0;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>void main () {<span class="pl-cce">\n\t</span>gl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)}};</td>
      </tr>
      <tr>
        <td id="L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="LC534" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">G</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">*=</span>d,b<span class="pl-k">*=</span>d,c<span class="pl-k">*=</span>d);<span class="pl-smi">r</span>.<span class="pl-en">clearColor</span>(a,b,c,d)}function c(){I.init();r.viewport(na,oa,pa,qa);b(U.r,U.g,U.b,X)}function d(){ra=Aa=null;sa=&quot;&quot;;ta=-1;wa=!0;I.reset()}function e(a){a.preventDefault();d();c();W.clear()}function g(a){a=a.target;a.removeEventListener(&quot;dispose&quot;,g);a:{var b=W.get(a);if(a.image&amp;&amp;b.__image__webglTextureCube)r.deleteTexture(b.__image__webglTextureCube);else{if(void 0===b.__webglInit)break a;r.deleteTexture(b.__webglTexture)}W.delete(a)}la.textures--}</td>
      </tr>
      <tr>
        <td id="L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="LC535" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">target</span>;<span class="pl-smi">a</span>.<span class="pl-c1">removeEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,f);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a),c<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>);<span class="pl-k">if</span>(a<span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span>){<span class="pl-smi">r</span>.<span class="pl-en">deleteTexture</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span>);<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)<span class="pl-smi">r</span>.<span class="pl-en">deleteFramebuffer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">__webglFramebuffer</span>[c]),<span class="pl-smi">r</span>.<span class="pl-en">deleteRenderbuffer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">__webglRenderbuffer</span>[c]);<span class="pl-k">else</span> <span class="pl-smi">r</span>.<span class="pl-en">deleteFramebuffer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">__webglFramebuffer</span>),<span class="pl-smi">r</span>.<span class="pl-en">deleteRenderbuffer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">__webglRenderbuffer</span>);<span class="pl-c1">W</span>.<span class="pl-c1">delete</span>(<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>);<span class="pl-c1">W</span>.<span class="pl-c1">delete</span>(a)}<span class="pl-smi">la</span>.<span class="pl-smi">textures</span><span class="pl-k">--</span>}function h(a){a=a.target;a.removeEventListener(&quot;dispose&quot;,</td>
      </tr>
      <tr>
        <td id="L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="LC536" class="blob-code blob-code-inner js-file-line">h);<span class="pl-en">l</span>(a);<span class="pl-c1">W</span>.<span class="pl-c1">delete</span>(a)}function l(a){var b=W.get(a).program;a.program=void 0;void 0!==b&amp;&amp;ua.releaseProgram(b)}function k(a,b){return b[0]-a[0]}function m(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function p(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function n(a,b,c,d,e){var f;c.transparent?</td>
      </tr>
      <tr>
        <td id="L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="LC537" class="blob-code blob-code-inner js-file-line">(d<span class="pl-k">=</span><span class="pl-c1">Z</span>,f<span class="pl-k">=</span><span class="pl-k">++</span>fa)<span class="pl-k">:</span>(d<span class="pl-k">=</span>ca,f<span class="pl-k">=</span><span class="pl-k">++</span>ga);f<span class="pl-k">=</span>d[f];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>(<span class="pl-smi">f</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">id</span>,<span class="pl-smi">f</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>a,<span class="pl-smi">f</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span>b,<span class="pl-smi">f</span>.<span class="pl-smi">material</span><span class="pl-k">=</span>c,<span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">z</span>,<span class="pl-smi">f</span>.<span class="pl-smi">group</span><span class="pl-k">=</span>e)<span class="pl-k">:</span>(f<span class="pl-k">=</span>{id<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">id</span>,object<span class="pl-k">:</span>a,geometry<span class="pl-k">:</span>b,material<span class="pl-k">:</span>c,z<span class="pl-k">:</span><span class="pl-c1">V</span>.<span class="pl-c1">z</span>,group<span class="pl-k">:</span>e},<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(f))}function q(a,b){if(!1!==a.visible){if(0!==(a.channels.mask&amp;b.channels.mask))if(a instanceof THREE.Light)da.push(a);else if(a instanceof THREE.Sprite)ea.push(a);else if(a instanceof THREE.LensFlare)ja.push(a);else if(a instanceof THREE.ImmediateRenderObject)!0===aa.sortObjects&amp;&amp;(V.setFromMatrixPosition(a.matrixWorld),V.applyProjection(xa)),</td>
      </tr>
      <tr>
        <td id="L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="LC538" class="blob-code blob-code-inner js-file-line"><span class="pl-en">n</span>(a,<span class="pl-c1">null</span>,<span class="pl-smi">a</span>.<span class="pl-smi">material</span>,<span class="pl-c1">V</span>.<span class="pl-c1">z</span>,<span class="pl-c1">null</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span><span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span>)<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">skeleton</span>.<span class="pl-en">update</span>(),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">Ba</span>.<span class="pl-en">intersectsObject</span>(a)){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">material</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">visible</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">sortObjects</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">V</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">V</span>.<span class="pl-en">applyProjection</span>(xa));<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-en">update</span>(a);<span class="pl-k">if</span>(c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">groups</span>,f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">materials</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>g;c<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>e[c],l<span class="pl-k">=</span>f[<span class="pl-smi">h</span>.<span class="pl-smi">materialIndex</span>];<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">l</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="LC539" class="blob-code blob-code-inner js-file-line"><span class="pl-en">n</span>(a,d,l,<span class="pl-c1">V</span>.<span class="pl-c1">z</span>,h)}<span class="pl-k">else</span> <span class="pl-en">n</span>(a,d,c,<span class="pl-c1">V</span>.<span class="pl-c1">z</span>,<span class="pl-c1">null</span>)}}d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">children</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>g;c<span class="pl-k">++</span>)<span class="pl-en">q</span>(d[c],b)}}function s(a,b,c,d,e){for(var f=0,g=a.length;f&lt;g;f++){var h=a[f],l=h.object,k=h.geometry,n=void 0===e?h.material:e,h=h.group;l.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,l.matrixWorld);l.normalMatrix.getNormalMatrix(l.modelViewMatrix);if(l instanceof THREE.ImmediateRenderObject){t(n);var m=v(b,c,d,n,l);sa=&quot;&quot;;l.render(function(a){aa.renderBufferImmediate(a,m,n)})}else aa.renderBufferDirect(b,c,d,k,</td>
      </tr>
      <tr>
        <td id="L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="LC540" class="blob-code blob-code-inner js-file-line">n,l,h)}}function t(a){a.side!==THREE.DoubleSide?I.enable(r.CULL_FACE):I.disable(r.CULL_FACE);I.setFlipSided(a.side===THREE.BackSide);!0===a.transparent?I.setBlending(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha):I.setBlending(THREE.NoBlending);I.setDepthFunc(a.depthFunc);I.setDepthTest(a.depthTest);I.setDepthWrite(a.depthWrite);I.setColorWrite(a.colorWrite);I.setPolygonOffset(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}function v(a,</td>
      </tr>
      <tr>
        <td id="L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="LC541" class="blob-code blob-code-inner js-file-line">b,c,d,e){ya<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(d);<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">||!</span><span class="pl-smi">f</span>.<span class="pl-smi">program</span>){a<span class="pl-k">:</span>{<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(d),k<span class="pl-k">=</span><span class="pl-smi">ua</span>.<span class="pl-en">getParameters</span>(d,b,c,e),n<span class="pl-k">=</span><span class="pl-smi">ua</span>.<span class="pl-en">getProgramCode</span>(d,k),m<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">program</span>,q<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>m)<span class="pl-smi">d</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,h);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">m</span>.<span class="pl-c1">code</span><span class="pl-k">!==</span>n)<span class="pl-en">l</span>(d);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">k</span>.<span class="pl-smi">shaderID</span>)<span class="pl-k">break</span> a;<span class="pl-k">else</span> q<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;q<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">shaderID</span><span class="pl-k">?</span>(m<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span>[<span class="pl-smi">k</span>.<span class="pl-smi">shaderID</span>],<span class="pl-smi">g</span>.<span class="pl-smi">__webglShader</span><span class="pl-k">=</span>{name<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-c1">type</span>,uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">m</span>.<span class="pl-smi">uniforms</span>),vertexShader<span class="pl-k">:</span><span class="pl-smi">m</span>.<span class="pl-smi">vertexShader</span>,fragmentShader<span class="pl-k">:</span><span class="pl-smi">m</span>.<span class="pl-smi">fragmentShader</span>})<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">__webglShader</span><span class="pl-k">=</span>{name<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-c1">type</span>,uniforms<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">uniforms</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">vertexShader</span>,</td>
      </tr>
      <tr>
        <td id="L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="LC542" class="blob-code blob-code-inner js-file-line">fragmentShader<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">fragmentShader</span>},<span class="pl-smi">d</span>.<span class="pl-smi">__webglShader</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">__webglShader</span>,m<span class="pl-k">=</span><span class="pl-smi">ua</span>.<span class="pl-en">acquireProgram</span>(d,k,n),<span class="pl-smi">g</span>.<span class="pl-smi">program</span><span class="pl-k">=</span>m,<span class="pl-smi">d</span>.<span class="pl-smi">program</span><span class="pl-k">=</span>m);k<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">getAttributes</span>();<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>)<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphTargets</span><span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span><span class="pl-smi">aa</span>.<span class="pl-smi">maxMorphTargets</span>;n<span class="pl-k">++</span>)<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>k[<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>n]<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphTargets</span><span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">morphNormals</span>)<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphNormals</span><span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span><span class="pl-smi">aa</span>.<span class="pl-smi">maxMorphNormals</span>;n<span class="pl-k">++</span>)<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>k[<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>n]<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphNormals</span><span class="pl-k">++</span>;<span class="pl-smi">g</span>.<span class="pl-smi">uniformsList</span><span class="pl-k">=</span>[];<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">program</span>.<span class="pl-en">getUniforms</span>(),p;<span class="pl-k">for</span>(p <span class="pl-k">in</span> <span class="pl-smi">g</span>.<span class="pl-smi">__webglShader</span>.<span class="pl-smi">uniforms</span>)(n<span class="pl-k">=</span>k[p])<span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-smi">uniformsList</span>.<span class="pl-c1">push</span>([<span class="pl-smi">g</span>.<span class="pl-smi">__webglShader</span>.<span class="pl-smi">uniforms</span>[p],</td>
      </tr>
      <tr>
        <td id="L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="LC543" class="blob-code blob-code-inner js-file-line">n])}<span class="pl-smi">d</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}n<span class="pl-k">=</span>m<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">program</span>;p<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">getUniforms</span>();k<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">__webglShader</span>.<span class="pl-smi">uniforms</span>;<span class="pl-smi">g</span>.<span class="pl-c1">id</span><span class="pl-k">!==</span>Aa<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-en">useProgram</span>(<span class="pl-smi">g</span>.<span class="pl-smi">program</span>),Aa<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">id</span>,n<span class="pl-k">=</span>m<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">d</span>.<span class="pl-c1">id</span><span class="pl-k">!==</span>ta<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span>ta<span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),ta<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">id</span>,m<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">if</span>(q<span class="pl-k">||</span>a<span class="pl-k">!==</span>ra)<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-c1">elements</span>),<span class="pl-smi">ha</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniform1f</span>(<span class="pl-smi">p</span>.<span class="pl-smi">logDepthBufFC</span>,<span class="pl-c1">2</span><span class="pl-k">/</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">log</span>(<span class="pl-smi">a</span>.<span class="pl-smi">far</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">LN2</span>)),a<span class="pl-k">!==</span>ra<span class="pl-k">&amp;&amp;</span>(ra<span class="pl-k">=</span>a),(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">cameraPosition</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">V</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>),</td>
      </tr>
      <tr>
        <td id="L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="LC544" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-en">uniform3f</span>(<span class="pl-smi">p</span>.<span class="pl-smi">cameraPosition</span>,<span class="pl-c1">V</span>.<span class="pl-c1">x</span>,<span class="pl-c1">V</span>.<span class="pl-c1">y</span>,<span class="pl-c1">V</span>.<span class="pl-c1">z</span>)),(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-smi">skinning</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">viewMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">viewMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-c1">elements</span>);<span class="pl-smi">d</span>.<span class="pl-smi">skinning</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">bindMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">bindMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">bindMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">e</span>.<span class="pl-smi">bindMatrix</span>.<span class="pl-c1">elements</span>),<span class="pl-smi">e</span>.<span class="pl-smi">bindMatrixInverse</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">bindMatrixInverse</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">bindMatrixInverse</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">e</span>.<span class="pl-smi">bindMatrixInverse</span>.<span class="pl-c1">elements</span>),</td>
      </tr>
      <tr>
        <td id="L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="LC545" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">ha</span>.<span class="pl-smi">floatVertexTextures</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">boneTexture</span><span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">=</span><span class="pl-en">w</span>(),<span class="pl-smi">r</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">p</span>.<span class="pl-smi">boneTexture</span>,q),<span class="pl-smi">aa</span>.<span class="pl-en">setTexture</span>(<span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">boneTexture</span>,q)),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">boneTextureWidth</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">p</span>.<span class="pl-smi">boneTextureWidth</span>,<span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">boneTextureWidth</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">boneTextureHeight</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">p</span>.<span class="pl-smi">boneTextureHeight</span>,<span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">boneTextureHeight</span>))<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">boneMatrices</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">boneGlobalMatrices</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">boneGlobalMatrices</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">e</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">boneMatrices</span>));<span class="pl-k">if</span>(m){c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">fog</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="LC546" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">k</span>.<span class="pl-smi">fogColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">color</span>,c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Fog</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-smi">fogNear</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">near</span>,<span class="pl-smi">k</span>.<span class="pl-smi">fogFar</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">far</span>)<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">FogExp2</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">fogDensity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">density</span>));<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-smi">lights</span>){<span class="pl-k">if</span>(wa){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,s,t<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-c1">0</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>,v,<span class="pl-c1">F</span>,<span class="pl-c1">C</span>,y<span class="pl-k">=</span>Ca,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">colors</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">positions</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">point</span>.<span class="pl-smi">colors</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">point</span>.<span class="pl-smi">positions</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">point</span>.<span class="pl-smi">distances</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">point</span>.<span class="pl-smi">decays</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">colors</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">positions</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">distances</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">directions</span>,</td>
      </tr>
      <tr>
        <td id="L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="LC547" class="blob-code blob-code-inner js-file-line">da<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">anglesCos</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">exponents</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">decays</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">skyColors</span>,ga<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">groundColors</span>,<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">positions</span>,ca<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">0</span>,ea<span class="pl-k">=</span><span class="pl-c1">0</span>,fa<span class="pl-k">=</span><span class="pl-c1">0</span>,ja<span class="pl-k">=</span><span class="pl-c1">0</span>,ma<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-c1">0</span>,$<span class="pl-k">=</span><span class="pl-c1">0</span>,ba<span class="pl-k">=</span>s<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">=</span>ba<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>m;c<span class="pl-k">++</span>)s<span class="pl-k">=</span>b[c],v<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">color</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">intensity</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">distance</span>,s <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AmbientLight</span><span class="pl-k">?</span><span class="pl-smi">s</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">+=</span><span class="pl-smi">v</span>.<span class="pl-smi">r</span>,t<span class="pl-k">+=</span><span class="pl-smi">v</span>.<span class="pl-smi">g</span>,x<span class="pl-k">+=</span><span class="pl-smi">v</span>.<span class="pl-smi">b</span>)<span class="pl-k">:</span>s <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">?</span>(ja<span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-smi">s</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Y</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">s</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">V</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">s</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">Y</span>.<span class="pl-c1">sub</span>(<span class="pl-c1">V</span>),<span class="pl-c1">Y</span>.<span class="pl-en">transformDirection</span>(<span class="pl-c1">E</span>),s<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ca,<span class="pl-c1">K</span>[s<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">x</span>,<span class="pl-c1">K</span>[s<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="LC548" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">K</span>[s<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">z</span>,<span class="pl-en">D</span>(<span class="pl-c1">B</span>,s,v,<span class="pl-c1">F</span>),ca<span class="pl-k">+=</span><span class="pl-c1">1</span>))<span class="pl-k">:</span>s <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">?</span>(ma<span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-smi">s</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(ba<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">U</span>,<span class="pl-en">D</span>(<span class="pl-c1">O</span>,ba,v,<span class="pl-c1">F</span>),<span class="pl-c1">V</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">s</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">V</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">E</span>),<span class="pl-c1">N</span>[ba<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">x</span>,<span class="pl-c1">N</span>[ba<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">y</span>,<span class="pl-c1">N</span>[ba<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">z</span>,<span class="pl-c1">M</span>[<span class="pl-c1">U</span>]<span class="pl-k">=</span><span class="pl-c1">C</span>,<span class="pl-c1">G</span>[<span class="pl-c1">U</span>]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">s</span>.<span class="pl-smi">distance</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-smi">s</span>.<span class="pl-smi">decay</span>,<span class="pl-c1">U</span><span class="pl-k">+=</span><span class="pl-c1">1</span>))<span class="pl-k">:</span>s <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">?</span>(<span class="pl-c1">X</span><span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-smi">s</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(ba<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ea,<span class="pl-en">D</span>(<span class="pl-c1">J</span>,ba,v,<span class="pl-c1">F</span>),<span class="pl-c1">Y</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">s</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">V</span>.<span class="pl-en">copy</span>(<span class="pl-c1">Y</span>).<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">E</span>),<span class="pl-c1">H</span>[ba<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">x</span>,<span class="pl-c1">H</span>[ba<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">y</span>,<span class="pl-c1">H</span>[ba<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">z</span>,<span class="pl-c1">Q</span>[ea]<span class="pl-k">=</span><span class="pl-c1">C</span>,<span class="pl-c1">V</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">s</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">Y</span>.<span class="pl-c1">sub</span>(<span class="pl-c1">V</span>),<span class="pl-c1">Y</span>.<span class="pl-en">transformDirection</span>(<span class="pl-c1">E</span>),<span class="pl-c1">I</span>[ba<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="LC549" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>[ba<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">y</span>,<span class="pl-c1">I</span>[ba<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">z</span>,da[ea]<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">s</span>.<span class="pl-smi">angle</span>),<span class="pl-c1">T</span>[ea]<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">exponent</span>,<span class="pl-c1">R</span>[ea]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">s</span>.<span class="pl-smi">distance</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-smi">s</span>.<span class="pl-smi">decay</span>,ea<span class="pl-k">+=</span><span class="pl-c1">1</span>))<span class="pl-k">:</span>s <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span><span class="pl-k">&amp;&amp;</span>($<span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-smi">s</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Y</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">s</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">Y</span>.<span class="pl-en">transformDirection</span>(<span class="pl-c1">E</span>),<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>fa,<span class="pl-c1">S</span>[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">x</span>,<span class="pl-c1">S</span>[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">y</span>,<span class="pl-c1">S</span>[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">z</span>,v<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">color</span>,s<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">groundColor</span>,<span class="pl-en">D</span>(<span class="pl-c1">Z</span>,<span class="pl-c1">C</span>,v,<span class="pl-c1">F</span>),<span class="pl-en">D</span>(ga,<span class="pl-c1">C</span>,s,<span class="pl-c1">F</span>),fa<span class="pl-k">+=</span><span class="pl-c1">1</span>));c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ca;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">B</span>.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>ja);c<span class="pl-k">&lt;</span>m;c<span class="pl-k">++</span>)<span class="pl-c1">B</span>[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">U</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">O</span>.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>ma);c<span class="pl-k">&lt;</span>m;c<span class="pl-k">++</span>)<span class="pl-c1">O</span>[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ea;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">J</span>.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">X</span>);c<span class="pl-k">&lt;</span>m;c<span class="pl-k">++</span>)<span class="pl-c1">J</span>[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>fa;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">Z</span>.<span class="pl-c1">length</span>,</td>
      </tr>
      <tr>
        <td id="L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="LC550" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span><span class="pl-k">*</span>$);c<span class="pl-k">&lt;</span>m;c<span class="pl-k">++</span>)<span class="pl-c1">Z</span>[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>fa;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">ga</span>.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>$);c<span class="pl-k">&lt;</span>m;c<span class="pl-k">++</span>)ga[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">y</span>.<span class="pl-smi">directional</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>ca;<span class="pl-smi">y</span>.<span class="pl-smi">point</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">U</span>;<span class="pl-smi">y</span>.<span class="pl-smi">spot</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>ea;<span class="pl-smi">y</span>.<span class="pl-smi">hemi</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>fa;<span class="pl-smi">y</span>.<span class="pl-smi">ambient</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>q;<span class="pl-smi">y</span>.<span class="pl-smi">ambient</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span>t;<span class="pl-smi">y</span>.<span class="pl-smi">ambient</span>[<span class="pl-c1">2</span>]<span class="pl-k">=</span>x;wa<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}n<span class="pl-k">?</span>(n<span class="pl-k">=</span>Ca,<span class="pl-smi">k</span>.<span class="pl-smi">ambientLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">ambient</span>,<span class="pl-smi">k</span>.<span class="pl-smi">directionalLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">colors</span>,<span class="pl-smi">k</span>.<span class="pl-smi">directionalLightDirection</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">positions</span>,<span class="pl-smi">k</span>.<span class="pl-smi">pointLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">point</span>.<span class="pl-smi">colors</span>,<span class="pl-smi">k</span>.<span class="pl-smi">pointLightPosition</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">point</span>.<span class="pl-smi">positions</span>,<span class="pl-smi">k</span>.<span class="pl-smi">pointLightDistance</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">point</span>.<span class="pl-smi">distances</span>,<span class="pl-smi">k</span>.<span class="pl-smi">pointLightDecay</span>.<span class="pl-c1">value</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="LC551" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">n</span>.<span class="pl-smi">point</span>.<span class="pl-smi">decays</span>,<span class="pl-smi">k</span>.<span class="pl-smi">spotLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">colors</span>,<span class="pl-smi">k</span>.<span class="pl-smi">spotLightPosition</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">positions</span>,<span class="pl-smi">k</span>.<span class="pl-smi">spotLightDistance</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">distances</span>,<span class="pl-smi">k</span>.<span class="pl-smi">spotLightDirection</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">directions</span>,<span class="pl-smi">k</span>.<span class="pl-smi">spotLightAngleCos</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">anglesCos</span>,<span class="pl-smi">k</span>.<span class="pl-smi">spotLightExponent</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">exponents</span>,<span class="pl-smi">k</span>.<span class="pl-smi">spotLightDecay</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">decays</span>,<span class="pl-smi">k</span>.<span class="pl-smi">hemisphereLightSkyColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">skyColors</span>,<span class="pl-smi">k</span>.<span class="pl-smi">hemisphereLightGroundColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">groundColors</span>,<span class="pl-smi">k</span>.<span class="pl-smi">hemisphereLightDirection</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">positions</span>,<span class="pl-en">u</span>(k,<span class="pl-k">!</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-en">u</span>(k,<span class="pl-k">!</span><span class="pl-c1">1</span>)}<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span><span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="LC552" class="blob-code blob-code-inner js-file-line">d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>){<span class="pl-smi">k</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>;<span class="pl-smi">k</span>.<span class="pl-smi">diffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span>;<span class="pl-smi">d</span>.<span class="pl-smi">emissive</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">emissive</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">emissive</span>);<span class="pl-smi">k</span>.<span class="pl-smi">map</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span>;<span class="pl-smi">k</span>.<span class="pl-smi">specularMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">specularMap</span>;<span class="pl-smi">k</span>.<span class="pl-smi">alphaMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">alphaMap</span>;<span class="pl-smi">d</span>.<span class="pl-smi">aoMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">aoMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">aoMap</span>,<span class="pl-smi">k</span>.<span class="pl-smi">aoMapIntensity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">aoMapIntensity</span>);<span class="pl-k">var</span> <span class="pl-c1">P</span>;<span class="pl-smi">d</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">specularMap</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">specularMap</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">emissiveMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">P</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="LC553" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">emissiveMap</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">P</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">P</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">texture</span>),n<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">offset</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">repeat</span>,<span class="pl-smi">k</span>.<span class="pl-smi">offsetRepeat</span>.<span class="pl-c1">value</span>.<span class="pl-c1">set</span>(<span class="pl-smi">n</span>.<span class="pl-c1">x</span>,<span class="pl-smi">n</span>.<span class="pl-c1">y</span>,<span class="pl-c1">P</span>.<span class="pl-c1">x</span>,<span class="pl-c1">P</span>.<span class="pl-c1">y</span>));<span class="pl-smi">k</span>.<span class="pl-smi">envMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span>;<span class="pl-smi">k</span>.<span class="pl-smi">flipEnvMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-smi">k</span>.<span class="pl-smi">reflectivity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-smi">k</span>.<span class="pl-smi">refractionRatio</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">refractionRatio</span>}d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-smi">diffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span>,<span class="pl-smi">k</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LineDashedMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-smi">diffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span>,<span class="pl-smi">k</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>,<span class="pl-smi">k</span>.<span class="pl-smi">dashSize</span>.<span class="pl-c1">value</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="LC554" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">dashSize</span>,<span class="pl-smi">k</span>.<span class="pl-smi">totalSize</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dashSize</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">gapSize</span>,<span class="pl-smi">k</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">scale</span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointsMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-smi">psColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span>,<span class="pl-smi">k</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>,<span class="pl-smi">k</span>.<span class="pl-c1">size</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">size</span>,<span class="pl-smi">k</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">height</span><span class="pl-k">/</span><span class="pl-c1">2</span>,<span class="pl-smi">k</span>.<span class="pl-smi">map</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span>,<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span>.<span class="pl-smi">offset</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span>.<span class="pl-smi">repeat</span>,<span class="pl-smi">k</span>.<span class="pl-smi">offsetRepeat</span>.<span class="pl-c1">value</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">P</span>.<span class="pl-c1">x</span>,<span class="pl-c1">P</span>.<span class="pl-c1">y</span>)))<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-smi">specular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">specular</span>,<span class="pl-smi">k</span>.<span class="pl-smi">shininess</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">d</span>.<span class="pl-smi">shininess</span>,<span class="pl-c1">1E-4</span>),<span class="pl-smi">d</span>.<span class="pl-smi">lightMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">lightMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">lightMap</span>,<span class="pl-smi">k</span>.<span class="pl-smi">lightMapIntensity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">lightMapIntensity</span>),</td>
      </tr>
      <tr>
        <td id="L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="LC555" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">emissiveMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">emissiveMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">emissiveMap</span>),<span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">bumpMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span>,<span class="pl-smi">k</span>.<span class="pl-smi">bumpScale</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpScale</span>),<span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">normalMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span>,<span class="pl-smi">k</span>.<span class="pl-smi">normalScale</span>.<span class="pl-c1">value</span>.<span class="pl-en">copy</span>(<span class="pl-smi">d</span>.<span class="pl-smi">normalScale</span>)),<span class="pl-smi">d</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-smi">displacementMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">displacementMap</span>,<span class="pl-smi">k</span>.<span class="pl-smi">displacementScale</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">displacementScale</span>,<span class="pl-smi">k</span>.<span class="pl-smi">displacementBias</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">displacementBias</span>))<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-smi">mNear</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">near</span>,<span class="pl-smi">k</span>.<span class="pl-smi">mFar</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">far</span>,<span class="pl-smi">k</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="LC556" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">k</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>);<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">d</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">shadowMatrix</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span>d<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">P</span>;a<span class="pl-k">++</span>)n<span class="pl-k">=</span>b[a],<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">n</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>(n <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">||</span>n <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">||</span>n <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>)<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">shadow</span>,n <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">?</span>(<span class="pl-c1">V</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">n</span>.<span class="pl-smi">matrixWorld</span>).<span class="pl-en">negate</span>(),<span class="pl-smi">c</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">identity</span>().<span class="pl-en">setPosition</span>(<span class="pl-c1">V</span>),<span class="pl-smi">k</span>.<span class="pl-smi">shadowDarkness</span>.<span class="pl-c1">value</span>[d]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-smi">darkness</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-smi">shadowDarkness</span>.<span class="pl-c1">value</span>[d]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">darkness</span>,<span class="pl-smi">k</span>.<span class="pl-smi">shadowMatrix</span>.<span class="pl-c1">value</span>[d]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">matrix</span>,<span class="pl-smi">k</span>.<span class="pl-smi">shadowMap</span>.<span class="pl-c1">value</span>[d]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">map</span>,<span class="pl-smi">k</span>.<span class="pl-smi">shadowMapSize</span>.<span class="pl-c1">value</span>[d]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="LC557" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">mapSize</span>,<span class="pl-smi">k</span>.<span class="pl-smi">shadowBias</span>.<span class="pl-c1">value</span>[d]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">bias</span>,d<span class="pl-k">++</span>);b<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">uniformsList</span>;f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>d;f<span class="pl-k">++</span>)<span class="pl-k">if</span>(a<span class="pl-k">=</span>b[f][<span class="pl-c1">0</span>],<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">needsUpdate</span>)<span class="pl-k">switch</span>(k<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">type</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">value</span>,<span class="pl-c1">P</span><span class="pl-k">=</span>b[f][<span class="pl-c1">1</span>],k){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1i<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1f<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1f</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>2f<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform2f</span>(<span class="pl-c1">P</span>,c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>]);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>3f<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform3f</span>(<span class="pl-c1">P</span>,c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>],c[<span class="pl-c1">2</span>]);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>4f<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform4f</span>(<span class="pl-c1">P</span>,c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>],c[<span class="pl-c1">2</span>],c[<span class="pl-c1">3</span>]);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1iv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1iv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>3iv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform3iv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1fv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1fv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>2fv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform2fv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="LC558" class="blob-code blob-code-inner js-file-line"><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>3fv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform3fv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>4fv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform4fv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Matrix3fv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix3fv</span>(<span class="pl-c1">P</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Matrix4fv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-c1">P</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1f</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform2f</span>(<span class="pl-c1">P</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform3f</span>(<span class="pl-c1">P</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform4f</span>(<span class="pl-c1">P</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span>,<span class="pl-smi">c</span>.<span class="pl-smi">w</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform3f</span>(<span class="pl-c1">P</span>,<span class="pl-smi">c</span>.<span class="pl-smi">r</span>,<span class="pl-smi">c</span>.<span class="pl-smi">g</span>,<span class="pl-smi">c</span>.<span class="pl-smi">b</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>iv1<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1iv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>iv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform3iv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform1fv</span>(<span class="pl-c1">P</span>,c);</td>
      </tr>
      <tr>
        <td id="L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="LC559" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniform3fv</span>(<span class="pl-c1">P</span>,c);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v2v<span class="pl-pds">&quot;</span></span>:<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>));m<span class="pl-k">=</span>k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>n;k<span class="pl-k">++</span>,m<span class="pl-k">+=</span><span class="pl-c1">2</span>)<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">y</span>;<span class="pl-smi">r</span>.<span class="pl-en">uniform2fv</span>(<span class="pl-c1">P</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v3v<span class="pl-pds">&quot;</span></span>:<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>));m<span class="pl-k">=</span>k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>n;k<span class="pl-k">++</span>,m<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">z</span>;<span class="pl-smi">r</span>.<span class="pl-en">uniform3fv</span>(<span class="pl-c1">P</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v4v<span class="pl-pds">&quot;</span></span>:<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>));m<span class="pl-k">=</span>k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="LC560" class="blob-code blob-code-inner js-file-line">n;k<span class="pl-k">++</span>,m<span class="pl-k">+=</span><span class="pl-c1">4</span>)<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c[k].<span class="pl-c1">z</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>c[k].<span class="pl-smi">w</span>;<span class="pl-smi">r</span>.<span class="pl-en">uniform4fv</span>(<span class="pl-c1">P</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m3<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix3fv</span>(<span class="pl-c1">P</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">c</span>.<span class="pl-c1">elements</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m3v<span class="pl-pds">&quot;</span></span>:<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">9</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>));k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>n;k<span class="pl-k">++</span>)c[k].<span class="pl-en">flattenToArrayOffset</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>,<span class="pl-c1">9</span><span class="pl-k">*</span>k);<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix3fv</span>(<span class="pl-c1">P</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m4<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-c1">P</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">c</span>.<span class="pl-c1">elements</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m4v<span class="pl-pds">&quot;</span></span>:<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>));k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>n;k<span class="pl-k">++</span>)c[k].<span class="pl-en">flattenToArrayOffset</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>,</td>
      </tr>
      <tr>
        <td id="L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="LC561" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">16</span><span class="pl-k">*</span>k);<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-c1">P</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>:m<span class="pl-k">=</span><span class="pl-en">w</span>();<span class="pl-smi">r</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">P</span>,m);<span class="pl-k">if</span>(<span class="pl-k">!</span>c)<span class="pl-k">continue</span>;c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CubeTexture</span><span class="pl-k">||</span><span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(<span class="pl-smi">c</span>.<span class="pl-smi">image</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">6</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">image</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-en">z</span>(c,m)<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span><span class="pl-k">?</span><span class="pl-en">A</span>(<span class="pl-smi">c</span>.<span class="pl-smi">texture</span>,m)<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span><span class="pl-k">?</span><span class="pl-smi">aa</span>.<span class="pl-en">setTexture</span>(<span class="pl-smi">c</span>.<span class="pl-smi">texture</span>,m)<span class="pl-k">:</span><span class="pl-smi">aa</span>.<span class="pl-en">setTexture</span>(c,m);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>tv<span class="pl-pds">&quot;</span></span>:<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span>[]);k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>n;k<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[k]<span class="pl-k">=</span><span class="pl-en">w</span>();<span class="pl-smi">r</span>.<span class="pl-en">uniform1iv</span>(<span class="pl-c1">P</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_array</span>);k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>n;k<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">value</span>[k],m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_array</span>[k],c<span class="pl-k">&amp;&amp;</span>(c <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="LC562" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CubeTexture</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-smi">image</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">6</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">image</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-en">z</span>(c,m)<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span><span class="pl-k">?</span><span class="pl-smi">aa</span>.<span class="pl-en">setTexture</span>(<span class="pl-smi">c</span>.<span class="pl-smi">texture</span>,m)<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span><span class="pl-k">?</span><span class="pl-en">A</span>(<span class="pl-smi">c</span>.<span class="pl-smi">texture</span>,m)<span class="pl-k">:</span><span class="pl-smi">aa</span>.<span class="pl-en">setTexture</span>(c,m));<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Unknown uniform type: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>k)}}<span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">modelViewMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">e</span>.<span class="pl-smi">modelViewMatrix</span>.<span class="pl-c1">elements</span>);<span class="pl-smi">p</span>.<span class="pl-smi">normalMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix3fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">normalMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">e</span>.<span class="pl-smi">normalMatrix</span>.<span class="pl-c1">elements</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">p</span>.<span class="pl-smi">modelMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">p</span>.<span class="pl-smi">modelMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">e</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>);</td>
      </tr>
      <tr>
        <td id="L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="LC563" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> g}function u(a,b){a.ambientLightColor.needsUpdate=b;a.directionalLightColor.needsUpdate=b;a.directionalLightDirection.needsUpdate=b;a.pointLightColor.needsUpdate=b;a.pointLightPosition.needsUpdate=b;a.pointLightDistance.needsUpdate=b;a.pointLightDecay.needsUpdate=b;a.spotLightColor.needsUpdate=b;a.spotLightPosition.needsUpdate=b;a.spotLightDistance.needsUpdate=b;a.spotLightDirection.needsUpdate=b;a.spotLightAngleCos.needsUpdate=b;a.spotLightExponent.needsUpdate=b;a.spotLightDecay.needsUpdate=</td>
      </tr>
      <tr>
        <td id="L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="LC564" class="blob-code blob-code-inner js-file-line">b;<span class="pl-smi">a</span>.<span class="pl-smi">hemisphereLightSkyColor</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span>b;<span class="pl-smi">a</span>.<span class="pl-smi">hemisphereLightGroundColor</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span>b;<span class="pl-smi">a</span>.<span class="pl-smi">hemisphereLightDirection</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span>b}function w(){var a=ya;a&gt;=ha.maxTextures&amp;&amp;console.warn(&quot;WebGLRenderer: trying to use &quot;+a+&quot; texture units while this GPU supports only &quot;+ha.maxTextures);ya+=1;return a}function D(a,b,c,d){a[b+0]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function x(a,b,c){c?(r.texParameteri(a,r.TEXTURE_WRAP_S,N(b.wrapS)),r.texParameteri(a,r.TEXTURE_WRAP_T,N(b.wrapT)),r.texParameteri(a,r.TEXTURE_MAG_FILTER,</td>
      </tr>
      <tr>
        <td id="L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="LC565" class="blob-code blob-code-inner js-file-line"><span class="pl-en">N</span>(<span class="pl-smi">b</span>.<span class="pl-smi">magFilter</span>)),<span class="pl-smi">r</span>.<span class="pl-en">texParameteri</span>(a,<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_MIN_FILTER</span>,<span class="pl-en">N</span>(<span class="pl-smi">b</span>.<span class="pl-smi">minFilter</span>)))<span class="pl-k">:</span>(<span class="pl-smi">r</span>.<span class="pl-en">texParameteri</span>(a,<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_WRAP_S</span>,<span class="pl-smi">r</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>),<span class="pl-smi">r</span>.<span class="pl-en">texParameteri</span>(a,<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_WRAP_T</span>,<span class="pl-smi">r</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>),<span class="pl-smi">b</span>.<span class="pl-smi">wrapS</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">wrapT</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span><span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.<span class="pl-pds">&quot;</span></span>,b),<span class="pl-smi">r</span>.<span class="pl-en">texParameteri</span>(a,<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_MAG_FILTER</span>,<span class="pl-en">C</span>(<span class="pl-smi">b</span>.<span class="pl-smi">magFilter</span>)),<span class="pl-smi">r</span>.<span class="pl-en">texParameteri</span>(a,<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_MIN_FILTER</span>,<span class="pl-en">C</span>(<span class="pl-smi">b</span>.<span class="pl-smi">minFilter</span>)),</td>
      </tr>
      <tr>
        <td id="L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="LC566" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.<span class="pl-pds">&quot;</span></span>,b));<span class="pl-k">!</span>(c<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>))<span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float_linear<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">HalfFloatType</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float_linear<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||!</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">||</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(b).<span class="pl-smi">__currentAnisotropy</span>)<span class="pl-k">||</span>(<span class="pl-smi">r</span>.<span class="pl-en">texParameterf</span>(a,<span class="pl-smi">c</span>.<span class="pl-c1">TEXTURE_MAX_ANISOTROPY_EXT</span>,</td>
      </tr>
      <tr>
        <td id="L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="LC567" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-smi">anisotropy</span>,<span class="pl-smi">aa</span>.<span class="pl-en">getMaxAnisotropy</span>())),<span class="pl-c1">W</span>.<span class="pl-c1">get</span>(b).<span class="pl-smi">__currentAnisotropy</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">anisotropy</span>)}function B(a,b){if(a.width&gt;b||a.height&gt;b){var c=b/Math.max(a.width,a.height),d=document.createElement(&quot;canvas&quot;);d.width=Math.floor(a.width*c);d.height=Math.floor(a.height*c);d.getContext(&quot;2d&quot;).drawImage(a,0,0,a.width,a.height,0,0,d.width,d.height);console.warn(&quot;THREE.WebGLRenderer: image is too big (&quot;+a.width+&quot;x&quot;+a.height+&quot;). Resized to &quot;+d.width+&quot;x&quot;+d.height,a);return d}return a}function y(a){return THREE.Math.isPowerOfTwo(a.width)&amp;&amp;</td>
      </tr>
      <tr>
        <td id="L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="LC568" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">isPowerOfTwo</span>(<span class="pl-smi">a</span>.<span class="pl-c1">height</span>)}function z(a,b){var c=W.get(a);if(6===a.image.length)if(0&lt;a.version&amp;&amp;c.__version!==a.version){c.__image__webglTextureCube||(a.addEventListener(&quot;dispose&quot;,g),c.__image__webglTextureCube=r.createTexture(),la.textures++);I.activeTexture(r.TEXTURE0+b);I.bindTexture(r.TEXTURE_CUBE_MAP,c.__image__webglTextureCube);r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,a.flipY);for(var d=a instanceof THREE.CompressedTexture,e=a.image[0]instanceof THREE.DataTexture,f=[],h=0;6&gt;h;h++)f[h]=!aa.autoScaleCubemaps||</td>
      </tr>
      <tr>
        <td id="L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="LC569" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">||</span>e<span class="pl-k">?</span>e<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span>[h].<span class="pl-smi">image</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span>[h]<span class="pl-k">:</span><span class="pl-en">B</span>(<span class="pl-smi">a</span>.<span class="pl-smi">image</span>[h],<span class="pl-smi">ha</span>.<span class="pl-smi">maxCubemapSize</span>);<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-en">y</span>(f[<span class="pl-c1">0</span>]),l<span class="pl-k">=</span><span class="pl-en">N</span>(<span class="pl-smi">a</span>.<span class="pl-smi">format</span>),n<span class="pl-k">=</span><span class="pl-en">N</span>(<span class="pl-smi">a</span>.<span class="pl-c1">type</span>);<span class="pl-en">x</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,a,k);<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>h;h<span class="pl-k">++</span>)<span class="pl-k">if</span>(d)<span class="pl-k">for</span>(<span class="pl-k">var</span> m,q<span class="pl-k">=</span>f[h].<span class="pl-smi">mipmaps</span>,p<span class="pl-k">=</span><span class="pl-c1">0</span>,s<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span>;p<span class="pl-k">&lt;</span>s;p<span class="pl-k">++</span>)m<span class="pl-k">=</span>q[p],<span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span><span class="pl-k">?</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">I</span>.<span class="pl-en">getCompressedTextureFormats</span>().<span class="pl-c1">indexOf</span>(l)<span class="pl-k">?</span><span class="pl-c1">I</span>.<span class="pl-en">compressedTexImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>h,p,l,<span class="pl-smi">m</span>.<span class="pl-c1">width</span>,<span class="pl-smi">m</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,<span class="pl-smi">m</span>.<span class="pl-c1">data</span>)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="LC570" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>h,p,l,<span class="pl-smi">m</span>.<span class="pl-c1">width</span>,<span class="pl-smi">m</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,l,n,<span class="pl-smi">m</span>.<span class="pl-c1">data</span>);<span class="pl-k">else</span> e<span class="pl-k">?</span><span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>h,<span class="pl-c1">0</span>,l,f[h].<span class="pl-c1">width</span>,f[h].<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,l,n,f[h].<span class="pl-c1">data</span>)<span class="pl-k">:</span><span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>h,<span class="pl-c1">0</span>,l,l,n,f[h]);<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span>k<span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>);<span class="pl-smi">c</span>.<span class="pl-smi">__version</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">version</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">onUpdate</span>)<span class="pl-smi">a</span>.<span class="pl-en">onUpdate</span>(a)}<span class="pl-k">else</span> <span class="pl-c1">I</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>b),<span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-smi">c</span>.<span class="pl-smi">__image__webglTextureCube</span>)}function A(a,b){I.activeTexture(r.TEXTURE0+b);I.bindTexture(r.TEXTURE_CUBE_MAP,</td>
      </tr>
      <tr>
        <td id="L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="LC571" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a).<span class="pl-smi">__webglTexture</span>)}function J(a,b,c){r.bindFramebuffer(r.FRAMEBUFFER,a);r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,c,W.get(b.texture).__webglTexture,0)}function F(a,b){r.bindRenderbuffer(r.RENDERBUFFER,a);b.depthBuffer&amp;&amp;!b.stencilBuffer?(r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_COMPONENT16,b.width,b.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,a)):b.depthBuffer&amp;&amp;b.stencilBuffer?(r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,b.width,</td>
      </tr>
      <tr>
        <td id="L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="LC572" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-c1">height</span>),<span class="pl-smi">r</span>.<span class="pl-en">framebufferRenderbuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">r</span>.<span class="pl-c1">DEPTH_STENCIL_ATTACHMENT</span>,<span class="pl-smi">r</span>.<span class="pl-c1">RENDERBUFFER</span>,a))<span class="pl-k">:</span><span class="pl-smi">r</span>.<span class="pl-en">renderbufferStorage</span>(<span class="pl-smi">r</span>.<span class="pl-c1">RENDERBUFFER</span>,<span class="pl-smi">r</span>.<span class="pl-c1">RGBA4</span>,<span class="pl-smi">b</span>.<span class="pl-c1">width</span>,<span class="pl-smi">b</span>.<span class="pl-c1">height</span>)}function C(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?r.NEAREST:r.LINEAR}function N(a){var b;if(a===THREE.RepeatWrapping)return r.REPEAT;if(a===THREE.ClampToEdgeWrapping)return r.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return r.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return r.NEAREST;</td>
      </tr>
      <tr>
        <td id="L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="LC573" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapNearestFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">NEAREST_MIPMAP_NEAREST</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapLinearFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">NEAREST_MIPMAP_LINEAR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">LINEAR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapNearestFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">LINEAR_MIPMAP_NEAREST</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">LINEAR_MIPMAP_LINEAR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">UNSIGNED_BYTE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort4444Type</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">UNSIGNED_SHORT_4_4_4_4</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort5551Type</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">UNSIGNED_SHORT_5_5_5_1</span>;</td>
      </tr>
      <tr>
        <td id="L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="LC574" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort565Type</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">UNSIGNED_SHORT_5_6_5</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ByteType</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">BYTE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShortType</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">SHORT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShortType</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">UNSIGNED_SHORT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">IntType</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">INT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedIntType</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">UNSIGNED_INT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">FLOAT</span>;b<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">HalfFloatType</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">HALF_FLOAT_OES</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AlphaFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">RGB</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">RGBA</span>;</td>
      </tr>
      <tr>
        <td id="L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="LC575" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">LUMINANCE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceAlphaFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">LUMINANCE_ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AddEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">FUNC_ADD</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">FUNC_SUBTRACT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ReverseSubtractEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">FUNC_REVERSE_SUBTRACT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ZeroFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">ZERO</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">ONE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">SRC_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">ONE_MINUS_SRC_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">SRC_ALPHA</span>;</td>
      </tr>
      <tr>
        <td id="L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="LC576" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DstAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">DST_ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">ONE_MINUS_DST_ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DstColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">DST_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">ONE_MINUS_DST_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaSaturateFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-c1">SRC_ALPHA_SATURATE</span>;b<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_S3TC_DXT1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGB_S3TC_DXT1_EXT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGBA_S3TC_DXT1_EXT</span>;</td>
      </tr>
      <tr>
        <td id="L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="LC577" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT3_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGBA_S3TC_DXT3_EXT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT5_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGBA_S3TC_DXT5_EXT</span>}b<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_PVRTC_4BPPV1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGB_PVRTC_4BPPV1_IMG</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_PVRTC_2BPPV1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGB_PVRTC_2BPPV1_IMG</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_PVRTC_4BPPV1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGBA_PVRTC_4BPPV1_IMG</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_PVRTC_2BPPV1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">COMPRESSED_RGBA_PVRTC_2BPPV1_IMG</span>}b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="LC578" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_blend_minmax<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MinEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">MIN_EXT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MaxEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">MAX_EXT</span>}<span class="pl-k">return</span> <span class="pl-c1">0</span>}<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-c1">REVISION</span>);a<span class="pl-k">=</span>a<span class="pl-k">||</span>{};<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">canvas</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">canvas</span><span class="pl-k">:</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">context</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">context</span><span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">width</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">height</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">alpha</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">alpha</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">depth</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">depth</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">stencil</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">stencil</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">antialias</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">antialias</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">premultipliedAlpha</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">premultipliedAlpha</span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="LC579" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>,ia<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">preserveDrawingBuffer</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">preserveDrawingBuffer</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>),<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-c1">0</span>,da<span class="pl-k">=</span>[],ca<span class="pl-k">=</span>[],ga<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span>[],fa<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,ma<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">8</span>),ea<span class="pl-k">=</span>[],ja<span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">domElement</span><span class="pl-k">=</span><span class="pl-c1">L</span>;<span class="pl-c1">this</span>.<span class="pl-smi">context</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">sortObjects</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClearStencil</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClearDepth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClearColor</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClear</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">gammaFactor</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">gammaOutput</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxMorphTargets</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxMorphNormals</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoScaleCubemaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> aa<span class="pl-k">=</span><span class="pl-c1">this</span>,Aa<span class="pl-k">=</span><span class="pl-c1">null</span>,za<span class="pl-k">=</span><span class="pl-c1">null</span>,ta<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,sa<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,ra<span class="pl-k">=</span><span class="pl-c1">null</span>,ya<span class="pl-k">=</span><span class="pl-c1">0</span>,na<span class="pl-k">=</span><span class="pl-c1">0</span>,oa<span class="pl-k">=</span><span class="pl-c1">0</span>,pa<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">width</span>,qa<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">height</span>,</td>
      </tr>
      <tr>
        <td id="L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="LC580" class="blob-code blob-code-inner js-file-line">Da<span class="pl-k">=</span><span class="pl-c1">0</span>,Ea<span class="pl-k">=</span><span class="pl-c1">0</span>,Ba<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,xa<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,wa<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,Ca<span class="pl-k">=</span>{ambient<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],directional<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[]},point<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[],distances<span class="pl-k">:</span>[],decays<span class="pl-k">:</span>[]},spot<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[],distances<span class="pl-k">:</span>[],directions<span class="pl-k">:</span>[],anglesCos<span class="pl-k">:</span>[],exponents<span class="pl-k">:</span>[],decays<span class="pl-k">:</span>[]},hemi<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,skyColors<span class="pl-k">:</span>[],groundColors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[]}},la<span class="pl-k">=</span>{geometries<span class="pl-k">:</span><span class="pl-c1">0</span>,textures<span class="pl-k">:</span><span class="pl-c1">0</span>},ka<span class="pl-k">=</span>{calls<span class="pl-k">:</span><span class="pl-c1">0</span>,vertices<span class="pl-k">:</span><span class="pl-c1">0</span>,faces<span class="pl-k">:</span><span class="pl-c1">0</span>,points<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-smi">info</span><span class="pl-k">=</span>{render<span class="pl-k">:</span>ka,memory<span class="pl-k">:</span>la,programs<span class="pl-k">:</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="LC581" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> r;<span class="pl-k">try</span>{<span class="pl-c1">O</span><span class="pl-k">=</span>{alpha<span class="pl-k">:</span><span class="pl-c1">O</span>,depth<span class="pl-k">:</span><span class="pl-c1">T</span>,stencil<span class="pl-k">:</span><span class="pl-c1">H</span>,antialias<span class="pl-k">:</span><span class="pl-c1">R</span>,premultipliedAlpha<span class="pl-k">:</span><span class="pl-c1">G</span>,preserveDrawingBuffer<span class="pl-k">:</span>ia};r<span class="pl-k">=</span><span class="pl-c1">Q</span><span class="pl-k">||</span><span class="pl-c1">L</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>webgl<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">O</span>)<span class="pl-k">||</span><span class="pl-c1">L</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>experimental-webgl<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">O</span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>r){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">L</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>webgl<span class="pl-pds">&quot;</span></span>))<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>Error creating WebGL context with your selected attributes.<span class="pl-pds">&quot;</span></span>;<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>Error creating WebGL context.<span class="pl-pds">&quot;</span></span>;}<span class="pl-c1">L</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>webglcontextlost<span class="pl-pds">&quot;</span></span>,e,<span class="pl-k">!</span><span class="pl-c1">1</span>)}<span class="pl-k">catch</span>(Fa){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>Fa)}<span class="pl-k">var</span> <span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLExtensions</span>(r);<span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float_linear<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="LC582" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float_linear<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_standard_derivatives<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_element_index_uint<span class="pl-pds">&quot;</span></span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-smi">MaxIndex</span><span class="pl-k">=</span><span class="pl-c1">4294967296</span>);<span class="pl-k">var</span> ha<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLCapabilities</span>(r,<span class="pl-c1">S</span>,a),<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLState</span>(r,<span class="pl-c1">S</span>,<span class="pl-c1">N</span>),<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLProperties</span>,va<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLObjects</span>(r,<span class="pl-c1">W</span>,<span class="pl-c1">this</span>.<span class="pl-smi">info</span>),ua<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLPrograms</span>(<span class="pl-c1">this</span>,ha);<span class="pl-c1">this</span>.<span class="pl-smi">info</span>.<span class="pl-smi">programs</span><span class="pl-k">=</span><span class="pl-smi">ua</span>.<span class="pl-smi">programs</span>;<span class="pl-k">var</span> Ga<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLBufferRenderer</span>(r,<span class="pl-c1">S</span>,ka),Ha<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLIndexedBufferRenderer</span>(r,</td>
      </tr>
      <tr>
        <td id="L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="LC583" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">S</span>,ka);<span class="pl-en">c</span>();<span class="pl-c1">this</span>.<span class="pl-smi">context</span><span class="pl-k">=</span>r;<span class="pl-c1">this</span>.<span class="pl-smi">capabilities</span><span class="pl-k">=</span>ha;<span class="pl-c1">this</span>.<span class="pl-smi">extensions</span><span class="pl-k">=</span><span class="pl-c1">S</span>;<span class="pl-c1">this</span>.<span class="pl-smi">state</span><span class="pl-k">=</span><span class="pl-c1">I</span>;<span class="pl-k">var</span> $<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLShadowMap</span>(<span class="pl-c1">this</span>,da,va);<span class="pl-c1">this</span>.<span class="pl-smi">shadowMap</span><span class="pl-k">=</span>$;<span class="pl-k">var</span> Ia<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SpritePlugin</span>(<span class="pl-c1">this</span>,ea),Ja<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LensFlarePlugin</span>(<span class="pl-c1">this</span>,ja);<span class="pl-c1">this</span>.<span class="pl-en">getContext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> r};<span class="pl-c1">this</span>.<span class="pl-en">getContextAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-smi">r</span>.<span class="pl-en">getContextAttributes</span>()};<span class="pl-c1">this</span>.<span class="pl-en">forceContextLoss</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_lose_context<span class="pl-pds">&quot;</span></span>).<span class="pl-en">loseContext</span>()};<span class="pl-c1">this</span>.<span class="pl-en">getMaxAnisotropy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">return</span> a;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="LC584" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> a<span class="pl-k">=</span><span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">b</span>.<span class="pl-c1">MAX_TEXTURE_MAX_ANISOTROPY_EXT</span>)<span class="pl-k">:</span><span class="pl-c1">0</span>}}();<span class="pl-c1">this</span>.<span class="pl-en">getPrecision</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-smi">ha</span>.<span class="pl-smi">precision</span>};<span class="pl-c1">this</span>.<span class="pl-en">getPixelRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">E</span>};<span class="pl-c1">this</span>.<span class="pl-en">setPixelRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">E</span><span class="pl-k">=</span>a)};<span class="pl-c1">this</span>.<span class="pl-en">getSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>{width<span class="pl-k">:</span><span class="pl-c1">M</span>,height<span class="pl-k">:</span><span class="pl-c1">K</span>}};<span class="pl-c1">this</span>.<span class="pl-en">setSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">M</span><span class="pl-k">=</span>a;<span class="pl-c1">K</span><span class="pl-k">=</span>b;<span class="pl-c1">L</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">E</span>;<span class="pl-c1">L</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">E</span>;<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">L</span>.<span class="pl-c1">style</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>px<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">L</span>.<span class="pl-c1">style</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>px<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">setViewport</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b)};<span class="pl-c1">this</span>.<span class="pl-en">setViewport</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){na<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">E</span>;oa<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">E</span>;pa<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">E</span>;qa<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-c1">E</span>;<span class="pl-smi">r</span>.<span class="pl-en">viewport</span>(na,oa,pa,qa)};<span class="pl-c1">this</span>.<span class="pl-smi">getViewport</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="LC585" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>na<span class="pl-k">/</span><span class="pl-c1">E</span>;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>oa<span class="pl-k">/</span><span class="pl-c1">E</span>;<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>pa<span class="pl-k">/</span><span class="pl-c1">E</span>;<span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>qa<span class="pl-k">/</span><span class="pl-c1">E</span>};<span class="pl-c1">this</span>.<span class="pl-en">setScissor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-smi">r</span>.<span class="pl-en">scissor</span>(a<span class="pl-k">*</span><span class="pl-c1">E</span>,b<span class="pl-k">*</span><span class="pl-c1">E</span>,c<span class="pl-k">*</span><span class="pl-c1">E</span>,d<span class="pl-k">*</span><span class="pl-c1">E</span>)};<span class="pl-c1">this</span>.<span class="pl-en">enableScissorTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">I</span>.<span class="pl-en">setScissorTest</span>(a)};<span class="pl-c1">this</span>.<span class="pl-en">getClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">U</span>};<span class="pl-c1">this</span>.<span class="pl-en">setClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-c1">U</span>.<span class="pl-c1">set</span>(a);<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-en">b</span>(<span class="pl-c1">U</span>.<span class="pl-smi">r</span>,<span class="pl-c1">U</span>.<span class="pl-smi">g</span>,<span class="pl-c1">U</span>.<span class="pl-smi">b</span>,<span class="pl-c1">X</span>)};<span class="pl-c1">this</span>.<span class="pl-en">getClearAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">X</span>};<span class="pl-c1">this</span>.<span class="pl-en">setClearAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">X</span><span class="pl-k">=</span>a;<span class="pl-en">b</span>(<span class="pl-c1">U</span>.<span class="pl-smi">r</span>,<span class="pl-c1">U</span>.<span class="pl-smi">g</span>,<span class="pl-c1">U</span>.<span class="pl-smi">b</span>,<span class="pl-c1">X</span>)};<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">||</span>a)d<span class="pl-k">|=</span><span class="pl-smi">r</span>.<span class="pl-c1">COLOR_BUFFER_BIT</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span>b)d<span class="pl-k">|=</span><span class="pl-smi">r</span>.<span class="pl-c1">DEPTH_BUFFER_BIT</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="LC586" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">||</span>c)d<span class="pl-k">|=</span><span class="pl-smi">r</span>.<span class="pl-c1">STENCIL_BUFFER_BIT</span>;<span class="pl-smi">r</span>.<span class="pl-c1">clear</span>(d)};<span class="pl-c1">this</span>.<span class="pl-en">clearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">r</span>.<span class="pl-c1">clear</span>(<span class="pl-smi">r</span>.<span class="pl-c1">COLOR_BUFFER_BIT</span>)};<span class="pl-c1">this</span>.<span class="pl-en">clearDepth</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">r</span>.<span class="pl-c1">clear</span>(<span class="pl-smi">r</span>.<span class="pl-c1">DEPTH_BUFFER_BIT</span>)};<span class="pl-c1">this</span>.<span class="pl-en">clearStencil</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">r</span>.<span class="pl-c1">clear</span>(<span class="pl-smi">r</span>.<span class="pl-c1">STENCIL_BUFFER_BIT</span>)};<span class="pl-c1">this</span>.<span class="pl-en">clearTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-en">setRenderTarget</span>(a);<span class="pl-c1">this</span>.<span class="pl-c1">clear</span>(b,c,d)};<span class="pl-c1">this</span>.<span class="pl-smi">resetGLState</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">L</span>.<span class="pl-c1">removeEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>webglcontextlost<span class="pl-pds">&quot;</span></span>,e,<span class="pl-k">!</span><span class="pl-c1">1</span>)};<span class="pl-c1">this</span>.<span class="pl-en">renderBufferImmediate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">I</span>.<span class="pl-en">initAttributes</span>();<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a);<span class="pl-smi">a</span>.<span class="pl-smi">hasPositions</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">d</span>.<span class="pl-smi">position</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">position</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="LC587" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-en">createBuffer</span>());<span class="pl-smi">a</span>.<span class="pl-smi">hasNormals</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">d</span>.<span class="pl-smi">normal</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createBuffer</span>());<span class="pl-smi">a</span>.<span class="pl-smi">hasUvs</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">d</span>.<span class="pl-smi">uv</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">uv</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createBuffer</span>());<span class="pl-smi">a</span>.<span class="pl-smi">hasColors</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createBuffer</span>());b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getAttributes</span>();<span class="pl-smi">a</span>.<span class="pl-smi">hasPositions</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">d</span>.<span class="pl-smi">position</span>),<span class="pl-smi">r</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">positionArray</span>,<span class="pl-smi">r</span>.<span class="pl-c1">DYNAMIC_DRAW</span>),<span class="pl-c1">I</span>.<span class="pl-en">enableAttribute</span>(<span class="pl-smi">b</span>.<span class="pl-smi">position</span>),<span class="pl-smi">r</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">position</span>,<span class="pl-c1">3</span>,<span class="pl-smi">r</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hasNormals</span>){<span class="pl-smi">r</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">d</span>.<span class="pl-smi">normal</span>);<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">shading</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FlatShading</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="LC588" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">count</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">+=</span><span class="pl-c1">9</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normalArray</span>,h<span class="pl-k">=</span>(g[e<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">6</span>])<span class="pl-k">/</span><span class="pl-c1">3</span>,k<span class="pl-k">=</span>(g[e<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">7</span>])<span class="pl-k">/</span><span class="pl-c1">3</span>,l<span class="pl-k">=</span>(g[e<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">8</span>])<span class="pl-k">/</span><span class="pl-c1">3</span>;g[e<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>h;g[e<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>k;g[e<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>l;g[e<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>h;g[e<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>k;g[e<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>l;g[e<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>h;g[e<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>k;g[e<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>l}<span class="pl-smi">r</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">normalArray</span>,<span class="pl-smi">r</span>.<span class="pl-c1">DYNAMIC_DRAW</span>);<span class="pl-c1">I</span>.<span class="pl-en">enableAttribute</span>(<span class="pl-smi">b</span>.<span class="pl-smi">normal</span>);<span class="pl-smi">r</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">3</span>,<span class="pl-smi">r</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}<span class="pl-smi">a</span>.<span class="pl-smi">hasUvs</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">d</span>.<span class="pl-smi">uv</span>),<span class="pl-smi">r</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">uvArray</span>,<span class="pl-smi">r</span>.<span class="pl-c1">DYNAMIC_DRAW</span>),<span class="pl-c1">I</span>.<span class="pl-en">enableAttribute</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv</span>),<span class="pl-smi">r</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv</span>,<span class="pl-c1">2</span>,<span class="pl-smi">r</span>.<span class="pl-c1">FLOAT</span>,</td>
      </tr>
      <tr>
        <td id="L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="LC589" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-smi">a</span>.<span class="pl-smi">hasColors</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">d</span>.<span class="pl-c1">color</span>),<span class="pl-smi">r</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">colorArray</span>,<span class="pl-smi">r</span>.<span class="pl-c1">DYNAMIC_DRAW</span>),<span class="pl-c1">I</span>.<span class="pl-en">enableAttribute</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span>),<span class="pl-smi">r</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span>,<span class="pl-c1">3</span>,<span class="pl-smi">r</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">I</span>.<span class="pl-en">disableUnusedAttributes</span>();<span class="pl-smi">r</span>.<span class="pl-en">drawArrays</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-smi">count</span>);<span class="pl-smi">a</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">renderBufferDirect</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-en">t</span>(e);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-en">v</span>(a,b,c,e,f),l<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">id</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-c1">id</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-smi">wireframe</span>;a<span class="pl-k">!==</span>sa<span class="pl-k">&amp;&amp;</span>(sa<span class="pl-k">=</span>a,l<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">morphTargetInfluences</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b){a<span class="pl-k">=</span>[];c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>l;c<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="LC590" class="blob-code blob-code-inner js-file-line">b[c];<span class="pl-smi">a</span>.<span class="pl-c1">push</span>([n,c])}<span class="pl-smi">a</span>.<span class="pl-c1">sort</span>(k);<span class="pl-c1">8</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">8</span>);<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">morphAttributes</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>l;c<span class="pl-k">++</span>)n<span class="pl-k">=</span>a[c],ma[c]<span class="pl-k">=</span>n[<span class="pl-c1">0</span>],<span class="pl-c1">0</span><span class="pl-k">!==</span>n[<span class="pl-c1">0</span>]<span class="pl-k">?</span>(b<span class="pl-k">=</span>n[<span class="pl-c1">1</span>],<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c,<span class="pl-smi">m</span>.<span class="pl-smi">position</span>[b]),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">m</span>.<span class="pl-smi">normal</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c,<span class="pl-smi">m</span>.<span class="pl-smi">normal</span>[b]))<span class="pl-k">:</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">removeAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">removeAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c));a<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getUniforms</span>();<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargetInfluences</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">uniform1fv</span>(<span class="pl-smi">a</span>.<span class="pl-smi">morphTargetInfluences</span>,ma);l<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="LC591" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>}b<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">index</span>;c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-en">getWireframeAttribute</span>(d));<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>(a<span class="pl-k">=</span>Ha,<span class="pl-smi">a</span>.<span class="pl-en">setIndex</span>(b))<span class="pl-k">:</span>a<span class="pl-k">=</span>Ga;<span class="pl-k">if</span>(l){a<span class="pl-k">:</span>{<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,q;<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span><span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">null</span><span class="pl-k">===</span>q)){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span> a}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>l<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">I</span>.<span class="pl-en">initAttributes</span>();<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">attributes</span>,h<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getAttributes</span>(),m<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">defaultAttributeValues</span>,</td>
      </tr>
      <tr>
        <td id="L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="LC592" class="blob-code blob-code-inner js-file-line">p;<span class="pl-k">for</span>(p <span class="pl-k">in</span> h){<span class="pl-k">var</span> s<span class="pl-k">=</span>h[p];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>s){<span class="pl-k">var</span> u<span class="pl-k">=</span>n[p];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>u){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">itemSize</span>,x<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-en">getAttributeBuffer</span>(u);<span class="pl-k">if</span>(u <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBufferAttribute</span>){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">data</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-smi">stride</span>,u<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">offset</span>;<span class="pl-c1">F</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedInterleavedBuffer</span><span class="pl-k">?</span>(<span class="pl-c1">I</span>.<span class="pl-en">enableAttributeAndDivisor</span>(s,<span class="pl-c1">F</span>.<span class="pl-smi">meshPerAttribute</span>,q),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-smi">maxInstancedCount</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">maxInstancedCount</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-smi">meshPerAttribute</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">count</span>))<span class="pl-k">:</span><span class="pl-c1">I</span>.<span class="pl-en">enableAttribute</span>(s);<span class="pl-smi">r</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,x);<span class="pl-smi">r</span>.<span class="pl-en">vertexAttribPointer</span>(s,w,<span class="pl-smi">r</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,(l<span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">+</span>u)<span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>)}<span class="pl-k">else</span> u <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="LC593" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferAttribute</span><span class="pl-k">?</span>(<span class="pl-c1">I</span>.<span class="pl-en">enableAttributeAndDivisor</span>(s,<span class="pl-smi">u</span>.<span class="pl-smi">meshPerAttribute</span>,q),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-smi">maxInstancedCount</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">maxInstancedCount</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">meshPerAttribute</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-smi">count</span>))<span class="pl-k">:</span><span class="pl-c1">I</span>.<span class="pl-en">enableAttribute</span>(s),<span class="pl-smi">r</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ARRAY_BUFFER</span>,x),<span class="pl-smi">r</span>.<span class="pl-en">vertexAttribPointer</span>(s,w,<span class="pl-smi">r</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,l<span class="pl-k">*</span>w<span class="pl-k">*</span><span class="pl-c1">4</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>m<span class="pl-k">&amp;&amp;</span>(w<span class="pl-k">=</span>m[p],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>w))<span class="pl-k">switch</span>(<span class="pl-smi">w</span>.<span class="pl-c1">length</span>){<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-smi">r</span>.<span class="pl-en">vertexAttrib2fv</span>(s,w);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span>:<span class="pl-smi">r</span>.<span class="pl-en">vertexAttrib3fv</span>(s,w);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">4</span>:<span class="pl-smi">r</span>.<span class="pl-en">vertexAttrib4fv</span>(s,w);<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-smi">r</span>.<span class="pl-en">vertexAttrib1fv</span>(s,w)}}}<span class="pl-c1">I</span>.<span class="pl-en">disableUnusedAttributes</span>()}<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,</td>
      </tr>
      <tr>
        <td id="L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="LC594" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">va</span>.<span class="pl-en">getAttributeBuffer</span>(b))}q<span class="pl-k">=</span><span class="pl-c1">Infinity</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>q<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">count</span><span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">count</span>);p<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">drawRange</span>.<span class="pl-c1">start</span>;b<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">drawRange</span>.<span class="pl-smi">count</span>;c<span class="pl-k">=</span><span class="pl-c1">null</span><span class="pl-k">!==</span>g<span class="pl-k">?</span><span class="pl-smi">g</span>.<span class="pl-c1">start</span><span class="pl-k">:</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span><span class="pl-c1">null</span><span class="pl-k">!==</span>g<span class="pl-k">?</span><span class="pl-smi">g</span>.<span class="pl-smi">count</span><span class="pl-k">:</span><span class="pl-c1">Infinity</span>;g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,p,c);q<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">0</span><span class="pl-k">+</span>q,p<span class="pl-k">+</span>b,c<span class="pl-k">+</span>l)<span class="pl-k">-</span><span class="pl-c1">1</span>;q<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,q<span class="pl-k">-</span>g<span class="pl-k">+</span><span class="pl-c1">1</span>);f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">?</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span>(<span class="pl-c1">I</span>.<span class="pl-en">setLineWidth</span>(<span class="pl-smi">e</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">*</span><span class="pl-c1">E</span>),<span class="pl-smi">a</span>.<span class="pl-en">setMode</span>(<span class="pl-smi">r</span>.<span class="pl-c1">LINES</span>))<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">setMode</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TRIANGLES</span>),d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">InstancedBufferGeometry</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">maxInstancedCount</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-en">renderInstances</span>(d)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">render</span>(g,q))<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span><span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">linewidth</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="LC595" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">1</span>),<span class="pl-c1">I</span>.<span class="pl-en">setLineWidth</span>(d<span class="pl-k">*</span><span class="pl-c1">E</span>),f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-en">setMode</span>(<span class="pl-smi">r</span>.<span class="pl-c1">LINES</span>)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">setMode</span>(<span class="pl-smi">r</span>.<span class="pl-c1">LINE_STRIP</span>),<span class="pl-smi">a</span>.<span class="pl-en">render</span>(g,q))<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">setMode</span>(<span class="pl-smi">r</span>.<span class="pl-c1">POINTS</span>),<span class="pl-smi">a</span>.<span class="pl-en">render</span>(g,q))};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>)<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;sa<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;ta<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;ra<span class="pl-k">=</span><span class="pl-c1">null</span>;wa<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">autoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>);</td>
      </tr>
      <tr>
        <td id="L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="LC596" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">xa</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>);<span class="pl-smi">Ba</span>.<span class="pl-en">setFromMatrix</span>(xa);<span class="pl-smi">da</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;fa<span class="pl-k">=</span>ga<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-smi">ea</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">ja</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-en">q</span>(a,b);<span class="pl-smi">ca</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>ga<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-c1">Z</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>fa<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">sortObjects</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">ca</span>.<span class="pl-c1">sort</span>(m),<span class="pl-c1">Z</span>.<span class="pl-c1">sort</span>(p));<span class="pl-smi">$</span>.<span class="pl-en">render</span>(a);<span class="pl-smi">ka</span>.<span class="pl-smi">calls</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">ka</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">ka</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">ka</span>.<span class="pl-smi">points</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">setRenderTarget</span>(c);(<span class="pl-c1">this</span>.<span class="pl-smi">autoClear</span><span class="pl-k">||</span>d)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">clear</span>(<span class="pl-c1">this</span>.<span class="pl-smi">autoClearColor</span>,<span class="pl-c1">this</span>.<span class="pl-smi">autoClearDepth</span>,<span class="pl-c1">this</span>.<span class="pl-smi">autoClearStencil</span>);<span class="pl-smi">a</span>.<span class="pl-smi">overrideMaterial</span><span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">overrideMaterial</span>,<span class="pl-en">s</span>(ca,b,da,e,d),<span class="pl-en">s</span>(<span class="pl-c1">Z</span>,b,da,e,d))<span class="pl-k">:</span>(<span class="pl-c1">I</span>.<span class="pl-en">setBlending</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">NoBlending</span>),<span class="pl-en">s</span>(ca,b,da,e),</td>
      </tr>
      <tr>
        <td id="L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="LC597" class="blob-code blob-code-inner js-file-line"><span class="pl-en">s</span>(<span class="pl-c1">Z</span>,b,da,e));<span class="pl-smi">Ia</span>.<span class="pl-en">render</span>(a,b);<span class="pl-smi">Ja</span>.<span class="pl-en">render</span>(a,b,Da,Ea);c<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">texture</span>,b<span class="pl-k">=</span><span class="pl-en">y</span>(c),<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span><span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span><span class="pl-k">:</span><span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,c<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(<span class="pl-smi">c</span>.<span class="pl-smi">texture</span>).<span class="pl-smi">__webglTexture</span>,<span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(a,c),<span class="pl-smi">r</span>.<span class="pl-en">generateMipmap</span>(a),<span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(a,<span class="pl-c1">null</span>)));<span class="pl-c1">I</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">I</span>.<span class="pl-en">setDepthWrite</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">I</span>.<span class="pl-en">setColorWrite</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>)}};<span class="pl-c1">this</span>.<span class="pl-en">setFaceCulling</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceNone</span><span class="pl-k">?</span><span class="pl-c1">I</span>.<span class="pl-en">disable</span>(<span class="pl-smi">r</span>.<span class="pl-c1">CULL_FACE</span>)<span class="pl-k">:</span>(b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FrontFaceDirectionCW</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="LC598" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">r</span>.<span class="pl-c1">CW</span>)<span class="pl-k">:</span><span class="pl-smi">r</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">r</span>.<span class="pl-c1">CCW</span>),a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceBack</span><span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">r</span>.<span class="pl-c1">BACK</span>)<span class="pl-k">:</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceFront</span><span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRONT</span>)<span class="pl-k">:</span><span class="pl-smi">r</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRONT_AND_BACK</span>),<span class="pl-c1">I</span>.<span class="pl-en">enable</span>(<span class="pl-smi">r</span>.<span class="pl-c1">CULL_FACE</span>))};<span class="pl-c1">this</span>.<span class="pl-en">setTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">version</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">__version</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">version</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture marked for update but image is undefined<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-c1">complete</span>)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture marked for update but image is incomplete<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">else</span>{<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="LC599" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,g),<span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createTexture</span>(),<span class="pl-smi">la</span>.<span class="pl-smi">textures</span><span class="pl-k">++</span>);<span class="pl-c1">I</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>b);<span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span>);<span class="pl-smi">r</span>.<span class="pl-en">pixelStorei</span>(<span class="pl-smi">r</span>.<span class="pl-c1">UNPACK_FLIP_Y_WEBGL</span>,<span class="pl-smi">a</span>.<span class="pl-smi">flipY</span>);<span class="pl-smi">r</span>.<span class="pl-en">pixelStorei</span>(<span class="pl-smi">r</span>.<span class="pl-c1">UNPACK_PREMULTIPLY_ALPHA_WEBGL</span>,<span class="pl-smi">a</span>.<span class="pl-smi">premultiplyAlpha</span>);<span class="pl-smi">r</span>.<span class="pl-en">pixelStorei</span>(<span class="pl-smi">r</span>.<span class="pl-c1">UNPACK_ALIGNMENT</span>,<span class="pl-smi">a</span>.<span class="pl-smi">unpackAlignment</span>);<span class="pl-smi">a</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-en">B</span>(<span class="pl-smi">a</span>.<span class="pl-smi">image</span>,<span class="pl-smi">ha</span>.<span class="pl-smi">maxTextureSize</span>);<span class="pl-k">if</span>((<span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="LC600" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>)<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-en">y</span>(<span class="pl-smi">a</span>.<span class="pl-smi">image</span>)){d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span>;<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">HTMLImageElement</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">HTMLCanvasElement</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">e</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">nearestPowerOfTwo</span>(<span class="pl-smi">d</span>.<span class="pl-c1">width</span>);<span class="pl-smi">e</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">nearestPowerOfTwo</span>(<span class="pl-smi">d</span>.<span class="pl-c1">height</span>);<span class="pl-smi">e</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).<span class="pl-en">drawImage</span>(d,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-smi">e</span>.<span class="pl-c1">width</span>,<span class="pl-smi">e</span>.<span class="pl-c1">height</span>);<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: image is not power of two (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">width</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">height</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>). Resized to <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-c1">width</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-c1">height</span>,d);d<span class="pl-k">=</span>e}<span class="pl-smi">a</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>d}<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span>,d<span class="pl-k">=</span><span class="pl-en">y</span>(f),e<span class="pl-k">=</span><span class="pl-en">N</span>(<span class="pl-smi">a</span>.<span class="pl-smi">format</span>),h<span class="pl-k">=</span><span class="pl-en">N</span>(<span class="pl-smi">a</span>.<span class="pl-c1">type</span>);</td>
      </tr>
      <tr>
        <td id="L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="LC601" class="blob-code blob-code-inner js-file-line"><span class="pl-en">x</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,a,d);<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>;<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span>)<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>d){<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)f<span class="pl-k">=</span>k[l],<span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,l,e,<span class="pl-smi">f</span>.<span class="pl-c1">width</span>,<span class="pl-smi">f</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,e,h,<span class="pl-smi">f</span>.<span class="pl-c1">data</span>);<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,e,<span class="pl-smi">f</span>.<span class="pl-c1">width</span>,<span class="pl-smi">f</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,e,h,<span class="pl-smi">f</span>.<span class="pl-c1">data</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>)<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)f<span class="pl-k">=</span>k[l],<span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span><span class="pl-k">?</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">I</span>.<span class="pl-en">getCompressedTextureFormats</span>().<span class="pl-c1">indexOf</span>(e)<span class="pl-k">?</span><span class="pl-c1">I</span>.<span class="pl-en">compressedTexImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,l,e,<span class="pl-smi">f</span>.<span class="pl-c1">width</span>,</td>
      </tr>
      <tr>
        <td id="L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="LC602" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,<span class="pl-smi">f</span>.<span class="pl-c1">data</span>)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span><span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,l,e,<span class="pl-smi">f</span>.<span class="pl-c1">width</span>,<span class="pl-smi">f</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,e,h,<span class="pl-smi">f</span>.<span class="pl-c1">data</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>d){l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)f<span class="pl-k">=</span>k[l],<span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,l,e,e,h,f);<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,e,e,h,<span class="pl-smi">a</span>.<span class="pl-smi">image</span>);<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>);<span class="pl-smi">c</span>.<span class="pl-smi">__version</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">version</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">onUpdate</span>)<span class="pl-smi">a</span>.<span class="pl-en">onUpdate</span>(a)}}<span class="pl-k">else</span> <span class="pl-c1">I</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>b),<span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,</td>
      </tr>
      <tr>
        <td id="L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="LC603" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span>)};<span class="pl-c1">this</span>.<span class="pl-en">setRenderTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>;<span class="pl-k">if</span>(a<span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a).<span class="pl-smi">__webglFramebuffer</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a),d<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">a</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,f);<span class="pl-smi">d</span>.<span class="pl-smi">__webglTexture</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createTexture</span>();<span class="pl-smi">la</span>.<span class="pl-smi">textures</span><span class="pl-k">++</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-en">y</span>(a),g<span class="pl-k">=</span><span class="pl-en">N</span>(<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">format</span>),h<span class="pl-k">=</span><span class="pl-en">N</span>(<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>.<span class="pl-c1">type</span>);<span class="pl-k">if</span>(b){<span class="pl-smi">c</span>.<span class="pl-smi">__webglFramebuffer</span><span class="pl-k">=</span>[];<span class="pl-smi">c</span>.<span class="pl-smi">__webglRenderbuffer</span><span class="pl-k">=</span>[];<span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-smi">d</span>.<span class="pl-smi">__webglTexture</span>);</td>
      </tr>
      <tr>
        <td id="L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="LC604" class="blob-code blob-code-inner js-file-line"><span class="pl-en">x</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>,e);<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-smi">__webglFramebuffer</span>[d]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createFramebuffer</span>(),<span class="pl-smi">c</span>.<span class="pl-smi">__webglRenderbuffer</span>[d]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createRenderbuffer</span>(),<span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>d,<span class="pl-c1">0</span>,g,<span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,g,h,<span class="pl-c1">null</span>),<span class="pl-en">J</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglFramebuffer</span>[d],a,<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>d),<span class="pl-en">F</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglRenderbuffer</span>[d],a);<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>)}<span class="pl-k">else</span> <span class="pl-smi">c</span>.<span class="pl-smi">__webglFramebuffer</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">createFramebuffer</span>(),<span class="pl-smi">c</span>.<span class="pl-smi">__webglRenderbuffer</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shareDepthFrom</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">shareDepthFrom</span>.<span class="pl-smi">__webglRenderbuffer</span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="LC605" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-en">createRenderbuffer</span>(),<span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">d</span>.<span class="pl-smi">__webglTexture</span>),<span class="pl-en">x</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>,e),<span class="pl-c1">I</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,g,<span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,g,h,<span class="pl-c1">null</span>),<span class="pl-en">J</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglFramebuffer</span>,a,<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>),<span class="pl-smi">a</span>.<span class="pl-smi">shareDepthFrom</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-en">framebufferRenderbuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">r</span>.<span class="pl-c1">DEPTH_ATTACHMENT</span>,<span class="pl-smi">r</span>.<span class="pl-c1">RENDERBUFFER</span>,<span class="pl-smi">c</span>.<span class="pl-smi">__webglRenderbuffer</span>)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">framebufferRenderbuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">r</span>.<span class="pl-c1">DEPTH_STENCIL_ATTACHMENT</span>,<span class="pl-smi">r</span>.<span class="pl-c1">RENDERBUFFER</span>,<span class="pl-smi">c</span>.<span class="pl-smi">__webglRenderbuffer</span>)<span class="pl-k">:</span><span class="pl-en">F</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglRenderbuffer</span>,</td>
      </tr>
      <tr>
        <td id="L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="LC606" class="blob-code blob-code-inner js-file-line">a),<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-smi">r</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>);b<span class="pl-k">?</span><span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-c1">null</span>)<span class="pl-k">:</span><span class="pl-c1">I</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">null</span>);<span class="pl-smi">r</span>.<span class="pl-en">bindRenderbuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">RENDERBUFFER</span>,<span class="pl-c1">null</span>);<span class="pl-smi">r</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-c1">null</span>)}a<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a),d<span class="pl-k">=</span>b<span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">__webglFramebuffer</span>[<span class="pl-smi">a</span>.<span class="pl-smi">activeCubeFace</span>]<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">__webglFramebuffer</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>,h<span class="pl-k">=</span>g<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(d<span class="pl-k">=</span><span class="pl-c1">null</span>,c<span class="pl-k">=</span>pa,e<span class="pl-k">=</span>qa,g<span class="pl-k">=</span>na,h<span class="pl-k">=</span>oa);d<span class="pl-k">!==</span>za<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,d),<span class="pl-smi">r</span>.<span class="pl-en">viewport</span>(g,h,c,e),za<span class="pl-k">=</span>d);b<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(<span class="pl-smi">a</span>.<span class="pl-smi">texture</span>),<span class="pl-smi">r</span>.<span class="pl-en">framebufferTexture2D</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">r</span>.<span class="pl-c1">COLOR_ATTACHMENT0</span>,</td>
      </tr>
      <tr>
        <td id="L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="LC607" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">activeCubeFace</span>,<span class="pl-smi">d</span>.<span class="pl-smi">__webglTexture</span>,<span class="pl-c1">0</span>));Da<span class="pl-k">=</span>c;Ea<span class="pl-k">=</span>e};<span class="pl-c1">this</span>.<span class="pl-en">readRenderTargetPixels</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>)<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-c1">get</span>(a).<span class="pl-smi">__webglFramebuffer</span>;<span class="pl-k">if</span>(g){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;g<span class="pl-k">!==</span>za<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,g),h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">try</span>{<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">texture</span>;<span class="pl-smi">k</span>.<span class="pl-smi">format</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">N</span>(<span class="pl-smi">k</span>.<span class="pl-smi">format</span>)<span class="pl-k">!==</span><span class="pl-smi">r</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">r</span>.<span class="pl-c1">IMPLEMENTATION_COLOR_READ_FORMAT</span>)<span class="pl-k">?</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="LC608" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span><span class="pl-k">||</span><span class="pl-en">N</span>(<span class="pl-smi">k</span>.<span class="pl-c1">type</span>)<span class="pl-k">===</span><span class="pl-smi">r</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">r</span>.<span class="pl-c1">IMPLEMENTATION_COLOR_READ_TYPE</span>)<span class="pl-k">||</span><span class="pl-smi">k</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_color_buffer_float<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">k</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">HalfFloatType</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_color_buffer_half_float<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-en">checkFramebufferStatus</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>)<span class="pl-k">===</span><span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER_COMPLETE</span><span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-en">readPixels</span>(b,c,d,e,<span class="pl-en">N</span>(<span class="pl-smi">k</span>.<span class="pl-smi">format</span>),<span class="pl-en">N</span>(<span class="pl-smi">k</span>.<span class="pl-c1">type</span>),f)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">finally</span>{h<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="LC609" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">r</span>.<span class="pl-c1">FRAMEBUFFER</span>,za)}}}};<span class="pl-c1">this</span>.<span class="pl-en">supportsFloatTextures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( &#39;OES_texture_float&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsHalfFloatTextures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( &#39;OES_texture_half_float&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsStandardDerivatives</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( &#39;OES_standard_derivatives&#39; ).<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="LC610" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_standard_derivatives<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsCompressedTextureS3TC</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( &#39;WEBGL_compressed_texture_s3tc&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsCompressedTexturePVRTC</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( &#39;WEBGL_compressed_texture_pvrtc&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-smi">supportsBlendMinMax</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="LC611" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( &#39;EXT_blend_minmax&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_blend_minmax<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsVertexTextures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-smi">ha</span>.<span class="pl-smi">vertexTextures</span>};<span class="pl-c1">this</span>.<span class="pl-en">supportsInstancedArrays</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( &#39;ANGLE_instanced_arrays&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">S</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">initMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .initMaterial() has been removed.<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="LC612" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">addPrePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .addPrePlugin() has been removed.<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">addPostPlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .addPostPlugin() has been removed.<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">updateShadowMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .updateShadowMap() has been removed.<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(<span class="pl-c1">this</span>,{shadowMapEnabled<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-smi">$</span>.<span class="pl-smi">enabled</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">$</span>.<span class="pl-smi">enabled</span><span class="pl-k">=</span>a}},</td>
      </tr>
      <tr>
        <td id="L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="LC613" class="blob-code blob-code-inner js-file-line">shadowMapType<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-smi">$</span>.<span class="pl-c1">type</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">$</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>a}},shadowMapCullFace<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-smi">$</span>.<span class="pl-smi">cullFace</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">$</span>.<span class="pl-smi">cullFace</span><span class="pl-k">=</span>a}},shadowMapDebug<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-smi">$</span>.<span class="pl-smi">debug</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">$</span>.<span class="pl-smi">debug</span><span class="pl-k">=</span>a}}})};</td>
      </tr>
      <tr>
        <td id="L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="LC614" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">uuid</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">generateUUID</span>();<span class="pl-c1">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b;c<span class="pl-k">=</span>c<span class="pl-k">||</span>{};<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">minFilter</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-smi">c</span>.<span class="pl-smi">wrapS</span>,<span class="pl-smi">c</span>.<span class="pl-smi">wrapT</span>,<span class="pl-smi">c</span>.<span class="pl-smi">magFilter</span>,<span class="pl-smi">c</span>.<span class="pl-smi">minFilter</span>,<span class="pl-smi">c</span>.<span class="pl-smi">format</span>,<span class="pl-smi">c</span>.<span class="pl-c1">type</span>,<span class="pl-smi">c</span>.<span class="pl-smi">anisotropy</span>);<span class="pl-c1">this</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shareDepthFrom</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">shareDepthFrom</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">shareDepthFrom</span><span class="pl-k">:</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="LC615" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.WebGLRenderTarget,get <span class="pl-en">wrapS</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">wrapS</span>},<span class="pl-k">set</span> <span class="pl-en">wrapS</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">wrapT</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">wrapT</span>},<span class="pl-k">set</span> <span class="pl-en">wrapT</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span>a},</td>
      </tr>
      <tr>
        <td id="L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="LC616" class="blob-code blob-code-inner js-file-line"><span class="pl-k">get</span> <span class="pl-en">magFilter</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">magFilter</span>},<span class="pl-k">set</span> <span class="pl-en">magFilter</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">minFilter</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">minFilter</span>},<span class="pl-k">set</span> <span class="pl-en">minFilter</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">anisotropy</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="LC617" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">anisotropy</span>},<span class="pl-k">set</span> <span class="pl-en">anisotropy</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">offset</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .offset is now .texture.offset.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">offset</span>},<span class="pl-k">set</span> <span class="pl-en">offset</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .offset is now .texture.offset.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">offset</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">repeat</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .repeat is now .texture.repeat.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">repeat</span>},<span class="pl-k">set</span> <span class="pl-en">repeat</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .repeat is now .texture.repeat.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="LC618" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">repeat</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">format</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .format is now .texture.format.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">format</span>},<span class="pl-k">set</span> <span class="pl-en">format</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .format is now .texture.format.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">format</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">type</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .type is now .texture.type.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-c1">type</span>},<span class="pl-k">set</span> <span class="pl-en">type</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .type is now .texture.type.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>a},<span class="pl-k">get</span> <span class="pl-en">generateMipmaps</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="LC619" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">generateMipmaps</span>},<span class="pl-k">set</span> <span class="pl-en">generateMipmaps</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">texture</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span>a},<span class="pl-en">setSize</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-c1">width</span><span class="pl-k">!==</span>a<span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-c1">height</span><span class="pl-k">!==</span>b)<span class="pl-c1">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b,<span class="pl-c1">this</span>.<span class="pl-en">dispose</span>()},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).<span class="pl-en">copy</span>(<span class="pl-c1">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>;<span class="pl-c1">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>;<span class="pl-c1">this</span>.<span class="pl-smi">texture</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">texture</span>.<span class="pl-en">clone</span>();<span class="pl-c1">this</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span>;<span class="pl-c1">this</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shareDepthFrom</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="LC620" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">shareDepthFrom</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};<span class="pl-c1">THREE</span>.<span class="pl-smi">EventDispatcher</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderTargetCube</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b,c);<span class="pl-c1">this</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>;</td>
      </tr>
      <tr>
        <td id="L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="LC621" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLBufferRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d;<span class="pl-c1">this</span>.<span class="pl-en">setMode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){d<span class="pl-k">=</span>a};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">g</span>){<span class="pl-smi">a</span>.<span class="pl-en">drawArrays</span>(d,b,g);<span class="pl-smi">c</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>;<span class="pl-smi">c</span>.<span class="pl-smi">vertices</span><span class="pl-k">+=</span>g;d<span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">TRIANGLES</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">faces</span><span class="pl-k">+=</span>g<span class="pl-k">/</span><span class="pl-c1">3</span>)};<span class="pl-c1">this</span>.<span class="pl-en">renderInstances</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c)<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>;f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBufferAttribute</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-en">drawArraysInstancedANGLE</span>(d,</td>
      </tr>
      <tr>
        <td id="L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="LC622" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-smi">f</span>.<span class="pl-c1">data</span>.<span class="pl-smi">count</span>,<span class="pl-smi">a</span>.<span class="pl-smi">maxInstancedCount</span>)<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-en">drawArraysInstancedANGLE</span>(d,<span class="pl-c1">0</span>,<span class="pl-smi">f</span>.<span class="pl-smi">count</span>,<span class="pl-smi">a</span>.<span class="pl-smi">maxInstancedCount</span>)}}};</td>
      </tr>
      <tr>
        <td id="L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="LC623" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLIndexedBufferRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d,e,g;<span class="pl-c1">this</span>.<span class="pl-en">setMode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){d<span class="pl-k">=</span>a};<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-smi">c</span>.<span class="pl-smi">array</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Uint32Array</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_element_index_uint<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">UNSIGNED_INT</span>,g<span class="pl-k">=</span><span class="pl-c1">4</span>)<span class="pl-k">:</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,g<span class="pl-k">=</span><span class="pl-c1">2</span>)};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">h</span>){<span class="pl-smi">a</span>.<span class="pl-en">drawElements</span>(d,h,e,b<span class="pl-k">*</span>g);<span class="pl-smi">c</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>;<span class="pl-smi">c</span>.<span class="pl-smi">vertices</span><span class="pl-k">+=</span>h;d<span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">TRIANGLES</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">faces</span><span class="pl-k">+=</span>h<span class="pl-k">/</span><span class="pl-c1">3</span>)};<span class="pl-c1">this</span>.<span class="pl-en">renderInstances</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">null</span><span class="pl-k">===</span>c<span class="pl-k">?</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="LC624" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-en">drawElementsInstancedANGLE</span>(d,<span class="pl-smi">a</span>.<span class="pl-c1">index</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span>,e,<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-smi">maxInstancedCount</span>)}};</td>
      </tr>
      <tr>
        <td id="L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="LC625" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLExtensions</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b[c])<span class="pl-k">return</span> b[c];<span class="pl-k">var</span> d;<span class="pl-k">switch</span>(c){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>:d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>MOZ_EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>:d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>MOZ_WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="LC626" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>:d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>;<span class="pl-k">default</span>:d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getExtension</span>(c)}<span class="pl-c1">null</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> extension not supported.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> b[c]<span class="pl-k">=</span>d}};</td>
      </tr>
      <tr>
        <td id="L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="LC627" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLCapabilities</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>highp<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-en">getShaderPrecisionFormat</span>(<span class="pl-smi">a</span>.<span class="pl-c1">VERTEX_SHADER</span>,<span class="pl-smi">a</span>.<span class="pl-c1">HIGH_FLOAT</span>).<span class="pl-smi">precision</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-en">getShaderPrecisionFormat</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FRAGMENT_SHADER</span>,<span class="pl-smi">a</span>.<span class="pl-c1">HIGH_FLOAT</span>).<span class="pl-smi">precision</span>)<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>highp<span class="pl-pds">&quot;</span></span>;b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>mediump<span class="pl-pds">&quot;</span></span>}<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>mediump<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-en">getShaderPrecisionFormat</span>(<span class="pl-smi">a</span>.<span class="pl-c1">VERTEX_SHADER</span>,<span class="pl-smi">a</span>.<span class="pl-c1">MEDIUM_FLOAT</span>).<span class="pl-smi">precision</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-en">getShaderPrecisionFormat</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FRAGMENT_SHADER</span>,<span class="pl-smi">a</span>.<span class="pl-c1">MEDIUM_FLOAT</span>).<span class="pl-smi">precision</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>mediump<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>lowp<span class="pl-pds">&quot;</span></span>}<span class="pl-c1">this</span>.<span class="pl-smi">getMaxPrecision</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">precision</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">precision</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">precision</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>highp<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="LC628" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxTextures</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_TEXTURE_IMAGE_UNITS</span>);<span class="pl-c1">this</span>.<span class="pl-smi">maxVertexTextures</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_VERTEX_TEXTURE_IMAGE_UNITS</span>);<span class="pl-c1">this</span>.<span class="pl-smi">maxTextureSize</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_TEXTURE_SIZE</span>);<span class="pl-c1">this</span>.<span class="pl-smi">maxCubemapSize</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_CUBE_MAP_TEXTURE_SIZE</span>);<span class="pl-c1">this</span>.<span class="pl-smi">maxAttributes</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_VERTEX_ATTRIBS</span>);<span class="pl-c1">this</span>.<span class="pl-smi">maxVertexUniforms</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_VERTEX_UNIFORM_VECTORS</span>);<span class="pl-c1">this</span>.<span class="pl-smi">maxVaryings</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_VARYING_VECTORS</span>);</td>
      </tr>
      <tr>
        <td id="L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="LC629" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">maxFragmentUniforms</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_FRAGMENT_UNIFORM_VECTORS</span>);<span class="pl-c1">this</span>.<span class="pl-smi">vertexTextures</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">maxVertexTextures</span>;<span class="pl-c1">this</span>.<span class="pl-smi">floatFragmentTextures</span><span class="pl-k">=</span><span class="pl-k">!!</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">floatVertexTextures</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexTextures</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">floatFragmentTextures</span>;c<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">this</span>.<span class="pl-smi">precision</span>);c<span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">precision</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer:<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">this</span>.<span class="pl-smi">precision</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>not supported, using<span class="pl-pds">&quot;</span></span>,c,<span class="pl-s"><span class="pl-pds">&quot;</span>instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">this</span>.<span class="pl-smi">precision</span><span class="pl-k">=</span>c);<span class="pl-c1">this</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">=</span><span class="pl-k">!!</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>))};</td>
      </tr>
      <tr>
        <td id="L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="LC630" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLGeometries</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">target</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span>g[<span class="pl-smi">a</span>.<span class="pl-c1">id</span>].<span class="pl-c1">attributes</span>,l;<span class="pl-k">for</span>(l <span class="pl-k">in</span> h)<span class="pl-en">e</span>(h[l]);<span class="pl-smi">a</span>.<span class="pl-c1">removeEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,d);<span class="pl-k">delete</span> g[<span class="pl-smi">a</span>.<span class="pl-c1">id</span>];l<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(a);<span class="pl-smi">l</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">e</span>(<span class="pl-smi">l</span>.<span class="pl-smi">wireframe</span>);<span class="pl-smi">c</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">--</span>}function e(c){var d;d=c instanceof THREE.InterleavedBufferAttribute?b.get(c.data).__webglBuffer:b.get(c).__webglBuffer;void 0!==d&amp;&amp;(a.deleteBuffer(d),c instanceof THREE.InterleavedBufferAttribute?b.delete(c.data):b.delete(c))}var g={};this.get=function(a){var b=a.geometry;if(void 0!==</td>
      </tr>
      <tr>
        <td id="L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="LC631" class="blob-code blob-code-inner js-file-line">g[<span class="pl-smi">b</span>.<span class="pl-c1">id</span>])<span class="pl-k">return</span> g[<span class="pl-smi">b</span>.<span class="pl-c1">id</span>];<span class="pl-smi">b</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,d);<span class="pl-k">var</span> e;b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">?</span>e<span class="pl-k">=</span>b<span class="pl-k">:</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">_bufferGeometry</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">_bufferGeometry</span><span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>).<span class="pl-en">setFromObject</span>(a)),e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">_bufferGeometry</span>);g[<span class="pl-smi">b</span>.<span class="pl-c1">id</span>]<span class="pl-k">=</span>e;<span class="pl-smi">c</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">++</span>;<span class="pl-k">return</span> e}};</td>
      </tr>
      <tr>
        <td id="L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="LC632" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLObjects</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">InterleavedBufferAttribute</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-c1">data</span><span class="pl-k">:</span>c,g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(e);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">g</span>.<span class="pl-smi">__webglBuffer</span><span class="pl-k">?</span>(<span class="pl-smi">g</span>.<span class="pl-smi">__webglBuffer</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">createBuffer</span>(),<span class="pl-smi">a</span>.<span class="pl-en">bindBuffer</span>(d,<span class="pl-smi">g</span>.<span class="pl-smi">__webglBuffer</span>),<span class="pl-smi">a</span>.<span class="pl-en">bufferData</span>(d,<span class="pl-smi">e</span>.<span class="pl-smi">array</span>,<span class="pl-smi">e</span>.<span class="pl-smi">dynamic</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">DYNAMIC_DRAW</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">STATIC_DRAW</span>),<span class="pl-smi">g</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">version</span>)<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-c1">version</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-c1">version</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">bindBuffer</span>(d,<span class="pl-smi">g</span>.<span class="pl-smi">__webglBuffer</span>),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">dynamic</span><span class="pl-k">||</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">updateRange</span>.<span class="pl-smi">count</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-en">bufferSubData</span>(d,<span class="pl-c1">0</span>,<span class="pl-smi">e</span>.<span class="pl-smi">array</span>)<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">updateRange</span>.<span class="pl-smi">count</span><span class="pl-k">?</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="LC633" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">a</span>.<span class="pl-en">bufferSubData</span>(d,<span class="pl-smi">e</span>.<span class="pl-smi">updateRange</span>.<span class="pl-smi">offset</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,<span class="pl-smi">e</span>.<span class="pl-smi">array</span>.<span class="pl-en">subarray</span>(<span class="pl-smi">e</span>.<span class="pl-smi">updateRange</span>.<span class="pl-smi">offset</span>,<span class="pl-smi">e</span>.<span class="pl-smi">updateRange</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-smi">updateRange</span>.<span class="pl-smi">count</span>)),<span class="pl-smi">e</span>.<span class="pl-smi">updateRange</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-c1">0</span>),<span class="pl-smi">g</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">version</span>)}function e(a,b,c){if(b&gt;c){var d=b;b=c;c=d}d=a[b];return void 0===d?(a[b]=[c],!0):-1===d.indexOf(c)?(d.push(c),!0):!1}var g=new THREE.WebGLGeometries(a,b,c);this.getAttributeBuffer=function(a){return a instanceof THREE.InterleavedBufferAttribute?b.get(a.data).__webglBuffer:b.get(a).__webglBuffer};this.getWireframeAttribute=</td>
      </tr>
      <tr>
        <td id="L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="LC634" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(c);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">wireframe</span>)<span class="pl-k">return</span> <span class="pl-smi">g</span>.<span class="pl-smi">wireframe</span>;<span class="pl-k">var</span> l<span class="pl-k">=</span>[],k<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">index</span>,m<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">attributes</span>;c<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>;<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>k)<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>{},k<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">array</span>,p<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;p<span class="pl-k">&lt;</span>n;p<span class="pl-k">+=</span><span class="pl-c1">3</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>k[p<span class="pl-k">+</span><span class="pl-c1">0</span>],s<span class="pl-k">=</span>k[p<span class="pl-k">+</span><span class="pl-c1">1</span>],t<span class="pl-k">=</span>k[p<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-en">e</span>(m,q,s)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-c1">push</span>(q,s);<span class="pl-en">e</span>(m,s,t)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-c1">push</span>(s,t);<span class="pl-en">e</span>(m,t,q)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-c1">push</span>(t,q)}<span class="pl-k">else</span> <span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,p<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">1</span>;p<span class="pl-k">&lt;</span>n;p<span class="pl-k">+=</span><span class="pl-c1">3</span>)q<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">0</span>,s<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">1</span>,t<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">2</span>,<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(q,s,s,t,t,q);l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> (<span class="pl-c1">65535</span><span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-smi">count</span><span class="pl-k">?</span><span class="pl-c1">Uint32Array</span><span class="pl-k">:</span><span class="pl-c1">Uint16Array</span>)(l),<span class="pl-c1">1</span>);<span class="pl-en">d</span>(l,<span class="pl-smi">a</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>);<span class="pl-k">return</span> <span class="pl-smi">g</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span>l};<span class="pl-c1">this</span>.<span class="pl-smi">update</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="LC635" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">get</span>(b);<span class="pl-smi">b</span>.<span class="pl-smi">geometry</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">updateFromObject</span>(b);b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">index</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">attributes</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">d</span>(b,<span class="pl-smi">a</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> k <span class="pl-k">in</span> e)<span class="pl-en">d</span>(e[k],<span class="pl-smi">a</span>.<span class="pl-c1">ARRAY_BUFFER</span>);b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">morphAttributes</span>;<span class="pl-k">for</span>(k <span class="pl-k">in</span> b)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>b[k],m<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>p;m<span class="pl-k">++</span>)<span class="pl-en">d</span>(e[m],<span class="pl-smi">a</span>.<span class="pl-c1">ARRAY_BUFFER</span>);<span class="pl-k">return</span> c}};</td>
      </tr>
      <tr>
        <td id="L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="LC636" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLProgram</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a){<span class="pl-k">var</span> f<span class="pl-k">=</span>a[c];<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f)}<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)}function b(a){return&quot;&quot;!==a}var c=0;return function(d,e,g,f){var h=d.context,l=g.defines,k=g.__webglShader.vertexShader,m=g.__webglShader.fragmentShader,p=&quot;SHADOWMAP_TYPE_BASIC&quot;;f.shadowMapType===THREE.PCFShadowMap?p=&quot;SHADOWMAP_TYPE_PCF&quot;:f.shadowMapType===THREE.PCFSoftShadowMap&amp;&amp;(p=&quot;SHADOWMAP_TYPE_PCF_SOFT&quot;);var n=&quot;ENVMAP_TYPE_CUBE&quot;,q=&quot;ENVMAP_MODE_REFLECTION&quot;,s=&quot;ENVMAP_BLENDING_MULTIPLY&quot;;</td>
      </tr>
      <tr>
        <td id="L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="LC637" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">envMap</span>){<span class="pl-k">switch</span>(<span class="pl-smi">g</span>.<span class="pl-smi">envMap</span>.<span class="pl-smi">mapping</span>){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CubeReflectionMapping</span>:<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CubeRefractionMapping</span>:n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_TYPE_CUBE<span class="pl-pds">&quot;</span></span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">EquirectangularReflectionMapping</span>:<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">EquirectangularRefractionMapping</span>:n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_TYPE_EQUIREC<span class="pl-pds">&quot;</span></span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SphericalReflectionMapping</span>:n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_TYPE_SPHERE<span class="pl-pds">&quot;</span></span>}<span class="pl-k">switch</span>(<span class="pl-smi">g</span>.<span class="pl-smi">envMap</span>.<span class="pl-smi">mapping</span>){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CubeRefractionMapping</span>:<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">EquirectangularRefractionMapping</span>:q<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_MODE_REFRACTION<span class="pl-pds">&quot;</span></span>}<span class="pl-k">switch</span>(<span class="pl-smi">g</span>.<span class="pl-smi">combine</span>){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>:s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_BLENDING_MULTIPLY<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="LC638" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MixOperation</span>:s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_BLENDING_MIX<span class="pl-pds">&quot;</span></span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AddOperation</span>:s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_BLENDING_ADD<span class="pl-pds">&quot;</span></span>}}<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">gammaFactor</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-smi">gammaFactor</span><span class="pl-k">:</span><span class="pl-c1">1</span>,v<span class="pl-k">=</span><span class="pl-en">a</span>(l),u<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">createProgram</span>();g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">RawShaderMaterial</span><span class="pl-k">?</span>d<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>(l<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">precision</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">precision</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> int;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADER_NAME <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">g</span>.<span class="pl-smi">__webglShader</span>.<span class="pl-c1">name</span>,v,<span class="pl-smi">f</span>.<span class="pl-smi">supportsVertexTextures</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define VERTEX_TEXTURES<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">d</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_INPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">d</span>.<span class="pl-smi">gammaOutput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_OUTPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_FACTOR <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>t,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_DIR_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="LC639" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-smi">maxDirLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_POINT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxPointLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SPOT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxSpotLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_HEMI_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxHemiLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SHADOWS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxShadows</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_BONES <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxBones</span>,<span class="pl-smi">f</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ENVMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>q<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">lightMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LIGHTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">aoMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_AOMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">emissiveMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_EMISSIVEMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_BUMPMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_NORMALMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="LC640" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-smi">supportsVertexTextures</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_DISPLACEMENTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">specularMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SPECULARMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ALPHAMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_COLOR<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">flatShading</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLAT_SHADED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">skinning</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SKINNING<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define BONE_TEXTURE<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MORPHTARGETS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-smi">flatShading</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MORPHNORMALS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">doubleSided</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define DOUBLE_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">flipSided</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLIP_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="LC641" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SHADOWMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>p<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">shadowMapDebug</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADOWMAP_DEBUG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-smi">pointLightShadows</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define POINT_LIGHT_SHADOWS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SIZEATTENUATION<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">extensions</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF_EXT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 modelMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 modelViewMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 projectionMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 viewMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat3 normalMatrix;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="LC642" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 cameraPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>attribute vec3 position;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>attribute vec3 normal;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>attribute vec2 uv;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_COLOR<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 color;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget0;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget1;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget2;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget3;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_MORPHNORMALS<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal0;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal1;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal2;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal3;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#else<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget4;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="LC643" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget5;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget6;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget7;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec4 skinIndex;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec4 skinWeight;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>].<span class="pl-en">filter</span>(b).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),d<span class="pl-k">=</span>[<span class="pl-smi">f</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">||</span><span class="pl-smi">f</span>.<span class="pl-smi">normalMap</span><span class="pl-k">||</span><span class="pl-smi">f</span>.<span class="pl-smi">flatShading</span><span class="pl-k">||</span><span class="pl-smi">g</span>.<span class="pl-smi">derivatives</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#extension GL_OES_standard_derivatives : enable<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">extensions</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#extension GL_EXT_frag_depth : enable<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">precision</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="LC644" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-smi">precision</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> int;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADER_NAME <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">g</span>.<span class="pl-smi">__webglShader</span>.<span class="pl-c1">name</span>,v,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_DIR_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxDirLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_POINT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxPointLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SPOT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxSpotLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_HEMI_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxHemiLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SHADOWS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">maxShadows</span>,<span class="pl-smi">f</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define ALPHATEST <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">d</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_INPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">d</span>.<span class="pl-smi">gammaOutput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_OUTPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_FACTOR <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>t,<span class="pl-smi">f</span>.<span class="pl-smi">useFog</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">fog</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_FOG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">useFog</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">fogExp</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FOG_EXP2<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="LC645" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ENVMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>n<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>q<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>s<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">lightMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LIGHTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">aoMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_AOMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">emissiveMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_EMISSIVEMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_BUMPMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_NORMALMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">specularMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SPECULARMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">alphaMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ALPHAMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_COLOR<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">flatShading</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLAT_SHADED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">metal</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define METAL<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="LC646" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">doubleSided</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define DOUBLE_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">flipSided</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLIP_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SHADOWMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>p<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">shadowMapDebug</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADOWMAP_DEBUG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-smi">pointLightShadows</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define POINT_LIGHT_SHADOWS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">f</span>.<span class="pl-smi">logarithmicDepthBuffer</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">extensions</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF_EXT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 viewMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 cameraPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>].<span class="pl-en">filter</span>(b).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>));m<span class="pl-k">=</span>d<span class="pl-k">+</span>m;</td>
      </tr>
      <tr>
        <td id="L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="LC647" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLShader</span>(h,<span class="pl-smi">h</span>.<span class="pl-c1">VERTEX_SHADER</span>,l<span class="pl-k">+</span>k);m<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLShader</span>(h,<span class="pl-smi">h</span>.<span class="pl-c1">FRAGMENT_SHADER</span>,m);<span class="pl-smi">h</span>.<span class="pl-en">attachShader</span>(u,k);<span class="pl-smi">h</span>.<span class="pl-en">attachShader</span>(u,m);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">index0AttributeName</span><span class="pl-k">?</span><span class="pl-smi">h</span>.<span class="pl-en">bindAttribLocation</span>(u,<span class="pl-c1">0</span>,<span class="pl-smi">g</span>.<span class="pl-smi">index0AttributeName</span>)<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-en">bindAttribLocation</span>(u,<span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">h</span>.<span class="pl-en">linkProgram</span>(u);f<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getProgramInfoLog</span>(u);p<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getShaderInfoLog</span>(k);n<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getShaderInfoLog</span>(m);s<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-en">getProgramParameter</span>(u,<span class="pl-smi">h</span>.<span class="pl-c1">LINK_STATUS</span>))q<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: shader error: <span class="pl-pds">&quot;</span></span>,<span class="pl-smi">h</span>.<span class="pl-en">getError</span>(),<span class="pl-s"><span class="pl-pds">&quot;</span>gl.VALIDATE_STATUS<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">h</span>.<span class="pl-en">getProgramParameter</span>(u,</td>
      </tr>
      <tr>
        <td id="L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="LC648" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">VALIDATE_STATUS</span>),<span class="pl-s"><span class="pl-pds">&quot;</span>gl.getProgramInfoLog<span class="pl-pds">&quot;</span></span>,f,p,n);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span>f)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: gl.getProgramInfoLog()<span class="pl-pds">&quot;</span></span>,f);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>p<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>n)s<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;s<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">diagnostics</span><span class="pl-k">=</span>{runnable<span class="pl-k">:</span>q,material<span class="pl-k">:</span>g,programLog<span class="pl-k">:</span>f,vertexShader<span class="pl-k">:</span>{log<span class="pl-k">:</span>p,prefix<span class="pl-k">:</span>l},fragmentShader<span class="pl-k">:</span>{log<span class="pl-k">:</span>n,prefix<span class="pl-k">:</span>d}});<span class="pl-smi">h</span>.<span class="pl-en">deleteShader</span>(k);<span class="pl-smi">h</span>.<span class="pl-en">deleteShader</span>(m);<span class="pl-k">var</span> w;<span class="pl-c1">this</span>.<span class="pl-en">getUniforms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>w){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>{},b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getProgramParameter</span>(u,<span class="pl-smi">h</span>.<span class="pl-c1">ACTIVE_UNIFORMS</span>),c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getActiveUniform</span>(u,c).<span class="pl-c1">name</span>,e<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getUniformLocation</span>(u,d),f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>[0]<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="LC649" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>f<span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">&amp;&amp;</span>(a[<span class="pl-smi">d</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>,f)]<span class="pl-k">=</span>e);a[d]<span class="pl-k">=</span>e}w<span class="pl-k">=</span>a}<span class="pl-k">return</span> w};<span class="pl-k">var</span> <span class="pl-c1">D</span>;<span class="pl-c1">this</span>.<span class="pl-en">getAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">D</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>{},b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getProgramParameter</span>(u,<span class="pl-smi">h</span>.<span class="pl-c1">ACTIVE_ATTRIBUTES</span>),c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getActiveAttrib</span>(u,c).<span class="pl-c1">name</span>;a[d]<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getAttribLocation</span>(u,d)}<span class="pl-c1">D</span><span class="pl-k">=</span>a}<span class="pl-k">return</span> <span class="pl-c1">D</span>};<span class="pl-c1">this</span>.<span class="pl-en">destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">h</span>.<span class="pl-en">deleteProgram</span>(u);<span class="pl-c1">this</span>.<span class="pl-smi">program</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>};<span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(<span class="pl-c1">this</span>,{uniforms<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: .uniforms is now .getUniforms().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getUniforms</span>()}},attributes<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: .attributes is now .getAttributes().<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="LC650" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getAttributes</span>()}}});<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span>c<span class="pl-k">++</span>;<span class="pl-c1">this</span>.<span class="pl-c1">code</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">usedTimes</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">program</span><span class="pl-k">=</span>u;<span class="pl-c1">this</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span>k;<span class="pl-c1">this</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span>m;<span class="pl-k">return</span> <span class="pl-c1">this</span>}}();</td>
      </tr>
      <tr>
        <td id="L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="LC651" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLPrograms</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>{MeshDepthMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>depth<span class="pl-pds">&quot;</span></span>,MeshNormalMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,MeshBasicMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span>,MeshLambertMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>lambert<span class="pl-pds">&quot;</span></span>,MeshPhongMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>phong<span class="pl-pds">&quot;</span></span>,LineBasicMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span>,LineDashedMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dashed<span class="pl-pds">&quot;</span></span>,PointsMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>points<span class="pl-pds">&quot;</span></span>},e<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>precision supportsVertexTextures map envMap envMapMode lightMap aoMap emissiveMap bumpMap normalMap displacementMap specularMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals maxDirLights maxPointLights maxSpotLights maxHemiLights maxShadows shadowMapEnabled pointLightShadows shadowMapType shadowMapDebug alphaTest metal doubleSided flipSided<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">getParameters</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="LC652" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">e</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-k">var</span> k,m,p,n,q,s<span class="pl-k">=</span>d[<span class="pl-smi">c</span>.<span class="pl-c1">type</span>];k<span class="pl-k">=</span>q<span class="pl-k">=</span>n<span class="pl-k">=</span>p<span class="pl-k">=</span>m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>t;k<span class="pl-k">++</span>){<span class="pl-k">var</span> v<span class="pl-k">=</span>e[k];<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">v</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(v <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">&amp;&amp;</span>m<span class="pl-k">++</span>,v <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">&amp;&amp;</span>p<span class="pl-k">++</span>,v <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">&amp;&amp;</span>n<span class="pl-k">++</span>,v <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span><span class="pl-k">&amp;&amp;</span>q<span class="pl-k">++</span>)}<span class="pl-k">for</span>(<span class="pl-k">var</span> v<span class="pl-k">=</span>k<span class="pl-k">=</span>t<span class="pl-k">=</span><span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;v<span class="pl-k">&lt;</span>u;v<span class="pl-k">++</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>e[v];<span class="pl-smi">w</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>((w <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">||</span>w <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>)<span class="pl-k">&amp;&amp;</span>t<span class="pl-k">++</span>,w <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">++</span>,k<span class="pl-k">++</span>))}e<span class="pl-k">=</span>t;<span class="pl-smi">b</span>.<span class="pl-smi">floatVertexTextures</span><span class="pl-k">&amp;&amp;</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">skeleton</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="LC653" class="blob-code blob-code-inner js-file-line">t<span class="pl-k">=</span><span class="pl-c1">1024</span><span class="pl-k">:</span>(t<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>((<span class="pl-smi">b</span>.<span class="pl-smi">maxVertexUniforms</span><span class="pl-k">-</span><span class="pl-c1">20</span>)<span class="pl-k">/</span><span class="pl-c1">4</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">&amp;&amp;</span>l <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span><span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">l</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>,t),t<span class="pl-k">&lt;</span><span class="pl-smi">l</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WebGLRenderer: too many bones - <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>, this GPU supports just <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>t<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> (try OpenGL instead of ANGLE)<span class="pl-pds">&quot;</span></span>)));v<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getPrecision</span>();<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">precision</span><span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getMaxPrecision</span>(<span class="pl-smi">c</span>.<span class="pl-smi">precision</span>),v<span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">precision</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.initMaterial:<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">precision</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>not supported, using<span class="pl-pds">&quot;</span></span>,v,<span class="pl-s"><span class="pl-pds">&quot;</span>instead.<span class="pl-pds">&quot;</span></span>));<span class="pl-k">return</span>{shaderID<span class="pl-k">:</span>s,</td>
      </tr>
      <tr>
        <td id="L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="LC654" class="blob-code blob-code-inner js-file-line">precision<span class="pl-k">:</span>v,supportsVertexTextures<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-smi">vertexTextures</span>,map<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">map</span>,envMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">envMap</span>,envMapMode<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">envMap</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">envMap</span>.<span class="pl-smi">mapping</span>,lightMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">lightMap</span>,aoMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">aoMap</span>,emissiveMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">emissiveMap</span>,bumpMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">bumpMap</span>,normalMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">normalMap</span>,displacementMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">displacementMap</span>,specularMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">specularMap</span>,alphaMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">c</span>.<span class="pl-smi">alphaMap</span>,combine<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">combine</span>,vertexColors<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">vertexColors</span>,fog<span class="pl-k">:</span>h,useFog<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">fog</span>,fogExp<span class="pl-k">:</span>h <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">FogExp2</span>,flatShading<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">shading</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FlatShading</span>,sizeAttenuation<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">sizeAttenuation</span>,logarithmicDepthBuffer<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-smi">logarithmicDepthBuffer</span>,</td>
      </tr>
      <tr>
        <td id="L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="LC655" class="blob-code blob-code-inner js-file-line">skinning<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">skinning</span>,maxBones<span class="pl-k">:</span>t,useVertexTexture<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-smi">floatVertexTextures</span><span class="pl-k">&amp;&amp;</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">skeleton</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">skeleton</span>.<span class="pl-smi">useVertexTexture</span>,morphTargets<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span>,morphNormals<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">morphNormals</span>,maxMorphTargets<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">maxMorphTargets</span>,maxMorphNormals<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">maxMorphNormals</span>,maxDirLights<span class="pl-k">:</span>m,maxPointLights<span class="pl-k">:</span>p,maxSpotLights<span class="pl-k">:</span>n,maxHemiLights<span class="pl-k">:</span>q,maxShadows<span class="pl-k">:</span>e,pointLightShadows<span class="pl-k">:</span>k,shadowMapEnabled<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">shadowMap</span>.<span class="pl-smi">enabled</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>e,shadowMapType<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">shadowMap</span>.<span class="pl-c1">type</span>,shadowMapDebug<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">shadowMap</span>.<span class="pl-smi">debug</span>,alphaTest<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">alphaTest</span>,metal<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">metal</span>,doubleSided<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">side</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="LC656" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>,flipSided<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-smi">side</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span>}};<span class="pl-c1">this</span>.<span class="pl-en">getProgramCode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[];<span class="pl-smi">b</span>.<span class="pl-smi">shaderID</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-smi">b</span>.<span class="pl-smi">shaderID</span>)<span class="pl-k">:</span>(<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span>),<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span>));<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">defines</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> <span class="pl-smi">a</span>.<span class="pl-smi">defines</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(d),<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">defines</span>[d]);<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span>e[d];<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(k);<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(b[k])}<span class="pl-k">return</span> <span class="pl-smi">c</span>.<span class="pl-c1">join</span>()};<span class="pl-c1">this</span>.<span class="pl-en">acquireProgram</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> l,k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">++</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span>c[k];<span class="pl-k">if</span>(<span class="pl-smi">p</span>.<span class="pl-c1">code</span><span class="pl-k">===</span>e){l<span class="pl-k">=</span>p;<span class="pl-k">++</span><span class="pl-smi">l</span>.<span class="pl-smi">usedTimes</span>;<span class="pl-k">break</span>}}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>l<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLProgram</span>(a,e,b,d),<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(l));</td>
      </tr>
      <tr>
        <td id="L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="LC657" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> l};<span class="pl-c1">this</span>.<span class="pl-en">releaseProgram</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-k">--</span><span class="pl-smi">a</span>.<span class="pl-smi">usedTimes</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">indexOf</span>(a);c[b]<span class="pl-k">=</span>c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-smi">c</span>.<span class="pl-c1">pop</span>();<span class="pl-smi">a</span>.<span class="pl-en">destroy</span>()}};<span class="pl-c1">this</span>.<span class="pl-smi">programs</span><span class="pl-k">=</span>c};<span class="pl-c1">THREE</span>.<span class="pl-en">WebGLProperties</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">uuid</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a[b];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>{},a[b]<span class="pl-k">=</span>c);<span class="pl-k">return</span> c};<span class="pl-c1">this</span>.<span class="pl-en">delete</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">delete</span> a[<span class="pl-smi">b</span>.<span class="pl-smi">uuid</span>]};<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){a<span class="pl-k">=</span>{}}};</td>
      </tr>
      <tr>
        <td id="L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="LC658" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLShader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)a[c]<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a[c];<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)}<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createShader</span>(c);<span class="pl-smi">b</span>.<span class="pl-en">shaderSource</span>(e,d);<span class="pl-smi">b</span>.<span class="pl-en">compileShader</span>(e);<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-en">getShaderParameter</span>(e,<span class="pl-smi">b</span>.<span class="pl-c1">COMPILE_STATUS</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLShader: Shader couldn&#39;t compile.<span class="pl-pds">&quot;</span></span>);<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-en">getShaderInfoLog</span>(e)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLShader: gl.getShaderInfoLog()<span class="pl-pds">&quot;</span></span>,c<span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">VERTEX_SHADER</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertex<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fragment<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">b</span>.<span class="pl-en">getShaderInfoLog</span>(e),<span class="pl-en">a</span>(d));<span class="pl-k">return</span> e}}();</td>
      </tr>
      <tr>
        <td id="L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="LC659" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLShadowMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>,f<span class="pl-k">=</span><span class="pl-c1">null</span>,f<span class="pl-k">=</span>n,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">customDepthMaterial</span>;c<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>q,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">customDistanceMaterial</span>);g<span class="pl-k">?</span>f<span class="pl-k">=</span>g<span class="pl-k">:</span>(a<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">skinning</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">|=</span><span class="pl-c1">1</span>),a<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">|=</span><span class="pl-c1">2</span>),f<span class="pl-k">=</span>f[g]);<span class="pl-smi">f</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">visible</span>;<span class="pl-smi">f</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">wireframe</span>;<span class="pl-smi">f</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">wireframeLinewidth</span>;c<span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">uniforms</span>.<span class="pl-smi">lightPos</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">uniforms</span>.<span class="pl-smi">lightPos</span>.<span class="pl-c1">value</span>.<span class="pl-en">copy</span>(d);<span class="pl-k">return</span> f}function e(a,b){if(!1!==a.visible){(a instanceof</td>
      </tr>
      <tr>
        <td id="L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="LC660" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span><span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Points</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-en">intersectsObject</span>(a))<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">material</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">modelViewMatrix</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">p</span>.<span class="pl-c1">push</span>(a));<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">children</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>)<span class="pl-en">e</span>(c[d],b)}}<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">context</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">state</span>,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span>[],n<span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-c1">4</span>),q<span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-c1">4</span>),s<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="LC661" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>)],t<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>)],v<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>],u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,w<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span>.<span class="pl-smi">depthRGBA</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">w</span>.<span class="pl-smi">uniforms</span>),x<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span>.<span class="pl-smi">distanceRGBA</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">x</span>.<span class="pl-smi">uniforms</span>),</td>
      </tr>
      <tr>
        <td id="L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="LC662" class="blob-code blob-code-inner js-file-line">y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">!==</span>y;<span class="pl-k">++</span>y){<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">!==</span>(y<span class="pl-k">&amp;</span><span class="pl-c1">1</span>),<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">!==</span>(y<span class="pl-k">&amp;</span><span class="pl-c1">2</span>),<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({uniforms<span class="pl-k">:</span><span class="pl-c1">D</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">w</span>.<span class="pl-smi">vertexShader</span>,fragmentShader<span class="pl-k">:</span><span class="pl-smi">w</span>.<span class="pl-smi">fragmentShader</span>,morphTargets<span class="pl-k">:</span>z,skinning<span class="pl-k">:</span><span class="pl-c1">A</span>});<span class="pl-c1">J</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;n[y]<span class="pl-k">=</span><span class="pl-c1">J</span>;z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({uniforms<span class="pl-k">:</span><span class="pl-c1">B</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">x</span>.<span class="pl-smi">vertexShader</span>,fragmentShader<span class="pl-k">:</span><span class="pl-smi">x</span>.<span class="pl-smi">fragmentShader</span>,morphTargets<span class="pl-k">:</span>z,skinning<span class="pl-k">:</span><span class="pl-c1">A</span>});<span class="pl-smi">z</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;q[y]<span class="pl-k">=</span>z}<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-c1">this</span>.<span class="pl-smi">enabled</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PCFShadowMap</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cullFace</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceFront</span>;<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">n</span>){<span class="pl-k">var</span> q,</td>
      </tr>
      <tr>
        <td id="L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="LC663" class="blob-code blob-code-inner js-file-line">w;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">F</span>.<span class="pl-smi">enabled</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">F</span>.<span class="pl-smi">autoUpdate</span><span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">F</span>.<span class="pl-smi">needsUpdate</span>)){<span class="pl-smi">g</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-smi">f</span>.<span class="pl-en">disable</span>(<span class="pl-smi">g</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">f</span>.<span class="pl-en">enable</span>(<span class="pl-smi">g</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">g</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">g</span>.<span class="pl-c1">CCW</span>);<span class="pl-smi">g</span>.<span class="pl-en">cullFace</span>(<span class="pl-c1">F</span>.<span class="pl-smi">cullFace</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceFront</span><span class="pl-k">?</span><span class="pl-smi">g</span>.<span class="pl-c1">FRONT</span><span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-c1">BACK</span>);<span class="pl-smi">f</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">a</span>.<span class="pl-en">getViewport</span>(u);<span class="pl-k">for</span>(<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;x<span class="pl-k">&lt;</span><span class="pl-c1">D</span>;x<span class="pl-k">++</span>){<span class="pl-k">var</span> y<span class="pl-k">=</span>b[x];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">y</span>.<span class="pl-smi">castShadow</span>){<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">shadow</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">camera</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">mapSize</span>;<span class="pl-k">if</span>(y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span>){q<span class="pl-k">=</span><span class="pl-c1">6</span>;w<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-c1">x</span><span class="pl-k">/</span><span class="pl-c1">4</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-c1">y</span><span class="pl-k">/</span><span class="pl-c1">2</span>;v[<span class="pl-c1">0</span>].<span class="pl-c1">set</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">H</span>,<span class="pl-c1">J</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>);v[<span class="pl-c1">1</span>].<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">J</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>);v[<span class="pl-c1">2</span>].<span class="pl-c1">set</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">H</span>,<span class="pl-c1">J</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>);v[<span class="pl-c1">3</span>].<span class="pl-c1">set</span>(<span class="pl-c1">H</span>,<span class="pl-c1">J</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>);v[<span class="pl-c1">4</span>].<span class="pl-c1">set</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">H</span>,<span class="pl-c1">0</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>);</td>
      </tr>
      <tr>
        <td id="L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="LC664" class="blob-code blob-code-inner js-file-line">v[<span class="pl-c1">5</span>].<span class="pl-c1">set</span>(<span class="pl-c1">H</span>,<span class="pl-c1">0</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>)}<span class="pl-k">else</span> q<span class="pl-k">=</span><span class="pl-c1">1</span>,w<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">z</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>,<span class="pl-c1">F</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PCFSoftShadowMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span>),<span class="pl-smi">z</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLRenderTarget</span>(<span class="pl-c1">A</span>.<span class="pl-c1">x</span>,<span class="pl-c1">A</span>.<span class="pl-c1">y</span>,{minFilter<span class="pl-k">:</span><span class="pl-c1">H</span>,magFilter<span class="pl-k">:</span><span class="pl-c1">H</span>,format<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>}),<span class="pl-smi">z</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">B</span>.<span class="pl-smi">aspect</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-c1">x</span><span class="pl-k">/</span><span class="pl-c1">A</span>.<span class="pl-c1">y</span>),<span class="pl-c1">B</span>.<span class="pl-en">updateProjectionMatrix</span>());<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">map</span>;z<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">matrix</span>;<span class="pl-smi">m</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">y</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">B</span>.<span class="pl-smi">position</span>.<span class="pl-en">copy</span>(m);<span class="pl-smi">a</span>.<span class="pl-en">setRenderTarget</span>(<span class="pl-c1">A</span>);<span class="pl-smi">a</span>.<span class="pl-c1">clear</span>();<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">A</span><span class="pl-k">&lt;</span>q;<span class="pl-c1">A</span><span class="pl-k">++</span>)<span class="pl-k">for</span>(w<span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">copy</span>(<span class="pl-c1">B</span>.<span class="pl-smi">position</span>),<span class="pl-smi">k</span>.<span class="pl-c1">add</span>(s[<span class="pl-c1">A</span>]),<span class="pl-c1">B</span>.<span class="pl-smi">up</span>.<span class="pl-en">copy</span>(t[<span class="pl-c1">A</span>]),<span class="pl-c1">B</span>.<span class="pl-en">lookAt</span>(k),</td>
      </tr>
      <tr>
        <td id="L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="LC665" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span><span class="pl-k">=</span>v[<span class="pl-c1">A</span>],<span class="pl-smi">a</span>.<span class="pl-en">setViewport</span>(<span class="pl-c1">H</span>.<span class="pl-c1">x</span>,<span class="pl-c1">H</span>.<span class="pl-c1">y</span>,<span class="pl-c1">H</span>.<span class="pl-c1">z</span>,<span class="pl-c1">H</span>.<span class="pl-smi">w</span>))<span class="pl-k">:</span>(<span class="pl-smi">k</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-smi">y</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-c1">B</span>.<span class="pl-en">lookAt</span>(k)),<span class="pl-c1">B</span>.<span class="pl-en">updateMatrixWorld</span>(),<span class="pl-c1">B</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">B</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">z</span>.<span class="pl-c1">set</span>(<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),<span class="pl-smi">z</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">B</span>.<span class="pl-smi">projectionMatrix</span>),<span class="pl-smi">z</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">B</span>.<span class="pl-smi">matrixWorldInverse</span>),<span class="pl-smi">l</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-c1">B</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-c1">B</span>.<span class="pl-smi">matrixWorldInverse</span>),<span class="pl-smi">h</span>.<span class="pl-en">setFromMatrix</span>(l),<span class="pl-smi">p</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-en">e</span>(n,<span class="pl-c1">B</span>),<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;<span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-c1">J</span>;<span class="pl-c1">H</span><span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">G</span><span class="pl-k">=</span>p[<span class="pl-c1">H</span>],ia<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">update</span>(<span class="pl-c1">G</span>),<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-smi">material</span>;<span class="pl-k">if</span>(<span class="pl-c1">U</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">groups</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">materials</span>,</td>
      </tr>
      <tr>
        <td id="L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="LC666" class="blob-code blob-code-inner js-file-line">da<span class="pl-k">=</span><span class="pl-c1">0</span>,ca<span class="pl-k">=</span><span class="pl-c1">X</span>.<span class="pl-c1">length</span>;da<span class="pl-k">&lt;</span>ca;da<span class="pl-k">++</span>){<span class="pl-k">var</span> ga<span class="pl-k">=</span><span class="pl-c1">X</span>[da],<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-c1">U</span>[<span class="pl-smi">ga</span>.<span class="pl-smi">materialIndex</span>];<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Z</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">G</span>,<span class="pl-c1">Z</span>,w,m),<span class="pl-smi">a</span>.<span class="pl-en">renderBufferDirect</span>(<span class="pl-c1">B</span>,b,<span class="pl-c1">null</span>,ia,<span class="pl-c1">Z</span>,<span class="pl-c1">G</span>,ga))}<span class="pl-k">else</span> <span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">G</span>,<span class="pl-c1">U</span>,w,m),<span class="pl-smi">a</span>.<span class="pl-en">renderBufferDirect</span>(<span class="pl-c1">B</span>,b,<span class="pl-c1">null</span>,ia,<span class="pl-c1">Z</span>,<span class="pl-c1">G</span>,<span class="pl-c1">null</span>)}<span class="pl-smi">a</span>.<span class="pl-en">resetGLState</span>()}}<span class="pl-smi">a</span>.<span class="pl-en">setViewport</span>(<span class="pl-smi">u</span>.<span class="pl-c1">x</span>,<span class="pl-smi">u</span>.<span class="pl-c1">y</span>,<span class="pl-smi">u</span>.<span class="pl-c1">z</span>,<span class="pl-smi">u</span>.<span class="pl-smi">w</span>);n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getClearColor</span>();q<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getClearAlpha</span>();<span class="pl-smi">a</span>.<span class="pl-en">setClearColor</span>(n,q);<span class="pl-smi">f</span>.<span class="pl-en">enable</span>(<span class="pl-smi">g</span>.<span class="pl-c1">BLEND</span>);<span class="pl-c1">F</span>.<span class="pl-smi">cullFace</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CullFaceFront</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">g</span>.<span class="pl-c1">BACK</span>);<span class="pl-smi">a</span>.<span class="pl-en">resetGLState</span>();<span class="pl-c1">F</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}}};</td>
      </tr>
      <tr>
        <td id="L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="LC667" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLState</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">16</span>),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">16</span>),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">16</span>),h<span class="pl-k">=</span>{},l<span class="pl-k">=</span><span class="pl-c1">null</span>,k<span class="pl-k">=</span><span class="pl-c1">null</span>,m<span class="pl-k">=</span><span class="pl-c1">null</span>,p<span class="pl-k">=</span><span class="pl-c1">null</span>,n<span class="pl-k">=</span><span class="pl-c1">null</span>,q<span class="pl-k">=</span><span class="pl-c1">null</span>,s<span class="pl-k">=</span><span class="pl-c1">null</span>,t<span class="pl-k">=</span><span class="pl-c1">null</span>,v<span class="pl-k">=</span><span class="pl-c1">null</span>,u<span class="pl-k">=</span><span class="pl-c1">null</span>,w<span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">null</span>,x<span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">null</span>,y<span class="pl-k">=</span><span class="pl-c1">null</span>,z<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">MAX_TEXTURE_IMAGE_UNITS</span>),<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">J</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">a</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">clearDepth</span>(<span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">clearStencil</span>(<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">LEQUAL</span>);<span class="pl-smi">a</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">CCW</span>);<span class="pl-smi">a</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BACK</span>);<span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">a</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FUNC_ADD</span>);</td>
      </tr>
      <tr>
        <td id="L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="LC668" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">SRC_ALPHA</span>,<span class="pl-smi">a</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>)};<span class="pl-c1">this</span>.<span class="pl-en">initAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)e[a]<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">enableAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">c</span>){e[c]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">===</span>g[c]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">enableVertexAttribArray</span>(c),g[c]<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-c1">0</span><span class="pl-k">!==</span>f[c]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>).<span class="pl-en">vertexAttribDivisorANGLE</span>(c,<span class="pl-c1">0</span>),f[c]<span class="pl-k">=</span><span class="pl-c1">0</span>)};<span class="pl-c1">this</span>.<span class="pl-en">enableAttributeAndDivisor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){e[b]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">===</span>g[b]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">enableVertexAttribArray</span>(b),g[b]<span class="pl-k">=</span><span class="pl-c1">1</span>);f[b]<span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-en">vertexAttribDivisorANGLE</span>(b,c),f[b]<span class="pl-k">=</span>c)};<span class="pl-c1">this</span>.<span class="pl-en">disableUnusedAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="LC669" class="blob-code blob-code-inner js-file-line">c;b<span class="pl-k">++</span>)g[b]<span class="pl-k">!==</span>e[b]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">disableVertexAttribArray</span>(b),g[b]<span class="pl-k">=</span><span class="pl-c1">0</span>)};<span class="pl-c1">this</span>.<span class="pl-en">enable</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">!==</span>h[b]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">enable</span>(b),h[b]<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)};<span class="pl-c1">this</span>.<span class="pl-en">disable</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>h[b]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">disable</span>(b),h[b]<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>)};<span class="pl-c1">this</span>.<span class="pl-en">getCompressedTextureFormats</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>l<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span>[],<span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)))<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">a</span>.<span class="pl-c1">COMPRESSED_TEXTURE_FORMATS</span>),d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(c[d]);<span class="pl-k">return</span> l};<span class="pl-c1">this</span>.<span class="pl-en">setBlending</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){b<span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoBlending</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">disable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="LC670" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AdditiveBlending</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">SRC_ALPHA</span>,<span class="pl-smi">a</span>.<span class="pl-c1">ONE</span>))<span class="pl-k">:</span>b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractiveBlending</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">ZERO</span>,<span class="pl-smi">a</span>.<span class="pl-c1">ONE_MINUS_SRC_COLOR</span>))<span class="pl-k">:</span>b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyBlending</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">ZERO</span>,<span class="pl-smi">a</span>.<span class="pl-c1">SRC_COLOR</span>))<span class="pl-k">:</span>b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CustomBlending</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>)<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendEquationSeparate</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FUNC_ADD</span>,<span class="pl-smi">a</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">a</span>.<span class="pl-en">blendFuncSeparate</span>(<span class="pl-smi">a</span>.<span class="pl-c1">SRC_ALPHA</span>,<span class="pl-smi">a</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>,</td>
      </tr>
      <tr>
        <td id="L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="LC671" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">ONE</span>,<span class="pl-smi">a</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>)),k<span class="pl-k">=</span>b);<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CustomBlending</span>){g<span class="pl-k">=</span>g<span class="pl-k">||</span>d;h<span class="pl-k">=</span>h<span class="pl-k">||</span>e;l<span class="pl-k">=</span>l<span class="pl-k">||</span>f;<span class="pl-k">if</span>(d<span class="pl-k">!==</span>m<span class="pl-k">||</span>g<span class="pl-k">!==</span>q)<span class="pl-smi">a</span>.<span class="pl-en">blendEquationSeparate</span>(<span class="pl-en">c</span>(d),<span class="pl-en">c</span>(g)),m<span class="pl-k">=</span>d,q<span class="pl-k">=</span>g;<span class="pl-k">if</span>(e<span class="pl-k">!==</span>p<span class="pl-k">||</span>f<span class="pl-k">!==</span>n<span class="pl-k">||</span>h<span class="pl-k">!==</span>s<span class="pl-k">||</span>l<span class="pl-k">!==</span>t)<span class="pl-smi">a</span>.<span class="pl-en">blendFuncSeparate</span>(<span class="pl-en">c</span>(e),<span class="pl-en">c</span>(f),<span class="pl-en">c</span>(h),<span class="pl-en">c</span>(l)),p<span class="pl-k">=</span>e,n<span class="pl-k">=</span>f,s<span class="pl-k">=</span>h,t<span class="pl-k">=</span>l}<span class="pl-k">else</span> t<span class="pl-k">=</span>s<span class="pl-k">=</span>q<span class="pl-k">=</span>n<span class="pl-k">=</span>p<span class="pl-k">=</span>m<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">this</span>.<span class="pl-en">setDepthFunc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(v<span class="pl-k">!==</span>b){<span class="pl-k">if</span>(b)<span class="pl-k">switch</span>(b){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">NeverDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">NEVER</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AlwaysDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">ALWAYS</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LessDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">LESS</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LessEqualDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">LEQUAL</span>);</td>
      </tr>
      <tr>
        <td id="L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="LC672" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">EqualDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">EQUAL</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">GreaterEqualDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">GEQUAL</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">GreaterDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">GREATER</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">NotEqualDepth</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">NOTEQUAL</span>);<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">LEQUAL</span>)}<span class="pl-k">else</span> <span class="pl-smi">a</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">a</span>.<span class="pl-c1">LEQUAL</span>);v<span class="pl-k">=</span>b}};<span class="pl-c1">this</span>.<span class="pl-en">setDepthTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">DEPTH_TEST</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">disable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">DEPTH_TEST</span>)};<span class="pl-c1">this</span>.<span class="pl-en">setDepthWrite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){u<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">depthMask</span>(b),u<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">setColorWrite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){w<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">colorMask</span>(b,b,b,b),w<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-smi">setFlipSided</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="LC673" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">D</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">CW</span>)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">CCW</span>),<span class="pl-c1">D</span><span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">setLineWidth</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">!==</span>x<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">lineWidth</span>(b),x<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">setPolygonOffset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){b<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">POLYGON_OFFSET_FILL</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">disable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">POLYGON_OFFSET_FILL</span>);<span class="pl-k">!</span>b<span class="pl-k">||</span><span class="pl-c1">B</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>y<span class="pl-k">===</span>d<span class="pl-k">||</span>(<span class="pl-smi">a</span>.<span class="pl-en">polygonOffset</span>(c,d),<span class="pl-c1">B</span><span class="pl-k">=</span>c,y<span class="pl-k">=</span>d)};<span class="pl-c1">this</span>.<span class="pl-en">setScissorTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">SCISSOR_TEST</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">disable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">SCISSOR_TEST</span>)};<span class="pl-c1">this</span>.<span class="pl-en">activeTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>z<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">A</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">activeTexture</span>(b),<span class="pl-c1">A</span><span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">bindTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="LC674" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-en">activeTexture</span>();<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">J</span>[<span class="pl-c1">A</span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span>{type<span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,texture<span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>},<span class="pl-c1">J</span>[<span class="pl-c1">A</span>]<span class="pl-k">=</span>e);<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-c1">type</span><span class="pl-k">!==</span>b<span class="pl-k">||</span><span class="pl-smi">e</span>.<span class="pl-smi">texture</span><span class="pl-k">!==</span>c)<span class="pl-smi">a</span>.<span class="pl-en">bindTexture</span>(b,c),<span class="pl-smi">e</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>b,<span class="pl-smi">e</span>.<span class="pl-smi">texture</span><span class="pl-k">=</span>c};<span class="pl-c1">this</span>.<span class="pl-en">compressedTexImage2D</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">try</span>{<span class="pl-smi">a</span>.<span class="pl-smi">compressedTexImage2D</span>.<span class="pl-c1">apply</span>(a,<span class="pl-c1">arguments</span>)}<span class="pl-k">catch</span>(b){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(b)}};<span class="pl-c1">this</span>.<span class="pl-en">texImage2D</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">try</span>{<span class="pl-smi">a</span>.<span class="pl-smi">texImage2D</span>.<span class="pl-c1">apply</span>(a,<span class="pl-c1">arguments</span>)}<span class="pl-k">catch</span>(b){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(b)}};<span class="pl-c1">this</span>.<span class="pl-en">reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">1</span><span class="pl-k">===</span>g[b]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">disableVertexAttribArray</span>(b),g[b]<span class="pl-k">=</span><span class="pl-c1">0</span>);h<span class="pl-k">=</span>{};<span class="pl-c1">D</span><span class="pl-k">=</span>w<span class="pl-k">=</span>u<span class="pl-k">=</span>k<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">null</span>}};</td>
      </tr>
      <tr>
        <td id="L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="LC675" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LensFlarePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e,g,f,h,l,k,m,p,n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">context</span>,q<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">state</span>,s,t,v,u,w,<span class="pl-c1">D</span>;<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">x</span>,<span class="pl-c1">B</span>,<span class="pl-smi">y</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>){x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> <span class="pl-c1">A</span><span class="pl-k">=</span>z<span class="pl-k">/</span>y,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>y,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>z,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">16</span><span class="pl-k">/</span>z,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">C</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">C</span>),<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>v){<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]),<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]);s<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">createBuffer</span>();t<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">n</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">n</span>.<span class="pl-c1">ARRAY_BUFFER</span>,s);<span class="pl-smi">n</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">n</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-c1">C</span>,<span class="pl-smi">n</span>.<span class="pl-c1">STATIC_DRAW</span>);<span class="pl-smi">n</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">n</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,</td>
      </tr>
      <tr>
        <td id="L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="LC676" class="blob-code blob-code-inner js-file-line">t);<span class="pl-smi">n</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">n</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-c1">M</span>,<span class="pl-smi">n</span>.<span class="pl-c1">STATIC_DRAW</span>);w<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">createTexture</span>();<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">createTexture</span>();<span class="pl-smi">q</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,w);<span class="pl-smi">n</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,<span class="pl-smi">n</span>.<span class="pl-c1">RGB</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>,<span class="pl-smi">n</span>.<span class="pl-c1">RGB</span>,<span class="pl-smi">n</span>.<span class="pl-c1">UNSIGNED_BYTE</span>,<span class="pl-c1">null</span>);<span class="pl-smi">n</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_WRAP_S</span>,<span class="pl-smi">n</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>);<span class="pl-smi">n</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_WRAP_T</span>,<span class="pl-smi">n</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>);<span class="pl-smi">n</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_MAG_FILTER</span>,<span class="pl-smi">n</span>.<span class="pl-c1">NEAREST</span>);<span class="pl-smi">n</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_MIN_FILTER</span>,<span class="pl-smi">n</span>.<span class="pl-c1">NEAREST</span>);<span class="pl-smi">q</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">D</span>);<span class="pl-smi">n</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="LC677" class="blob-code blob-code-inner js-file-line">n.RGBA,16,16,0,n.RGBA,n.UNSIGNED_BYTE,null);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST);var C=(u=0&lt;n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS))?{vertexShader:&quot;uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;,</td>
      </tr>
      <tr>
        <td id="L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="LC678" class="blob-code blob-code-inner js-file-line">fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform lowp int renderType;<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform vec3 color;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>varying float vVisibility;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>if ( renderType == 0 ) {<span class="pl-cce">\n</span>gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );<span class="pl-cce">\n</span>} else if ( renderType == 1 ) {<span class="pl-cce">\n</span>gl_FragColor = texture2D( map, vUV );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>vec4 texture = texture2D( map, vUV );<span class="pl-cce">\n</span>texture.a *= opacity * vVisibility;<span class="pl-cce">\n</span>gl_FragColor = texture;<span class="pl-cce">\n</span>gl_FragColor.rgb *= color;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>}<span class="pl-k">:</span>{vertexShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform lowp int renderType;<span class="pl-cce">\n</span>uniform vec3 screenPosition;<span class="pl-cce">\n</span>uniform vec2 scale;<span class="pl-cce">\n</span>uniform float rotation;<span class="pl-cce">\n</span>attribute vec2 position;<span class="pl-cce">\n</span>attribute vec2 uv;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vUV = uv;<span class="pl-cce">\n</span>vec2 pos = position;<span class="pl-cce">\n</span>if ( renderType == 2 ) {<span class="pl-cce">\n</span>pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;<span class="pl-cce">\n</span>pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="LC679" class="blob-code blob-code-inner js-file-line">fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>precision mediump float;<span class="pl-cce">\n</span>uniform lowp int renderType;<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>uniform sampler2D occlusionMap;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform vec3 color;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>if ( renderType == 0 ) {<span class="pl-cce">\n</span>gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );<span class="pl-cce">\n</span>} else if ( renderType == 1 ) {<span class="pl-cce">\n</span>gl_FragColor = texture2D( map, vUV );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;<span class="pl-cce">\n</span>visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;<span class="pl-cce">\n</span>visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;<span class="pl-cce">\n</span>visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;<span class="pl-cce">\n</span>visibility = ( 1.0 - visibility / 4.0 );<span class="pl-cce">\n</span>vec4 texture = texture2D( map, vUV );<span class="pl-cce">\n</span>texture.a *= opacity * visibility;<span class="pl-cce">\n</span>gl_FragColor = texture;<span class="pl-cce">\n</span>gl_FragColor.rgb *= color;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="LC680" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">createProgram</span>(),<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">n</span>.<span class="pl-c1">FRAGMENT_SHADER</span>),<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">n</span>.<span class="pl-c1">VERTEX_SHADER</span>),<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-en">getPrecision</span>()<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-smi">n</span>.<span class="pl-en">shaderSource</span>(<span class="pl-c1">K</span>,<span class="pl-c1">O</span><span class="pl-k">+</span><span class="pl-c1">C</span>.<span class="pl-smi">fragmentShader</span>);<span class="pl-smi">n</span>.<span class="pl-en">shaderSource</span>(<span class="pl-c1">E</span>,<span class="pl-c1">O</span><span class="pl-k">+</span><span class="pl-c1">C</span>.<span class="pl-smi">vertexShader</span>);<span class="pl-smi">n</span>.<span class="pl-en">compileShader</span>(<span class="pl-c1">K</span>);<span class="pl-smi">n</span>.<span class="pl-en">compileShader</span>(<span class="pl-c1">E</span>);<span class="pl-smi">n</span>.<span class="pl-en">attachShader</span>(<span class="pl-c1">M</span>,<span class="pl-c1">K</span>);<span class="pl-smi">n</span>.<span class="pl-en">attachShader</span>(<span class="pl-c1">M</span>,<span class="pl-c1">E</span>);<span class="pl-smi">n</span>.<span class="pl-en">linkProgram</span>(<span class="pl-c1">M</span>);v<span class="pl-k">=</span><span class="pl-c1">M</span>;m<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getAttribLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);p<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getAttribLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>);c<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>renderType<span class="pl-pds">&quot;</span></span>);d<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>);e<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>occlusionMap<span class="pl-pds">&quot;</span></span>);g<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,</td>
      </tr>
      <tr>
        <td id="L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="LC681" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>opacity<span class="pl-pds">&quot;</span></span>);f<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>);h<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>scale<span class="pl-pds">&quot;</span></span>);l<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>rotation<span class="pl-pds">&quot;</span></span>);k<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">getUniformLocation</span>(v,<span class="pl-s"><span class="pl-pds">&quot;</span>screenPosition<span class="pl-pds">&quot;</span></span>)}<span class="pl-smi">n</span>.<span class="pl-en">useProgram</span>(v);<span class="pl-smi">q</span>.<span class="pl-en">initAttributes</span>();<span class="pl-smi">q</span>.<span class="pl-en">enableAttribute</span>(m);<span class="pl-smi">q</span>.<span class="pl-en">enableAttribute</span>(p);<span class="pl-smi">q</span>.<span class="pl-en">disableUnusedAttributes</span>();<span class="pl-smi">n</span>.<span class="pl-en">uniform1i</span>(e,<span class="pl-c1">0</span>);<span class="pl-smi">n</span>.<span class="pl-en">uniform1i</span>(d,<span class="pl-c1">1</span>);<span class="pl-smi">n</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">n</span>.<span class="pl-c1">ARRAY_BUFFER</span>,s);<span class="pl-smi">n</span>.<span class="pl-en">vertexAttribPointer</span>(m,<span class="pl-c1">2</span>,<span class="pl-smi">n</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">n</span>.<span class="pl-en">vertexAttribPointer</span>(p,<span class="pl-c1">2</span>,<span class="pl-smi">n</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>);<span class="pl-smi">n</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">n</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,t);<span class="pl-smi">q</span>.<span class="pl-en">disable</span>(<span class="pl-smi">n</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">n</span>.<span class="pl-en">depthMask</span>(<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="LC682" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-c1">M</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">M</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">16</span><span class="pl-k">/</span>z,<span class="pl-c1">N</span>.<span class="pl-c1">set</span>(<span class="pl-c1">C</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">C</span>),<span class="pl-c1">E</span><span class="pl-k">=</span>b[<span class="pl-c1">M</span>],<span class="pl-smi">x</span>.<span class="pl-c1">set</span>(<span class="pl-c1">E</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>],<span class="pl-c1">E</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>],<span class="pl-c1">E</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]),<span class="pl-smi">x</span>.<span class="pl-en">applyMatrix4</span>(<span class="pl-c1">B</span>.<span class="pl-smi">matrixWorldInverse</span>),<span class="pl-smi">x</span>.<span class="pl-en">applyProjection</span>(<span class="pl-c1">B</span>.<span class="pl-smi">projectionMatrix</span>),<span class="pl-c1">L</span>.<span class="pl-en">copy</span>(x),<span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span><span class="pl-c1">J</span>,<span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">F</span><span class="pl-k">+</span><span class="pl-c1">F</span>,u<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>y<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>z){<span class="pl-smi">q</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE0</span>);<span class="pl-smi">q</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">null</span>);<span class="pl-smi">q</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE1</span>);<span class="pl-smi">q</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,w);<span class="pl-smi">n</span>.<span class="pl-en">copyTexImage2D</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,<span class="pl-smi">n</span>.<span class="pl-c1">RGB</span>,<span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">n</span>.<span class="pl-en">uniform1i</span>(c,<span class="pl-c1">0</span>);<span class="pl-smi">n</span>.<span class="pl-en">uniform2f</span>(h,<span class="pl-c1">N</span>.<span class="pl-c1">x</span>,<span class="pl-c1">N</span>.<span class="pl-c1">y</span>);<span class="pl-smi">n</span>.<span class="pl-en">uniform3f</span>(k,</td>
      </tr>
      <tr>
        <td id="L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="LC683" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,<span class="pl-c1">L</span>.<span class="pl-c1">z</span>);<span class="pl-smi">q</span>.<span class="pl-en">disable</span>(<span class="pl-smi">n</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">q</span>.<span class="pl-en">enable</span>(<span class="pl-smi">n</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">n</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">n</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>);<span class="pl-smi">q</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE0</span>);<span class="pl-smi">q</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">D</span>);<span class="pl-smi">n</span>.<span class="pl-en">copyTexImage2D</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,<span class="pl-smi">n</span>.<span class="pl-c1">RGBA</span>,<span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">n</span>.<span class="pl-en">uniform1i</span>(c,<span class="pl-c1">1</span>);<span class="pl-smi">q</span>.<span class="pl-en">disable</span>(<span class="pl-smi">n</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">q</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE1</span>);<span class="pl-smi">q</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TEXTURE_2D</span>,w);<span class="pl-smi">n</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">n</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>);<span class="pl-c1">E</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-c1">L</span>);<span class="pl-c1">E</span>.<span class="pl-smi">customUpdateCallback</span><span class="pl-k">?</span><span class="pl-c1">E</span>.<span class="pl-en">customUpdateCallback</span>(<span class="pl-c1">E</span>)<span class="pl-k">:</span><span class="pl-c1">E</span>.<span class="pl-en">updateLensFlares</span>();<span class="pl-smi">n</span>.<span class="pl-en">uniform1i</span>(c,<span class="pl-c1">2</span>);<span class="pl-smi">q</span>.<span class="pl-en">enable</span>(<span class="pl-smi">n</span>.<span class="pl-c1">BLEND</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">O</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="LC684" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">length</span>;<span class="pl-c1">O</span><span class="pl-k">&lt;</span><span class="pl-c1">T</span>;<span class="pl-c1">O</span><span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">lensFlares</span>[<span class="pl-c1">O</span>];<span class="pl-c1">.001</span><span class="pl-k">&lt;</span><span class="pl-c1">H</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">.001</span><span class="pl-k">&lt;</span><span class="pl-c1">H</span>.<span class="pl-smi">scale</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-c1">y</span>,<span class="pl-c1">L</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-c1">z</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-c1">size</span><span class="pl-k">*</span><span class="pl-c1">H</span>.<span class="pl-smi">scale</span><span class="pl-k">/</span>z,<span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">N</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">C</span>,<span class="pl-smi">n</span>.<span class="pl-en">uniform3f</span>(k,<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,<span class="pl-c1">L</span>.<span class="pl-c1">z</span>),<span class="pl-smi">n</span>.<span class="pl-en">uniform2f</span>(h,<span class="pl-c1">N</span>.<span class="pl-c1">x</span>,<span class="pl-c1">N</span>.<span class="pl-c1">y</span>),<span class="pl-smi">n</span>.<span class="pl-en">uniform1f</span>(l,<span class="pl-c1">H</span>.<span class="pl-smi">rotation</span>),<span class="pl-smi">n</span>.<span class="pl-en">uniform1f</span>(g,<span class="pl-c1">H</span>.<span class="pl-smi">opacity</span>),<span class="pl-smi">n</span>.<span class="pl-en">uniform3f</span>(f,<span class="pl-c1">H</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">H</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">H</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>),<span class="pl-smi">q</span>.<span class="pl-en">setBlending</span>(<span class="pl-c1">H</span>.<span class="pl-smi">blending</span>,<span class="pl-c1">H</span>.<span class="pl-smi">blendEquation</span>,<span class="pl-c1">H</span>.<span class="pl-smi">blendSrc</span>,<span class="pl-c1">H</span>.<span class="pl-smi">blendDst</span>),<span class="pl-smi">a</span>.<span class="pl-en">setTexture</span>(<span class="pl-c1">H</span>.<span class="pl-smi">texture</span>,<span class="pl-c1">1</span>),<span class="pl-smi">n</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">n</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">n</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>))}}<span class="pl-smi">q</span>.<span class="pl-en">enable</span>(<span class="pl-smi">n</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">q</span>.<span class="pl-en">enable</span>(<span class="pl-smi">n</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">n</span>.<span class="pl-en">depthMask</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">a</span>.<span class="pl-en">resetGLState</span>()}}};</td>
      </tr>
      <tr>
        <td id="L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="LC685" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpritePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e,g,f,h,l,k,m,p,n,q,s,t,v,u,w;<span class="pl-k">function</span> <span class="pl-en">D</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-c1">id</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">id</span>}<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">context</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">state</span>,y,z,<span class="pl-c1">A</span>,<span class="pl-c1">J</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">L</span>,<span class="pl-c1">Q</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">A</span>){<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]),<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]);y<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">createBuffer</span>();z<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">x</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">x</span>.<span class="pl-c1">ARRAY_BUFFER</span>,y);<span class="pl-smi">x</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">x</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-c1">M</span>,<span class="pl-smi">x</span>.<span class="pl-c1">STATIC_DRAW</span>);<span class="pl-smi">x</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">x</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,</td>
      </tr>
      <tr>
        <td id="L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="LC686" class="blob-code blob-code-inner js-file-line">z);<span class="pl-smi">x</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">x</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-c1">K</span>,<span class="pl-smi">x</span>.<span class="pl-c1">STATIC_DRAW</span>);<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">createProgram</span>(),<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">x</span>.<span class="pl-c1">VERTEX_SHADER</span>),<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">x</span>.<span class="pl-c1">FRAGMENT_SHADER</span>);<span class="pl-smi">x</span>.<span class="pl-en">shaderSource</span>(<span class="pl-c1">K</span>,[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-en">getPrecision</span>()<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 modelViewMatrix;<span class="pl-cce">\n</span>uniform mat4 projectionMatrix;<span class="pl-cce">\n</span>uniform float rotation;<span class="pl-cce">\n</span>uniform vec2 scale;<span class="pl-cce">\n</span>uniform vec2 uvOffset;<span class="pl-cce">\n</span>uniform vec2 uvScale;<span class="pl-cce">\n</span>attribute vec2 position;<span class="pl-cce">\n</span>attribute vec2 uv;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vUV = uvOffset + uv * uvScale;<span class="pl-cce">\n</span>vec2 alignedPosition = position * scale;<span class="pl-cce">\n</span>vec2 rotatedPosition;<span class="pl-cce">\n</span>rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;<span class="pl-cce">\n</span>rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;<span class="pl-cce">\n</span>vec4 finalPosition;<span class="pl-cce">\n</span>finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );<span class="pl-cce">\n</span>finalPosition.xy += rotatedPosition;<span class="pl-cce">\n</span>finalPosition = projectionMatrix * finalPosition;<span class="pl-cce">\n</span>gl_Position = finalPosition;<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="LC687" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">x</span>.<span class="pl-en">shaderSource</span>(<span class="pl-c1">E</span>,[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-en">getPrecision</span>()<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 color;<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform int fogType;<span class="pl-cce">\n</span>uniform vec3 fogColor;<span class="pl-cce">\n</span>uniform float fogDensity;<span class="pl-cce">\n</span>uniform float fogNear;<span class="pl-cce">\n</span>uniform float fogFar;<span class="pl-cce">\n</span>uniform float alphaTest;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec4 texture = texture2D( map, vUV );<span class="pl-cce">\n</span>if ( texture.a &lt; alphaTest ) discard;<span class="pl-cce">\n</span>gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );<span class="pl-cce">\n</span>if ( fogType &gt; 0 ) {<span class="pl-cce">\n</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n</span>float fogFactor = 0.0;<span class="pl-cce">\n</span>if ( fogType == 1 ) {<span class="pl-cce">\n</span>fogFactor = smoothstep( fogNear, fogFar, depth );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>const float LOG2 = 1.442695;<span class="pl-cce">\n</span>fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );<span class="pl-cce">\n</span>fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="LC688" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">x</span>.<span class="pl-en">compileShader</span>(<span class="pl-c1">K</span>);<span class="pl-smi">x</span>.<span class="pl-en">compileShader</span>(<span class="pl-c1">E</span>);<span class="pl-smi">x</span>.<span class="pl-en">attachShader</span>(<span class="pl-c1">M</span>,<span class="pl-c1">K</span>);<span class="pl-smi">x</span>.<span class="pl-en">attachShader</span>(<span class="pl-c1">M</span>,<span class="pl-c1">E</span>);<span class="pl-smi">x</span>.<span class="pl-en">linkProgram</span>(<span class="pl-c1">M</span>);<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">M</span>;u<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getAttribLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);w<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getAttribLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>);c<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uvOffset<span class="pl-pds">&quot;</span></span>);d<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uvScale<span class="pl-pds">&quot;</span></span>);e<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>rotation<span class="pl-pds">&quot;</span></span>);g<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>scale<span class="pl-pds">&quot;</span></span>);f<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>);h<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>);l<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>opacity<span class="pl-pds">&quot;</span></span>);k<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>modelViewMatrix<span class="pl-pds">&quot;</span></span>);m<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>projectionMatrix<span class="pl-pds">&quot;</span></span>);p<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="LC689" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>fogType<span class="pl-pds">&quot;</span></span>);n<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>fogDensity<span class="pl-pds">&quot;</span></span>);q<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>fogNear<span class="pl-pds">&quot;</span></span>);s<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>fogFar<span class="pl-pds">&quot;</span></span>);t<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>fogColor<span class="pl-pds">&quot;</span></span>);v<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-en">getUniformLocation</span>(<span class="pl-c1">A</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>alphaTest<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">M</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-c1">M</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">K</span>.<span class="pl-smi">fillStyle</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>white<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">K</span>.<span class="pl-en">fillRect</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">8</span>,<span class="pl-c1">8</span>);<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(<span class="pl-c1">M</span>);<span class="pl-c1">J</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-smi">x</span>.<span class="pl-en">useProgram</span>(<span class="pl-c1">A</span>);<span class="pl-c1">B</span>.<span class="pl-en">initAttributes</span>();<span class="pl-c1">B</span>.<span class="pl-en">enableAttribute</span>(u);<span class="pl-c1">B</span>.<span class="pl-en">enableAttribute</span>(w);<span class="pl-c1">B</span>.<span class="pl-en">disableUnusedAttributes</span>();<span class="pl-c1">B</span>.<span class="pl-en">disable</span>(<span class="pl-smi">x</span>.<span class="pl-c1">CULL_FACE</span>);</td>
      </tr>
      <tr>
        <td id="L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="LC690" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">B</span>.<span class="pl-en">enable</span>(<span class="pl-smi">x</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">x</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">x</span>.<span class="pl-c1">ARRAY_BUFFER</span>,y);<span class="pl-smi">x</span>.<span class="pl-en">vertexAttribPointer</span>(u,<span class="pl-c1">2</span>,<span class="pl-smi">x</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">x</span>.<span class="pl-en">vertexAttribPointer</span>(w,<span class="pl-c1">2</span>,<span class="pl-smi">x</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>);<span class="pl-smi">x</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">x</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,z);<span class="pl-smi">x</span>.<span class="pl-en">uniformMatrix4fv</span>(m,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">Q</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-c1">elements</span>);<span class="pl-c1">B</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">x</span>.<span class="pl-c1">TEXTURE0</span>);<span class="pl-smi">x</span>.<span class="pl-en">uniform1i</span>(h,<span class="pl-c1">0</span>);<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">0</span>;(<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">fog</span>)<span class="pl-k">?</span>(<span class="pl-smi">x</span>.<span class="pl-en">uniform3f</span>(t,<span class="pl-c1">E</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">E</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">E</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>),<span class="pl-c1">E</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Fog</span><span class="pl-k">?</span>(<span class="pl-smi">x</span>.<span class="pl-en">uniform1f</span>(q,<span class="pl-c1">E</span>.<span class="pl-smi">near</span>),<span class="pl-smi">x</span>.<span class="pl-en">uniform1f</span>(s,<span class="pl-c1">E</span>.<span class="pl-smi">far</span>),<span class="pl-smi">x</span>.<span class="pl-en">uniform1i</span>(p,<span class="pl-c1">1</span>),<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">E</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">FogExp2</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">x</span>.<span class="pl-en">uniform1f</span>(n,<span class="pl-c1">E</span>.<span class="pl-smi">density</span>),<span class="pl-smi">x</span>.<span class="pl-en">uniform1i</span>(p,<span class="pl-c1">2</span>),<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">2</span>))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="LC691" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">x</span>.<span class="pl-en">uniform1i</span>(p,<span class="pl-c1">0</span>),<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-c1">E</span><span class="pl-k">&lt;</span><span class="pl-c1">O</span>;<span class="pl-c1">E</span><span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">T</span><span class="pl-k">=</span>b[<span class="pl-c1">E</span>];<span class="pl-c1">T</span>.<span class="pl-smi">modelViewMatrix</span>.<span class="pl-en">multiplyMatrices</span>(<span class="pl-c1">Q</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-c1">T</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">T</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">T</span>.<span class="pl-smi">modelViewMatrix</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]}<span class="pl-smi">b</span>.<span class="pl-c1">sort</span>(<span class="pl-c1">D</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span>[],<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-c1">E</span><span class="pl-k">&lt;</span><span class="pl-c1">O</span>;<span class="pl-c1">E</span><span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">T</span><span class="pl-k">=</span>b[<span class="pl-c1">E</span>],<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-smi">material</span>;<span class="pl-smi">x</span>.<span class="pl-en">uniform1f</span>(v,<span class="pl-c1">R</span>.<span class="pl-smi">alphaTest</span>);<span class="pl-smi">x</span>.<span class="pl-en">uniformMatrix4fv</span>(k,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">T</span>.<span class="pl-smi">modelViewMatrix</span>.<span class="pl-c1">elements</span>);<span class="pl-c1">T</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">decompose</span>(<span class="pl-c1">F</span>,<span class="pl-c1">C</span>,<span class="pl-c1">N</span>);<span class="pl-c1">H</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span>;<span class="pl-c1">H</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">L</span>.<span class="pl-smi">fog</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">R</span>.<span class="pl-smi">fog</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">K</span>);<span class="pl-c1">M</span><span class="pl-k">!==</span><span class="pl-c1">T</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">x</span>.<span class="pl-en">uniform1i</span>(p,<span class="pl-c1">T</span>),<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">T</span>);<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-c1">R</span>.<span class="pl-smi">map</span><span class="pl-k">?</span>(<span class="pl-smi">x</span>.<span class="pl-en">uniform2f</span>(c,<span class="pl-c1">R</span>.<span class="pl-smi">map</span>.<span class="pl-smi">offset</span>.<span class="pl-c1">x</span>,<span class="pl-c1">R</span>.<span class="pl-smi">map</span>.<span class="pl-smi">offset</span>.<span class="pl-c1">y</span>),<span class="pl-smi">x</span>.<span class="pl-en">uniform2f</span>(d,</td>
      </tr>
      <tr>
        <td id="L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="LC692" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">R</span>.<span class="pl-smi">map</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">x</span>,<span class="pl-c1">R</span>.<span class="pl-smi">map</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">y</span>))<span class="pl-k">:</span>(<span class="pl-smi">x</span>.<span class="pl-en">uniform2f</span>(c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">x</span>.<span class="pl-en">uniform2f</span>(d,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>));<span class="pl-smi">x</span>.<span class="pl-en">uniform1f</span>(l,<span class="pl-c1">R</span>.<span class="pl-smi">opacity</span>);<span class="pl-smi">x</span>.<span class="pl-en">uniform3f</span>(f,<span class="pl-c1">R</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">R</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">R</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>);<span class="pl-smi">x</span>.<span class="pl-en">uniform1f</span>(e,<span class="pl-c1">R</span>.<span class="pl-smi">rotation</span>);<span class="pl-smi">x</span>.<span class="pl-en">uniform2fv</span>(g,<span class="pl-c1">H</span>);<span class="pl-c1">B</span>.<span class="pl-en">setBlending</span>(<span class="pl-c1">R</span>.<span class="pl-smi">blending</span>,<span class="pl-c1">R</span>.<span class="pl-smi">blendEquation</span>,<span class="pl-c1">R</span>.<span class="pl-smi">blendSrc</span>,<span class="pl-c1">R</span>.<span class="pl-smi">blendDst</span>);<span class="pl-c1">B</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-c1">R</span>.<span class="pl-smi">depthTest</span>);<span class="pl-c1">B</span>.<span class="pl-en">setDepthWrite</span>(<span class="pl-c1">R</span>.<span class="pl-smi">depthWrite</span>);<span class="pl-c1">R</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">R</span>.<span class="pl-smi">map</span>.<span class="pl-smi">image</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">R</span>.<span class="pl-smi">map</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-en">setTexture</span>(<span class="pl-c1">R</span>.<span class="pl-smi">map</span>,<span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">setTexture</span>(<span class="pl-c1">J</span>,<span class="pl-c1">0</span>);<span class="pl-smi">x</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">x</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">x</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>)}<span class="pl-c1">B</span>.<span class="pl-en">enable</span>(<span class="pl-smi">x</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">a</span>.<span class="pl-en">resetGLState</span>()}}};</td>
      </tr>
      <tr>
        <td id="L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="LC693" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurveUtils</span><span class="pl-k">=</span>{<span class="pl-en">tangentQuadraticBezier</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(c<span class="pl-k">-</span>b)<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">*</span>(d<span class="pl-k">-</span>c)},<span class="pl-en">tangentCubicBezier</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>d<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>e},<span class="pl-en">tangentSpline</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">+</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>a)<span class="pl-k">+</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a)},<span class="pl-en">interpolate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a);d<span class="pl-k">=</span><span class="pl-c1">.5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span>b);<span class="pl-k">var</span> g<span class="pl-k">=</span>e<span class="pl-k">*</span>e;<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>e<span class="pl-k">*</span>g<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b}};</td>
      </tr>
      <tr>
        <td id="L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="LC694" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span><span class="pl-k">=</span>{<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> d;b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-en">updateMatrix</span>(),d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">matrix</span>,b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">geometry</span>);<span class="pl-smi">a</span>.<span class="pl-en">merge</span>(b,d,c)},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">center</span>()}};</td>
      </tr>
      <tr>
        <td id="L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="LC695" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span><span class="pl-k">=</span>{crossOrigin<span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-en">loadTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ImageUtils.loadTexture is being deprecated. Use THREE.TextureLoader() instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TextureLoader</span>;<span class="pl-smi">e</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">load</span>(a,c,<span class="pl-k">void</span> <span class="pl-c1">0</span>,d);b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span>b);<span class="pl-k">return</span> a},<span class="pl-en">loadTextureCube</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ImageUtils.loadTextureCube is being deprecated. Use THREE.CubeTextureLoader() instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CubeTextureLoader</span>;<span class="pl-smi">e</span>.<span class="pl-en">setCrossOrigin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>);a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">load</span>(a,</td>
      </tr>
      <tr>
        <td id="L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="LC696" class="blob-code blob-code-inner js-file-line">c,<span class="pl-k">void</span> <span class="pl-c1">0</span>,d);b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span>b);<span class="pl-k">return</span> a},<span class="pl-en">loadCompressedTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">loadCompressedTextureCube</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.<span class="pl-pds">&quot;</span></span>)}};</td>
      </tr>
      <tr>
        <td id="L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="LC697" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SceneUtils</span><span class="pl-k">=</span>{<span class="pl-en">createMultiMaterialObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Group</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">add</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(a,b[d]));<span class="pl-k">return</span> c},<span class="pl-en">detach</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-c1">remove</span>(a);<span class="pl-smi">c</span>.<span class="pl-c1">add</span>(a)},<span class="pl-en">attach</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-smi">d</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">c</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix</span>(d);<span class="pl-smi">b</span>.<span class="pl-c1">remove</span>(a);<span class="pl-smi">c</span>.<span class="pl-c1">add</span>(a)}};</td>
      </tr>
      <tr>
        <td id="L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="LC698" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span><span class="pl-k">=</span>{<span class="pl-en">area</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>b<span class="pl-k">-</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>b;d<span class="pl-k">=</span>e<span class="pl-k">++</span>)c<span class="pl-k">+=</span>a[d].<span class="pl-c1">x</span><span class="pl-k">*</span>a[e].<span class="pl-c1">y</span><span class="pl-k">-</span>a[e].<span class="pl-c1">x</span><span class="pl-k">*</span>a[d].<span class="pl-c1">y</span>;<span class="pl-k">return</span>.<span class="pl-ii">5</span><span class="pl-k">*</span>c},<span class="pl-en">triangulate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">&gt;</span>c)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span>[],e<span class="pl-k">=</span>[],g<span class="pl-k">=</span>[],f,h,l;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">area</span>(a))<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>c;h<span class="pl-k">++</span>)e[h]<span class="pl-k">=</span>h;<span class="pl-k">else</span> <span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>c;h<span class="pl-k">++</span>)e[h]<span class="pl-k">=</span>c<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">-</span>h;<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>c;<span class="pl-k">for</span>(h<span class="pl-k">=</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">2</span><span class="pl-k">&lt;</span>c;){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;=</span>k<span class="pl-k">--</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>}f<span class="pl-k">=</span>h;c<span class="pl-k">&lt;=</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>);h<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;=</span>h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>);l<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;=</span>l<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> m;a<span class="pl-k">:</span>{<span class="pl-k">var</span> p<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="LC699" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,s<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,t<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,v<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,w<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,p<span class="pl-k">=</span>a[e[f]].<span class="pl-c1">x</span>,n<span class="pl-k">=</span>a[e[f]].<span class="pl-c1">y</span>,q<span class="pl-k">=</span>a[e[h]].<span class="pl-c1">x</span>,s<span class="pl-k">=</span>a[e[h]].<span class="pl-c1">y</span>,t<span class="pl-k">=</span>a[e[l]].<span class="pl-c1">x</span>,v<span class="pl-k">=</span>a[e[l]].<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&gt;</span>(q<span class="pl-k">-</span>p)<span class="pl-k">*</span>(v<span class="pl-k">-</span>n)<span class="pl-k">-</span>(s<span class="pl-k">-</span>n)<span class="pl-k">*</span>(t<span class="pl-k">-</span>p))m<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,x<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,y<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,z<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">J</span><span class="pl-k">=</span>w<span class="pl-k">=</span>u<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">D</span><span class="pl-k">=</span>t<span class="pl-k">-</span>q,x<span class="pl-k">=</span>v<span class="pl-k">-</span>s,<span class="pl-c1">B</span><span class="pl-k">=</span>p<span class="pl-k">-</span>t,y<span class="pl-k">=</span>n<span class="pl-k">-</span>v,z<span class="pl-k">=</span>q<span class="pl-k">-</span>p,<span class="pl-c1">A</span><span class="pl-k">=</span>s<span class="pl-k">-</span>n;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>c;m<span class="pl-k">++</span>)<span class="pl-k">if</span>(u<span class="pl-k">=</span>a[e[m]].<span class="pl-c1">x</span>,w<span class="pl-k">=</span>a[e[m]].<span class="pl-c1">y</span>,<span class="pl-k">!</span>(u<span class="pl-k">===</span>p<span class="pl-k">&amp;&amp;</span>w<span class="pl-k">===</span>n<span class="pl-k">||</span>u<span class="pl-k">===</span>q<span class="pl-k">&amp;&amp;</span>w<span class="pl-k">===</span>s<span class="pl-k">||</span>u<span class="pl-k">===</span>t<span class="pl-k">&amp;&amp;</span>w<span class="pl-k">===</span>v)<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span><span class="pl-k">=</span>u<span class="pl-k">-</span>p,<span class="pl-c1">F</span><span class="pl-k">=</span>w<span class="pl-k">-</span>n,<span class="pl-c1">C</span><span class="pl-k">=</span>u<span class="pl-k">-</span>q,<span class="pl-c1">N</span><span class="pl-k">=</span>w<span class="pl-k">-</span>s,u<span class="pl-k">-=</span>t,w<span class="pl-k">-=</span>v,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">-</span>x<span class="pl-k">*</span><span class="pl-c1">C</span>,<span class="pl-c1">J</span><span class="pl-k">=</span>z<span class="pl-k">*</span><span class="pl-c1">F</span><span class="pl-k">-</span><span class="pl-c1">A</span><span class="pl-k">*</span><span class="pl-c1">J</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">B</span><span class="pl-k">*</span>w<span class="pl-k">-</span>y<span class="pl-k">*</span>u,<span class="pl-c1">C</span><span class="pl-k">&gt;=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="LC700" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span><span class="pl-k">&gt;=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">J</span><span class="pl-k">&gt;=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span>)){m<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">break</span> a}m<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}<span class="pl-k">if</span>(m){<span class="pl-smi">d</span>.<span class="pl-c1">push</span>([a[e[f]],a[e[h]],a[e[l]]]);<span class="pl-smi">g</span>.<span class="pl-c1">push</span>([e[f],e[h],e[l]]);f<span class="pl-k">=</span>h;<span class="pl-k">for</span>(l<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>,l<span class="pl-k">++</span>)e[f]<span class="pl-k">=</span>e[l];c<span class="pl-k">--</span>;k<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>c}}<span class="pl-k">return</span> b<span class="pl-k">?</span>g<span class="pl-k">:</span>d}}(),<span class="pl-en">triangulateShape</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>}function d(a,b,d,e,f){var g=b.x-a.x,h=b.y-a.y,k=e.x-d.x,l=e.y-d.y,m=a.x-d.x,p=a.y-d.y,z=h*k-g*l,A=h*m-g*p;if(Math.abs(z)&gt;Number.EPSILON){if(0&lt;z){if(0&gt;A||A&gt;</td>
      </tr>
      <tr>
        <td id="L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="LC701" class="blob-code blob-code-inner js-file-line">z)<span class="pl-k">return</span>[];k<span class="pl-k">=</span>l<span class="pl-k">*</span>m<span class="pl-k">-</span>k<span class="pl-k">*</span>p;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>k<span class="pl-k">||</span>k<span class="pl-k">&gt;</span>z)<span class="pl-k">return</span>[]}<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">A</span><span class="pl-k">||</span><span class="pl-c1">A</span><span class="pl-k">&lt;</span>z)<span class="pl-k">return</span>[];k<span class="pl-k">=</span>l<span class="pl-k">*</span>m<span class="pl-k">-</span>k<span class="pl-k">*</span>p;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>k<span class="pl-k">||</span>k<span class="pl-k">&lt;</span>z)<span class="pl-k">return</span>[]}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>k)<span class="pl-k">return</span><span class="pl-k">!</span>f<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">A</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">A</span><span class="pl-k">!==</span>z<span class="pl-k">?</span>[a]<span class="pl-k">:</span>[];<span class="pl-k">if</span>(k<span class="pl-k">===</span>z)<span class="pl-k">return</span><span class="pl-k">!</span>f<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">A</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">A</span><span class="pl-k">!==</span>z<span class="pl-k">?</span>[b]<span class="pl-k">:</span>[];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">A</span>)<span class="pl-k">return</span>[d];<span class="pl-k">if</span>(<span class="pl-c1">A</span><span class="pl-k">===</span>z)<span class="pl-k">return</span>[e];f<span class="pl-k">=</span>k<span class="pl-k">/</span>z;<span class="pl-k">return</span>[{x<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>f<span class="pl-k">*</span>g,y<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>h}]}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">A</span><span class="pl-k">||</span>l<span class="pl-k">*</span>m<span class="pl-k">!==</span>k<span class="pl-k">*</span>p)<span class="pl-k">return</span>[];h<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>h;k<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>k<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>l;<span class="pl-k">if</span>(h<span class="pl-k">&amp;&amp;</span>k)<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">?</span>[]<span class="pl-k">:</span>[a];<span class="pl-k">if</span>(h)<span class="pl-k">return</span> <span class="pl-en">c</span>(d,e,a)<span class="pl-k">?</span>[a]<span class="pl-k">:</span>[];<span class="pl-k">if</span>(k)<span class="pl-k">return</span> <span class="pl-en">c</span>(a,b,d)<span class="pl-k">?</span>[d]<span class="pl-k">:</span>[];<span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">?</span>(g<span class="pl-k">=</span>a,k<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,h<span class="pl-k">=</span>b,a<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span>(g<span class="pl-k">=</span>b,k<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>,h<span class="pl-k">=</span>a,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>),<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">?</span>(b<span class="pl-k">=</span>d,z<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span>,l<span class="pl-k">=</span>e,d<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="LC702" class="blob-code blob-code-inner js-file-line">e,z<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>,l<span class="pl-k">=</span>d,d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span>))<span class="pl-k">:</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">?</span>(g<span class="pl-k">=</span>a,k<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,h<span class="pl-k">=</span>b,a<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(g<span class="pl-k">=</span>b,k<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>,h<span class="pl-k">=</span>a,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>),<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">?</span>(b<span class="pl-k">=</span>d,z<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>,l<span class="pl-k">=</span>e,d<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span>e,z<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>,l<span class="pl-k">=</span>d,d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>));<span class="pl-k">return</span> k<span class="pl-k">&lt;=</span>z<span class="pl-k">?</span>a<span class="pl-k">&lt;</span>z<span class="pl-k">?</span>[]<span class="pl-k">:</span>a<span class="pl-k">===</span>z<span class="pl-k">?</span>f<span class="pl-k">?</span>[]<span class="pl-k">:</span>[b]<span class="pl-k">:</span>a<span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>[b,h]<span class="pl-k">:</span>[b,l]<span class="pl-k">:</span>k<span class="pl-k">&gt;</span>d<span class="pl-k">?</span>[]<span class="pl-k">:</span>k<span class="pl-k">===</span>d<span class="pl-k">?</span>f<span class="pl-k">?</span>[]<span class="pl-k">:</span>[g]<span class="pl-k">:</span>a<span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>[g,h]<span class="pl-k">:</span>[g,l]}function e(a,b,c,d){var e=b.x-a.x,f=b.y-a.y;b=c.x-a.x;c=c.y-a.y;var g=d.x-a.x;d=d.y-a.y;a=e*c-f*b;e=e*d-f*g;return Math.abs(a)&gt;Number.EPSILON?(b=g*c-d*b,0&lt;a?0&lt;=e&amp;&amp;0&lt;=b:0&lt;=e||0&lt;=b):0&lt;e}var g,f,h,l,k,m={};h=a.concat();g=0;for(f=b.length;g&lt;f;g++)Array.prototype.push.apply(h,b[g]);g=0;for(f=</td>
      </tr>
      <tr>
        <td id="L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="LC703" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)k<span class="pl-k">=</span>h[g].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>h[g].<span class="pl-c1">y</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>m[k]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Shape: Duplicate point<span class="pl-pds">&quot;</span></span>,k),m[k]<span class="pl-k">=</span>g;<span class="pl-en">g</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>d);<span class="pl-k">var</span> g<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>;g<span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>);d<span class="pl-k">=</span><span class="pl-en">e</span>(h[a],h[f],h[g],k[b]);<span class="pl-k">if</span>(<span class="pl-k">!</span>d)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span>b<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>d);g<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>;g<span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">return</span>(d<span class="pl-k">=</span><span class="pl-en">e</span>(k[b],k[f],k[g],h[a]))<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>}function f(a,b){var c,e;for(c=0;c&lt;h.length;c++)if(e=c+1,e%=h.length,e=d(a,b,h[c],h[e],!0),0&lt;e.length)return!0;return!1}function g(a,c){var e,f,h,k;for(e=0;e&lt;l.length;e++)for(f=b[l[e]],</td>
      </tr>
      <tr>
        <td id="L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="LC704" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;h<span class="pl-k">++</span>)<span class="pl-k">if</span>(k<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>,k<span class="pl-k">%=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>,k<span class="pl-k">=</span><span class="pl-en">d</span>(a,c,f[h],f[k],<span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">concat</span>(),k,l<span class="pl-k">=</span>[],m,p,y,z,<span class="pl-c1">A</span>,<span class="pl-c1">J</span><span class="pl-k">=</span>[],<span class="pl-c1">F</span>,<span class="pl-c1">C</span>,<span class="pl-c1">N</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-c1">L</span><span class="pl-k">&lt;</span>m;<span class="pl-c1">L</span><span class="pl-k">++</span>)<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(<span class="pl-c1">L</span>);<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;){<span class="pl-c1">Q</span><span class="pl-k">--</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">Q</span>){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Infinite Loop! Holes left:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>, Probably Hole outside Shape!<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>}<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">F</span>;p<span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;p<span class="pl-k">++</span>){y<span class="pl-k">=</span>h[p];m<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">L</span><span class="pl-k">&lt;</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;<span class="pl-c1">L</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(z<span class="pl-k">=</span>l[<span class="pl-c1">L</span>],<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">y</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>z,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">J</span>[<span class="pl-c1">A</span>]){k<span class="pl-k">=</span>b[z];<span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">C</span><span class="pl-k">&lt;</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;<span class="pl-c1">C</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(z<span class="pl-k">=</span>k[<span class="pl-c1">C</span>],<span class="pl-en">c</span>(p,<span class="pl-c1">C</span>)<span class="pl-k">&amp;&amp;!</span><span class="pl-en">f</span>(y,z)<span class="pl-k">&amp;&amp;!</span><span class="pl-en">g</span>(y,z)){m<span class="pl-k">=</span><span class="pl-c1">C</span>;<span class="pl-smi">l</span>.<span class="pl-c1">splice</span>(<span class="pl-c1">L</span>,<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="LC705" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,p<span class="pl-k">+</span><span class="pl-c1">1</span>);z<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">slice</span>(p);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">slice</span>(m);<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,m<span class="pl-k">+</span><span class="pl-c1">1</span>);h<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-c1">concat</span>(<span class="pl-c1">C</span>).<span class="pl-c1">concat</span>(<span class="pl-c1">N</span>).<span class="pl-c1">concat</span>(z);<span class="pl-c1">F</span><span class="pl-k">=</span>p;<span class="pl-k">break</span>}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>m)<span class="pl-k">break</span>;<span class="pl-c1">J</span>[<span class="pl-c1">A</span>]<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>m)<span class="pl-k">break</span>}}<span class="pl-k">return</span> h}(a,b);<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">triangulate</span>(g,<span class="pl-k">!</span><span class="pl-c1">1</span>);g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(l<span class="pl-k">=</span>p[g],h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>h;h<span class="pl-k">++</span>)k<span class="pl-k">=</span>l[h].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>l[h].<span class="pl-c1">y</span>,k<span class="pl-k">=</span>m[k],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>(l[h]<span class="pl-k">=</span>k);<span class="pl-k">return</span> <span class="pl-smi">p</span>.<span class="pl-c1">concat</span>()},<span class="pl-en">isClockWise</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">area</span>(a)},<span class="pl-en">b2</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> e<span class="pl-k">*</span>e<span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>a<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>d}}(),<span class="pl-en">b3</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="LC706" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span><span class="pl-k">-</span>a,f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> g<span class="pl-k">*</span>g<span class="pl-k">*</span>g<span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>f<span class="pl-k">*</span>f<span class="pl-k">*</span>a<span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>e}}()};<span class="pl-c1">THREE</span>.<span class="pl-en">Audio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Audio<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">context</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">context</span>;<span class="pl-c1">this</span>.<span class="pl-c1">source</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">context</span>.<span class="pl-en">createBufferSource</span>();<span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-smi">onended</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">onEnded</span>.<span class="pl-en">bind</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">gain</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">context</span>.<span class="pl-en">createGain</span>();<span class="pl-c1">this</span>.<span class="pl-smi">gain</span>.<span class="pl-en">connect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">context</span>.<span class="pl-smi">destination</span>);<span class="pl-c1">this</span>.<span class="pl-smi">panner</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">context</span>.<span class="pl-en">createPanner</span>();<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>.<span class="pl-en">connect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">gain</span>);<span class="pl-c1">this</span>.<span class="pl-smi">autoplay</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">playbackRate</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="LC707" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">load</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;<span class="pl-smi">c</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">c</span>.<span class="pl-smi">responseType</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">c</span>.<span class="pl-en">onload</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">b</span>.<span class="pl-smi">context</span>.<span class="pl-en">decodeAudioData</span>(<span class="pl-c1">this</span>.<span class="pl-smi">response</span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">b</span>.<span class="pl-c1">source</span>.<span class="pl-smi">buffer</span><span class="pl-k">=</span>a;<span class="pl-smi">b</span>.<span class="pl-smi">autoplay</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">play</span>()})};<span class="pl-smi">c</span>.<span class="pl-c1">send</span>();<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="LC708" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">play</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span>)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Audio: Audio is already playing.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">context</span>.<span class="pl-en">createBufferSource</span>();<span class="pl-smi">a</span>.<span class="pl-smi">buffer</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-smi">buffer</span>;<span class="pl-smi">a</span>.<span class="pl-smi">loop</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-smi">loop</span>;<span class="pl-smi">a</span>.<span class="pl-smi">onended</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-smi">onended</span>;<span class="pl-smi">a</span>.<span class="pl-c1">start</span>(<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span>);<span class="pl-smi">a</span>.<span class="pl-smi">playbackRate</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">playbackRate</span>;<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">source</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">connect</span>()}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pause</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-c1">stop</span>();<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">context</span>.<span class="pl-smi">currentTime</span>};</td>
      </tr>
      <tr>
        <td id="L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="LC709" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-c1">stop</span>();<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">connect</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">filter</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-en">connect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">filter</span>),<span class="pl-c1">this</span>.<span class="pl-smi">filter</span>.<span class="pl-en">connect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>))<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-en">connect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">disconnect</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">filter</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-c1">disconnect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">filter</span>),<span class="pl-c1">this</span>.<span class="pl-smi">filter</span>.<span class="pl-c1">disconnect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>))<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-c1">disconnect</span>(<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>)};</td>
      </tr>
      <tr>
        <td id="L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="LC710" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">disconnect</span>(),<span class="pl-c1">this</span>.<span class="pl-smi">filter</span><span class="pl-k">=</span>a,<span class="pl-c1">this</span>.<span class="pl-en">connect</span>())<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">filter</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">filter</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setPlaybackRate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">playbackRate</span><span class="pl-k">=</span>a;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-smi">playbackRate</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">playbackRate</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPlaybackRate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">playbackRate</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">onEnded</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="LC711" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLoop</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-smi">loop</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLoop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">source</span>.<span class="pl-smi">loop</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setRefDistance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>.<span class="pl-smi">refDistance</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getRefDistance</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">panner</span>.<span class="pl-smi">refDistance</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setRolloffFactor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>.<span class="pl-smi">rolloffFactor</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getRolloffFactor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">panner</span>.<span class="pl-smi">rolloffFactor</span>};</td>
      </tr>
      <tr>
        <td id="L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="LC712" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setVolume</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">gain</span>.<span class="pl-smi">gain</span>.<span class="pl-c1">value</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getVolume</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">gain</span>.<span class="pl-smi">gain</span>.<span class="pl-c1">value</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">updateMatrixWorld</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,b);<span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">this</span>.<span class="pl-smi">panner</span>.<span class="pl-en">setPosition</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>)}}();<span class="pl-c1">THREE</span>.<span class="pl-en">AudioListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>AudioListener<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">context</span><span class="pl-k">=</span><span class="pl-k">new</span> (<span class="pl-c1">window</span>.<span class="pl-smi">AudioContext</span><span class="pl-k">||</span><span class="pl-c1">window</span>.<span class="pl-smi">webkitAudioContext</span>)};</td>
      </tr>
      <tr>
        <td id="L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="LC713" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AudioListener</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">AudioListener</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AudioListener</span>;</td>
      </tr>
      <tr>
        <td id="L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="LC714" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AudioListener</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">updateMatrixWorld</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,e);e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">context</span>.<span class="pl-smi">listener</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">up</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">decompose</span>(a,b,c);<span class="pl-smi">d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).<span class="pl-en">applyQuaternion</span>(b);<span class="pl-smi">e</span>.<span class="pl-en">setPosition</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);<span class="pl-smi">e</span>.<span class="pl-en">setOrientation</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span>,<span class="pl-smi">d</span>.<span class="pl-c1">y</span>,<span class="pl-smi">d</span>.<span class="pl-c1">z</span>,<span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">g</span>.<span class="pl-c1">z</span>)}}();<span class="pl-c1">THREE</span>.<span class="pl-en">Curve</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="LC715" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Curve,getPoint:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Curve: Warning, getPoint() not implemented!<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">null</span>},<span class="pl-en">getPointAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getUtoTmapping</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(a)},<span class="pl-en">getPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>);<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;=</span>a;b<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(b<span class="pl-k">/</span>a));<span class="pl-k">return</span> c},<span class="pl-en">getSpacedPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>);<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;=</span>a;b<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getPointAt</span>(b<span class="pl-k">/</span>a));<span class="pl-k">return</span> c},<span class="pl-en">getLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getLengths</span>();<span class="pl-k">return</span> a[<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]},<span class="pl-en">getLengths</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="LC716" class="blob-code blob-code-inner js-file-line">(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__arcLengthDivisions</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">__arcLengthDivisions</span><span class="pl-k">:</span><span class="pl-c1">200</span>);<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span>.<span class="pl-c1">length</span><span class="pl-k">===</span>a<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span>;<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(<span class="pl-c1">0</span>),e,g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>);<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>a;e<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(e<span class="pl-k">/</span>a),g<span class="pl-k">+=</span><span class="pl-smi">c</span>.<span class="pl-en">distanceTo</span>(d),<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(g),d<span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span><span class="pl-k">=</span>b},<span class="pl-en">updateArcLengths</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">getLengths</span>()},<span class="pl-en">getUtoTmapping</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getLengths</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>,g;g<span class="pl-k">=</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span>a<span class="pl-k">*</span>c[e<span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>e<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="LC717" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>,l;f<span class="pl-k">&lt;=</span>h;)<span class="pl-k">if</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(f<span class="pl-k">+</span>(h<span class="pl-k">-</span>f)<span class="pl-k">/</span><span class="pl-c1">2</span>),l<span class="pl-k">=</span>c[d]<span class="pl-k">-</span>g,<span class="pl-c1">0</span><span class="pl-k">&gt;</span>l)f<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>l)h<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{h<span class="pl-k">=</span>d;<span class="pl-k">break</span>}d<span class="pl-k">=</span>h;<span class="pl-k">if</span>(c[d]<span class="pl-k">===</span>g)<span class="pl-k">return</span> d<span class="pl-k">/</span>(e<span class="pl-k">-</span><span class="pl-c1">1</span>);f<span class="pl-k">=</span>c[d];<span class="pl-k">return</span> c<span class="pl-k">=</span>(d<span class="pl-k">+</span>(g<span class="pl-k">-</span>f)<span class="pl-k">/</span>(c[d<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">-</span>f))<span class="pl-k">/</span>(e<span class="pl-k">-</span><span class="pl-c1">1</span>)},<span class="pl-en">getTangent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">1E-4</span>;a<span class="pl-k">+=</span><span class="pl-c1">1E-4</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(a).<span class="pl-en">clone</span>().<span class="pl-c1">sub</span>(b).<span class="pl-c1">normalize</span>()},<span class="pl-en">getTangentAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getUtoTmapping</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getTangent</span>(a)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CurveUtils</span>;</td>
      </tr>
      <tr>
        <td id="L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="LC718" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span>a;<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">getPoint</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">CurvePath</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">autoClose</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(a)};</td>
      </tr>
      <tr>
        <td id="L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="LC719" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">closePath</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[<span class="pl-c1">0</span>].<span class="pl-en">getPoint</span>(<span class="pl-c1">0</span>),b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">getPoint</span>(<span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">equals</span>(b)<span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.LineCurve</span>(b,a))};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-en">getLength</span>(),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getCurveLengths</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;){<span class="pl-k">if</span>(c[d]<span class="pl-k">&gt;=</span>b)<span class="pl-k">return</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[d],b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(c[d]<span class="pl-k">-</span>b)<span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-en">getLength</span>(),<span class="pl-smi">a</span>.<span class="pl-en">getPointAt</span>(b);d<span class="pl-k">++</span>}<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getCurveLengths</span>();<span class="pl-k">return</span> a[<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]};</td>
      </tr>
      <tr>
        <td id="L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="LC720" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getCurveLengths</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span>.<span class="pl-c1">length</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[c].<span class="pl-en">getLength</span>(),<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createPointsGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoints</span>(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">createGeometry</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createSpacedPointsGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getSpacedPoints</span>(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">createGeometry</span>(a)};</td>
      </tr>
      <tr>
        <td id="L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="LC721" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>a[c];<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">e</span>.<span class="pl-c1">x</span>,<span class="pl-smi">e</span>.<span class="pl-c1">y</span>,<span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">||</span><span class="pl-c1">0</span>))}<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-en">Path</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span>[];a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">fromPoints</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">fromPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">moveTo</span>(a[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>,a[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">lineTo</span>(a[b].<span class="pl-c1">x</span>,a[b].<span class="pl-c1">y</span>)};</td>
      </tr>
      <tr>
        <td id="L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="LC722" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">moveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>moveTo<span class="pl-pds">&quot;</span></span>,args<span class="pl-k">:</span>[a,b]})};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lineTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b));<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>lineTo<span class="pl-pds">&quot;</span></span>,args<span class="pl-k">:</span>[a,b]})};</td>
      </tr>
      <tr>
        <td id="L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="LC723" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">quadraticCurveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.QuadraticBezierCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(e[<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],e[<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,d));<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(e);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>quadraticCurveTo<span class="pl-pds">&quot;</span></span>,args<span class="pl-k">:</span>[a,b,c,d]})};</td>
      </tr>
      <tr>
        <td id="L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="LC724" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bezierCurveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CubicBezierCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,d),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(e,g));<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(f);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>bezierCurveTo<span class="pl-pds">&quot;</span></span>,args<span class="pl-k">:</span>[a,b,c,d,e,g]})};</td>
      </tr>
      <tr>
        <td id="L725" class="blob-num js-line-number" data-line-number="725"></td>
        <td id="LC725" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">splineThru</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,c<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])];<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(c,a);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SplineCurve</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>splineThru<span class="pl-pds">&quot;</span></span>,args<span class="pl-k">:</span>b})};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">arc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;<span class="pl-c1">this</span>.<span class="pl-en">absarc</span>(a<span class="pl-k">+</span>f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],b<span class="pl-k">+</span>f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],c,d,e,g)};</td>
      </tr>
      <tr>
        <td id="L726" class="blob-num js-line-number" data-line-number="726"></td>
        <td id="LC726" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">absarc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">this</span>.<span class="pl-en">absellipse</span>(a,b,c,c,d,e,g)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ellipse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;<span class="pl-c1">this</span>.<span class="pl-en">absellipse</span>(a<span class="pl-k">+</span>l[<span class="pl-smi">l</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],b<span class="pl-k">+</span>l[<span class="pl-smi">l</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],c,d,e,g,f,h)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">absellipse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>[a,b,c,d,e,g,f,h<span class="pl-k">||</span><span class="pl-c1">0</span>];a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.EllipseCurve</span>(a,b,c,d,e,g,f,h);<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(a);a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getPoint</span>(<span class="pl-c1">1</span>);<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>);<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ellipse<span class="pl-pds">&quot;</span></span>,args<span class="pl-k">:</span>l})};</td>
      </tr>
      <tr>
        <td id="L727" class="blob-num js-line-number" data-line-number="727"></td>
        <td id="LC727" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">40</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>a;d<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(d<span class="pl-k">/</span>a));<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L728" class="blob-num js-line-number" data-line-number="728"></td>
        <td id="LC728" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">12</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-smi">b2</span>,d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-smi">b3</span>,e<span class="pl-k">=</span>[],g,f,h,l,k,m,p,n,q,s,t<span class="pl-k">=</span><span class="pl-c1">0</span>,v<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>v;t<span class="pl-k">++</span>){q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[t];<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">args</span>;<span class="pl-k">switch</span>(<span class="pl-smi">q</span>.<span class="pl-c1">action</span>){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>moveTo<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(u[<span class="pl-c1">0</span>],u[<span class="pl-c1">1</span>]));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>lineTo<span class="pl-pds">&quot;</span></span>:<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(u[<span class="pl-c1">0</span>],u[<span class="pl-c1">1</span>]));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>quadraticCurveTo<span class="pl-pds">&quot;</span></span>:g<span class="pl-k">=</span>u[<span class="pl-c1">2</span>];f<span class="pl-k">=</span>u[<span class="pl-c1">3</span>];k<span class="pl-k">=</span>u[<span class="pl-c1">0</span>];m<span class="pl-k">=</span>u[<span class="pl-c1">1</span>];<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">?</span>(q<span class="pl-k">=</span>e[<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],p<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[t<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,p<span class="pl-k">=</span>q[<span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],n<span class="pl-k">=</span>q[<span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]);<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">1</span>;u<span class="pl-k">&lt;=</span>a;u<span class="pl-k">++</span>)s<span class="pl-k">=</span>u<span class="pl-k">/</span>a,</td>
      </tr>
      <tr>
        <td id="L729" class="blob-num js-line-number" data-line-number="729"></td>
        <td id="LC729" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-en">c</span>(s,p,k,g),s<span class="pl-k">=</span><span class="pl-en">c</span>(s,n,m,f),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(q,s));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>bezierCurveTo<span class="pl-pds">&quot;</span></span>:g<span class="pl-k">=</span>u[<span class="pl-c1">4</span>];f<span class="pl-k">=</span>u[<span class="pl-c1">5</span>];k<span class="pl-k">=</span>u[<span class="pl-c1">0</span>];m<span class="pl-k">=</span>u[<span class="pl-c1">1</span>];h<span class="pl-k">=</span>u[<span class="pl-c1">2</span>];l<span class="pl-k">=</span>u[<span class="pl-c1">3</span>];<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">?</span>(q<span class="pl-k">=</span>e[<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],p<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[t<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,p<span class="pl-k">=</span>q[<span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],n<span class="pl-k">=</span>q[<span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]);<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">1</span>;u<span class="pl-k">&lt;=</span>a;u<span class="pl-k">++</span>)s<span class="pl-k">=</span>u<span class="pl-k">/</span>a,q<span class="pl-k">=</span><span class="pl-en">d</span>(s,p,k,h,g),s<span class="pl-k">=</span><span class="pl-en">d</span>(s,n,m,l,f),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(q,s));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>splineThru<span class="pl-pds">&quot;</span></span>:q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[t<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;s<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(q[<span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],q[<span class="pl-smi">q</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])];q<span class="pl-k">=</span>a<span class="pl-k">*</span>u[<span class="pl-c1">0</span>].<span class="pl-c1">length</span>;s<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">concat</span>(u[<span class="pl-c1">0</span>]);s<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SplineCurve</span>(s);<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">1</span>;u<span class="pl-k">&lt;=</span>q;u<span class="pl-k">++</span>)<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-smi">s</span>.<span class="pl-en">getPointAt</span>(u<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L730" class="blob-num js-line-number" data-line-number="730"></td>
        <td id="LC730" class="blob-code blob-code-inner js-file-line">q));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>arc<span class="pl-pds">&quot;</span></span>:g<span class="pl-k">=</span>u[<span class="pl-c1">0</span>];f<span class="pl-k">=</span>u[<span class="pl-c1">1</span>];m<span class="pl-k">=</span>u[<span class="pl-c1">2</span>];h<span class="pl-k">=</span>u[<span class="pl-c1">3</span>];q<span class="pl-k">=</span>u[<span class="pl-c1">4</span>];k<span class="pl-k">=</span><span class="pl-k">!!</span>u[<span class="pl-c1">5</span>];p<span class="pl-k">=</span>q<span class="pl-k">-</span>h;n<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>a;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">1</span>;u<span class="pl-k">&lt;=</span>n;u<span class="pl-k">++</span>)s<span class="pl-k">=</span>u<span class="pl-k">/</span>n,k<span class="pl-k">||</span>(s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>s),s<span class="pl-k">=</span>h<span class="pl-k">+</span>s<span class="pl-k">*</span>p,q<span class="pl-k">=</span>g<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(s),s<span class="pl-k">=</span>f<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(s),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(q,s));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>ellipse<span class="pl-pds">&quot;</span></span>:g<span class="pl-k">=</span>u[<span class="pl-c1">0</span>];f<span class="pl-k">=</span>u[<span class="pl-c1">1</span>];m<span class="pl-k">=</span>u[<span class="pl-c1">2</span>];l<span class="pl-k">=</span>u[<span class="pl-c1">3</span>];h<span class="pl-k">=</span>u[<span class="pl-c1">4</span>];q<span class="pl-k">=</span>u[<span class="pl-c1">5</span>];k<span class="pl-k">=</span><span class="pl-k">!!</span>u[<span class="pl-c1">6</span>];<span class="pl-k">var</span> w<span class="pl-k">=</span>u[<span class="pl-c1">7</span>];p<span class="pl-k">=</span>q<span class="pl-k">-</span>h;n<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>a;<span class="pl-k">var</span> <span class="pl-c1">D</span>,x;<span class="pl-c1">0</span><span class="pl-k">!==</span>w<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(w),x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(w));<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">1</span>;u<span class="pl-k">&lt;=</span>n;u<span class="pl-k">++</span>){s<span class="pl-k">=</span>u<span class="pl-k">/</span>n;k<span class="pl-k">||</span>(s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>s);s<span class="pl-k">=</span>h<span class="pl-k">+</span>s<span class="pl-k">*</span>p;q<span class="pl-k">=</span>g<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(s);s<span class="pl-k">=</span>f<span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(s);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>w){<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span>q;q<span class="pl-k">=</span>(<span class="pl-c1">B</span><span class="pl-k">-</span>g)<span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">-</span>(s<span class="pl-k">-</span>f)<span class="pl-k">*</span>x<span class="pl-k">+</span>g;s<span class="pl-k">=</span>(<span class="pl-c1">B</span><span class="pl-k">-</span>g)<span class="pl-k">*</span>x<span class="pl-k">+</span>(s<span class="pl-k">-</span>f)<span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">+</span>f}<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(q,s))}}}c<span class="pl-k">=</span>e[<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L731" class="blob-num js-line-number" data-line-number="731"></td>
        <td id="LC731" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>];<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>e[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>)<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>e[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>)<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-c1">splice</span>(<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);b<span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>(e[<span class="pl-c1">0</span>]);<span class="pl-k">return</span> e};</td>
      </tr>
      <tr>
        <td id="L732" class="blob-num js-line-number" data-line-number="732"></td>
        <td id="LC732" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toShapes</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>a[c],f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>;<span class="pl-smi">f</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">actions</span>;<span class="pl-smi">f</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">curves</span>;<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(f)}<span class="pl-k">return</span> b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f&lt;c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,l=h.y-g.y;if(Math.abs(l)&gt;Number.EPSILON){if(0&gt;l&amp;&amp;(g=b[f],k=-k,h=b[e],l=-l),!(a.y&lt;g.y||a.y&gt;h.y))if(a.y===g.y){if(a.x===g.x)return!0}else{e=l*(a.x-g.x)-k*(a.y-g.y);if(0===e)return!0;0&gt;e||(d=!d)}}else if(a.y===g.y&amp;&amp;(h.x&lt;=a.x&amp;&amp;a.x&lt;=g.x||</td>
      </tr>
      <tr>
        <td id="L733" class="blob-num js-line-number" data-line-number="733"></td>
        <td id="LC733" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">return</span> d}<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-smi">isClockWise</span>,<span class="pl-en">g</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>a[d],g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">args</span>,f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">action</span>;<span class="pl-s"><span class="pl-pds">&quot;</span>moveTo<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>f<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(c),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>);c[f].<span class="pl-c1">apply</span>(c,g)}<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">push</span>(c);<span class="pl-k">return</span> b}(<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span>[];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-en">c</span>(g);<span class="pl-k">var</span> f,h,l,k<span class="pl-k">=</span>[];<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span> h<span class="pl-k">=</span>g[<span class="pl-c1">0</span>],l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>,<span class="pl-smi">l</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">actions</span>,<span class="pl-smi">l</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">curves</span>,<span class="pl-smi">k</span>.<span class="pl-c1">push</span>(l),k;<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-en">e</span>(g[<span class="pl-c1">0</span>].<span class="pl-en">getPoints</span>()),m<span class="pl-k">=</span>a<span class="pl-k">?</span><span class="pl-k">!</span>m<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L734" class="blob-num js-line-number" data-line-number="734"></td>
        <td id="LC734" class="blob-code blob-code-inner js-file-line">m;l<span class="pl-k">=</span>[];<span class="pl-k">var</span> p<span class="pl-k">=</span>[],n<span class="pl-k">=</span>[],q<span class="pl-k">=</span><span class="pl-c1">0</span>,s;p[q]<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;n[q]<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">0</span>,v<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>v;t<span class="pl-k">++</span>)h<span class="pl-k">=</span>g[t],s<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">getPoints</span>(),f<span class="pl-k">=</span><span class="pl-en">e</span>(s),(f<span class="pl-k">=</span>a<span class="pl-k">?</span><span class="pl-k">!</span>f<span class="pl-k">:</span>f)<span class="pl-k">?</span>(<span class="pl-k">!</span>m<span class="pl-k">&amp;&amp;</span>p[q]<span class="pl-k">&amp;&amp;</span>q<span class="pl-k">++</span>,p[q]<span class="pl-k">=</span>{s<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>,p<span class="pl-k">:</span>s},p[q].<span class="pl-smi">s</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">actions</span>,p[q].<span class="pl-smi">s</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">curves</span>,m<span class="pl-k">&amp;&amp;</span>q<span class="pl-k">++</span>,n[q]<span class="pl-k">=</span>[])<span class="pl-k">:</span>n[q].<span class="pl-c1">push</span>({h<span class="pl-k">:</span>h,p<span class="pl-k">:</span>s[<span class="pl-c1">0</span>]});<span class="pl-k">if</span>(<span class="pl-k">!</span>p[<span class="pl-c1">0</span>])<span class="pl-k">return</span> <span class="pl-en">c</span>(g);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>){t<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;h<span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)l[e]<span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span>n[e],m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;m<span class="pl-k">++</span>){q<span class="pl-k">=</span>f[m];s<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;v<span class="pl-k">++</span>)<span class="pl-en">d</span>(<span class="pl-smi">q</span>.<span class="pl-smi">p</span>,p[v].<span class="pl-smi">p</span>)<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">!==</span>v<span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">push</span>({froms<span class="pl-k">:</span>e,tos<span class="pl-k">:</span>v,hole<span class="pl-k">:</span>m}),s<span class="pl-k">?</span>(s<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,l[v].<span class="pl-c1">push</span>(q))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L735" class="blob-num js-line-number" data-line-number="735"></td>
        <td id="LC735" class="blob-code blob-code-inner js-file-line">t<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);s<span class="pl-k">&amp;&amp;</span>l[e].<span class="pl-c1">push</span>(q)}<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">||</span>(n<span class="pl-k">=</span>l))}t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>e;t<span class="pl-k">++</span>)<span class="pl-k">for</span>(l<span class="pl-k">=</span>p[t].<span class="pl-smi">s</span>,<span class="pl-smi">k</span>.<span class="pl-c1">push</span>(l),h<span class="pl-k">=</span>n[t],g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)<span class="pl-smi">l</span>.<span class="pl-smi">holes</span>.<span class="pl-c1">push</span>(h[g].<span class="pl-smi">h</span>);<span class="pl-k">return</span> k};<span class="pl-c1">THREE</span>.<span class="pl-en">Shape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">holes</span><span class="pl-k">=</span>[]};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extrude</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.ExtrudeGeometry</span>(<span class="pl-c1">this</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">makeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.ShapeGeometry</span>(<span class="pl-c1">this</span>,a)};</td>
      </tr>
      <tr>
        <td id="L736" class="blob-num js-line-number" data-line-number="736"></td>
        <td id="LC736" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointsHoles</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">holes</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b[c]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">holes</span>[c].<span class="pl-en">getPoints</span>(a);<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractAllPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>{shape<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">getPoints</span>(a),holes<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">getPointsHoles</span>(a)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">extractAllPoints</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">LineCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L737" class="blob-num js-line-number" data-line-number="737"></td>
        <td id="LC737" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-en">clone</span>().<span class="pl-c1">sub</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-smi">b</span>.<span class="pl-en">multiplyScalar</span>(a).<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-en">clone</span>().<span class="pl-c1">sub</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>).<span class="pl-c1">normalize</span>()};<span class="pl-c1">THREE</span>.<span class="pl-en">QuadraticBezierCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L738" class="blob-num js-line-number" data-line-number="738"></td>
        <td id="LC738" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-smi">b2</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>))};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CurveUtils</span>.<span class="pl-smi">tangentQuadraticBezier</span>;<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>))).<span class="pl-c1">normalize</span>()};</td>
      </tr>
      <tr>
        <td id="L739" class="blob-num js-line-number" data-line-number="739"></td>
        <td id="LC739" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubicBezierCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">v3</span><span class="pl-k">=</span>d};<span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-smi">b3</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">x</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">y</span>))};</td>
      </tr>
      <tr>
        <td id="L740" class="blob-num js-line-number" data-line-number="740"></td>
        <td id="LC740" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CurveUtils</span>.<span class="pl-smi">tangentCubicBezier</span>;<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">x</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">y</span>))).<span class="pl-c1">normalize</span>()};<span class="pl-c1">THREE</span>.<span class="pl-en">SplineCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">==</span>a<span class="pl-k">?</span>[]<span class="pl-k">:</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve</span>;</td>
      </tr>
      <tr>
        <td id="L741" class="blob-num js-line-number" data-line-number="741"></td>
        <td id="LC741" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>;a<span class="pl-k">*=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>c;<span class="pl-k">var</span> d<span class="pl-k">=</span>b[<span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>],e<span class="pl-k">=</span>b[c],g<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>],b<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>],c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CurveUtils</span>.<span class="pl-smi">interpolate</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span>,<span class="pl-smi">e</span>.<span class="pl-c1">x</span>,<span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,a),<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">y</span>,<span class="pl-smi">e</span>.<span class="pl-c1">y</span>,<span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,a))};<span class="pl-c1">THREE</span>.<span class="pl-en">EllipseCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-c1">this</span>.<span class="pl-smi">aX</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">aY</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">xRadius</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">yRadius</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">aStartAngle</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">aEndAngle</span><span class="pl-k">=</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">aClockwise</span><span class="pl-k">=</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">aRotation</span><span class="pl-k">=</span>h<span class="pl-k">||</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L742" class="blob-num js-line-number" data-line-number="742"></td>
        <td id="LC742" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>;</td>
      </tr>
      <tr>
        <td id="L743" class="blob-num js-line-number" data-line-number="743"></td>
        <td id="LC743" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aEndAngle</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">aStartAngle</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">+=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>);b<span class="pl-k">&gt;</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">-=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>);b<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">aClockwise</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">aEndAngle</span><span class="pl-k">+</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">-</span>b)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">aStartAngle</span><span class="pl-k">+</span>a<span class="pl-k">*</span>b;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aX</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">xRadius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aY</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">yRadius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">aRotation</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-c1">this</span>.<span class="pl-smi">aRotation</span>),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">aRotation</span>),e<span class="pl-k">=</span>a;a<span class="pl-k">=</span>(e<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">aX</span>)<span class="pl-k">*</span>b<span class="pl-k">-</span>(c<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">aY</span>)<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">aX</span>;c<span class="pl-k">=</span>(e<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">aX</span>)<span class="pl-k">*</span>d<span class="pl-k">+</span>(c<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">aY</span>)<span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">aY</span>}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,c)};</td>
      </tr>
      <tr>
        <td id="L744" class="blob-num js-line-number" data-line-number="744"></td>
        <td id="LC744" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ArcCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b,c,c,d,e,g)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ArcCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ArcCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ArcCurve</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>b},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-smi">b</span>.<span class="pl-en">multiplyScalar</span>(a);<span class="pl-smi">b</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-k">return</span> b});</td>
      </tr>
      <tr>
        <td id="L745" class="blob-num js-line-number" data-line-number="745"></td>
        <td id="LC745" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-smi">b2</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">z</span>))});</td>
      </tr>
      <tr>
        <td id="L746" class="blob-num js-line-number" data-line-number="746"></td>
        <td id="LC746" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">v3</span><span class="pl-k">=</span>d},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-smi">b3</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">x</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">y</span>),<span class="pl-en">b</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">z</span>))});</td>
      </tr>
      <tr>
        <td id="L747" class="blob-num js-line-number" data-line-number="747"></td>
        <td id="LC747" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">==</span>a<span class="pl-k">?</span>[]<span class="pl-k">:</span>a},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>;a<span class="pl-k">*=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>c;<span class="pl-k">var</span> d<span class="pl-k">=</span>b[<span class="pl-c1">0</span><span class="pl-k">==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>],e<span class="pl-k">=</span>b[c],g<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>],b<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>],c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CurveUtils</span>.<span class="pl-smi">interpolate</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span>,<span class="pl-smi">e</span>.<span class="pl-c1">x</span>,<span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,a),<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">y</span>,<span class="pl-smi">e</span>.<span class="pl-c1">y</span>,<span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,a),<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">z</span>,<span class="pl-smi">e</span>.<span class="pl-c1">z</span>,<span class="pl-smi">g</span>.<span class="pl-c1">z</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>,a))});</td>
      </tr>
      <tr>
        <td id="L748" class="blob-num js-line-number" data-line-number="748"></td>
        <td id="LC748" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CatmullRomCurve3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(){}<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>;<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">c0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">c1</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">c2</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>c<span class="pl-k">-</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">c3</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">+</span>c<span class="pl-k">+</span>d};<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">initNonuniformCatmullRom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">m</span>,<span class="pl-smi">p</span>){a<span class="pl-k">=</span>((b<span class="pl-k">-</span>a)<span class="pl-k">/</span>e<span class="pl-k">-</span>(c<span class="pl-k">-</span>a)<span class="pl-k">/</span>(e<span class="pl-k">+</span>m)<span class="pl-k">+</span>(c<span class="pl-k">-</span>b)<span class="pl-k">/</span>m)<span class="pl-k">*</span>m;d<span class="pl-k">=</span>((c<span class="pl-k">-</span>b)<span class="pl-k">/</span>m<span class="pl-k">-</span>(d<span class="pl-k">-</span>b)<span class="pl-k">/</span>(m<span class="pl-k">+</span>p)<span class="pl-k">+</span>(d<span class="pl-k">-</span>c)<span class="pl-k">/</span>p)<span class="pl-k">*</span>m;<span class="pl-c1">this</span>.<span class="pl-en">init</span>(b,c,a,d)};<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">initCatmullRom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">this</span>.<span class="pl-en">init</span>(b,c,e<span class="pl-k">*</span>(c<span class="pl-k">-</span>a),e<span class="pl-k">*</span>(d<span class="pl-k">-</span>b))};<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">calc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">*</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">c0</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">c1</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">c2</span><span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">c3</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L749" class="blob-num js-line-number" data-line-number="749"></td>
        <td id="LC749" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">*</span>a};<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>a<span class="pl-k">||</span>[]},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>,h,l;l<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;<span class="pl-c1">2</span><span class="pl-k">&gt;</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>duh, you need at least 2 points<span class="pl-pds">&quot;</span></span>);a<span class="pl-k">*=</span>l<span class="pl-k">-</span><span class="pl-c1">1</span>;h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>h;<span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>h<span class="pl-k">===</span>l<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>l<span class="pl-k">-</span><span class="pl-c1">2</span>,a<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">var</span> k,m,p;<span class="pl-c1">0</span><span class="pl-k">===</span>h<span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>]).<span class="pl-c1">add</span>(f[<span class="pl-c1">0</span>]),k<span class="pl-k">=</span>b)<span class="pl-k">:</span>k<span class="pl-k">=</span>f[h<span class="pl-k">-</span><span class="pl-c1">1</span>];m<span class="pl-k">=</span>f[h];p<span class="pl-k">=</span>f[h<span class="pl-k">+</span><span class="pl-c1">1</span>];h<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">&lt;</span>l<span class="pl-k">?</span>f<span class="pl-k">=</span>f[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">:</span>(<span class="pl-smi">b</span>.<span class="pl-en">subVectors</span>(f[l<span class="pl-k">-</span><span class="pl-c1">1</span>],f[l<span class="pl-k">-</span><span class="pl-c1">2</span>]).<span class="pl-c1">add</span>(f[l<span class="pl-k">-</span><span class="pl-c1">2</span>]),f<span class="pl-k">=</span>b);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>centripetal<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>chordal<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>chordal<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">?</span><span class="pl-c1">.5</span><span class="pl-k">:</span><span class="pl-c1">.25</span>;l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">k</span>.<span class="pl-en">distanceToSquared</span>(m),n);</td>
      </tr>
      <tr>
        <td id="L750" class="blob-num js-line-number" data-line-number="750"></td>
        <td id="LC750" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">m</span>.<span class="pl-en">distanceToSquared</span>(p),n);n<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-smi">p</span>.<span class="pl-en">distanceToSquared</span>(f),n);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>l<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span>h);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>n<span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">=</span>h);<span class="pl-smi">c</span>.<span class="pl-en">initNonuniformCatmullRom</span>(<span class="pl-smi">k</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-c1">x</span>,<span class="pl-smi">p</span>.<span class="pl-c1">x</span>,<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,l,h,n);<span class="pl-smi">d</span>.<span class="pl-en">initNonuniformCatmullRom</span>(<span class="pl-smi">k</span>.<span class="pl-c1">y</span>,<span class="pl-smi">m</span>.<span class="pl-c1">y</span>,<span class="pl-smi">p</span>.<span class="pl-c1">y</span>,<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,l,h,n);<span class="pl-smi">e</span>.<span class="pl-en">initNonuniformCatmullRom</span>(<span class="pl-smi">k</span>.<span class="pl-c1">z</span>,<span class="pl-smi">m</span>.<span class="pl-c1">z</span>,<span class="pl-smi">p</span>.<span class="pl-c1">z</span>,<span class="pl-smi">f</span>.<span class="pl-c1">z</span>,l,h,n)}<span class="pl-k">else</span><span class="pl-s"><span class="pl-pds">&quot;</span>catmullrom<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">tension</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">tension</span><span class="pl-k">:</span><span class="pl-c1">.5</span>,<span class="pl-smi">c</span>.<span class="pl-en">initCatmullRom</span>(<span class="pl-smi">k</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-c1">x</span>,<span class="pl-smi">p</span>.<span class="pl-c1">x</span>,<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,l),<span class="pl-smi">d</span>.<span class="pl-en">initCatmullRom</span>(<span class="pl-smi">k</span>.<span class="pl-c1">y</span>,<span class="pl-smi">m</span>.<span class="pl-c1">y</span>,<span class="pl-smi">p</span>.<span class="pl-c1">y</span>,<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,l),<span class="pl-smi">e</span>.<span class="pl-en">initCatmullRom</span>(<span class="pl-smi">k</span>.<span class="pl-c1">z</span>,<span class="pl-smi">m</span>.<span class="pl-c1">z</span>,<span class="pl-smi">p</span>.<span class="pl-c1">z</span>,<span class="pl-smi">f</span>.<span class="pl-c1">z</span>,l));<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">c</span>.<span class="pl-en">calc</span>(a),<span class="pl-smi">d</span>.<span class="pl-en">calc</span>(a),<span class="pl-smi">e</span>.<span class="pl-en">calc</span>(a))})}();</td>
      </tr>
      <tr>
        <td id="L751" class="blob-num js-line-number" data-line-number="751"></td>
        <td id="LC751" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ClosedSplineCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">==</span>a<span class="pl-k">?</span>[]<span class="pl-k">:</span>a},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>;a<span class="pl-k">*=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>c;<span class="pl-k">var</span> c<span class="pl-k">=</span>c<span class="pl-k">+</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c)<span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>),d<span class="pl-k">=</span>b[(c<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>],e<span class="pl-k">=</span>b[c<span class="pl-k">%</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>],g<span class="pl-k">=</span>b[(c<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>],b<span class="pl-k">=</span>b[(c<span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">%</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>],c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CurveUtils</span>.<span class="pl-smi">interpolate</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span>,<span class="pl-smi">e</span>.<span class="pl-c1">x</span>,<span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,a),<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">y</span>,<span class="pl-smi">e</span>.<span class="pl-c1">y</span>,<span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,a),<span class="pl-en">c</span>(<span class="pl-smi">d</span>.<span class="pl-c1">z</span>,<span class="pl-smi">e</span>.<span class="pl-c1">z</span>,<span class="pl-smi">g</span>.<span class="pl-c1">z</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>,a))});</td>
      </tr>
      <tr>
        <td id="L752" class="blob-num js-line-number" data-line-number="752"></td>
        <td id="LC752" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BoxGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">t</span>){<span class="pl-k">var</span> v,u<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">widthSegments</span>,w<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-c1">D</span><span class="pl-k">=</span>e<span class="pl-k">/</span><span class="pl-c1">2</span>,x<span class="pl-k">=</span>f<span class="pl-k">/</span><span class="pl-c1">2</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b)v<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b)v<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,w<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">depthSegments</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b)v<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,u<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">depthSegments</span>;<span class="pl-k">var</span> y<span class="pl-k">=</span>u<span class="pl-k">+</span><span class="pl-c1">1</span>,z<span class="pl-k">=</span>w<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">A</span><span class="pl-k">=</span>e<span class="pl-k">/</span>u,<span class="pl-c1">J</span><span class="pl-k">=</span>f<span class="pl-k">/</span>w,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">F</span>[v]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>z;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>y;f<span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">C</span>[a]<span class="pl-k">=</span>(f<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">-</span><span class="pl-c1">D</span>)<span class="pl-k">*</span>c;<span class="pl-c1">C</span>[b]<span class="pl-k">=</span>(e<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">-</span>x)<span class="pl-k">*</span>d;<span class="pl-c1">C</span>[v]<span class="pl-k">=</span>g;<span class="pl-smi">h</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-c1">C</span>)}<span class="pl-k">for</span>(e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L753" class="blob-num js-line-number" data-line-number="753"></td>
        <td id="LC753" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>w;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>u;f<span class="pl-k">++</span>)x<span class="pl-k">=</span>f<span class="pl-k">+</span>y<span class="pl-k">*</span>e,a<span class="pl-k">=</span>f<span class="pl-k">+</span>y<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>),b<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>y<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>),c<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>y<span class="pl-k">*</span>e,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f<span class="pl-k">/</span>u,<span class="pl-c1">1</span><span class="pl-k">-</span>e<span class="pl-k">/</span>w),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f<span class="pl-k">/</span>u,<span class="pl-c1">1</span><span class="pl-k">-</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>w),v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>u,<span class="pl-c1">1</span><span class="pl-k">-</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>w),<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>u,<span class="pl-c1">1</span><span class="pl-k">-</span>e<span class="pl-k">/</span>w),x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(x<span class="pl-k">+</span><span class="pl-c1">B</span>,a<span class="pl-k">+</span><span class="pl-c1">B</span>,c<span class="pl-k">+</span><span class="pl-c1">B</span>),<span class="pl-smi">x</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-c1">F</span>),<span class="pl-smi">x</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(<span class="pl-c1">F</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">F</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">F</span>.<span class="pl-en">clone</span>()),<span class="pl-smi">x</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>t,<span class="pl-smi">h</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(x),<span class="pl-smi">h</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([d,g,<span class="pl-c1">D</span>]),x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a<span class="pl-k">+</span><span class="pl-c1">B</span>,b<span class="pl-k">+</span><span class="pl-c1">B</span>,c<span class="pl-k">+</span><span class="pl-c1">B</span>),<span class="pl-smi">x</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-c1">F</span>),<span class="pl-smi">x</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(<span class="pl-c1">F</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">F</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">F</span>.<span class="pl-en">clone</span>()),<span class="pl-smi">x</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>t,<span class="pl-smi">h</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(x),</td>
      </tr>
      <tr>
        <td id="L754" class="blob-num js-line-number" data-line-number="754"></td>
        <td id="LC754" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-smi">g</span>.<span class="pl-en">clone</span>(),v,<span class="pl-c1">D</span>.<span class="pl-en">clone</span>()])}<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>BoxGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{width<span class="pl-k">:</span>a,height<span class="pl-k">:</span>b,depth<span class="pl-k">:</span>c,widthSegments<span class="pl-k">:</span>d,heightSegments<span class="pl-k">:</span>e,depthSegments<span class="pl-k">:</span>g};<span class="pl-c1">this</span>.<span class="pl-smi">widthSegments</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">heightSegments</span><span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">depthSegments</span><span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>;d<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>;e<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>;g<span class="pl-k">=</span>c<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-en">f</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,b,d,<span class="pl-c1">0</span>);<span class="pl-en">f</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,b,<span class="pl-k">-</span>d,<span class="pl-c1">1</span>);<span class="pl-en">f</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,a,c,e,<span class="pl-c1">2</span>);<span class="pl-en">f</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,c,<span class="pl-k">-</span>e,<span class="pl-c1">3</span>);<span class="pl-en">f</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b,g,<span class="pl-c1">4</span>);<span class="pl-en">f</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b,<span class="pl-k">-</span>g,<span class="pl-c1">5</span>);<span class="pl-c1">this</span>.<span class="pl-en">mergeVertices</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">BoxGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L755" class="blob-num js-line-number" data-line-number="755"></td>
        <td id="LC755" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BoxGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BoxGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">BoxGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BoxGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-smi">a</span>.<span class="pl-smi">depth</span>,<span class="pl-smi">a</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">depthSegments</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeGeometry</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BoxGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">CircleGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CircleGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,thetaStart<span class="pl-k">:</span>c,thetaLength<span class="pl-k">:</span>d};<span class="pl-c1">this</span>.<span class="pl-en">fromBufferGeometry</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.CircleBufferGeometry</span>(a,b,c,d))};</td>
      </tr>
      <tr>
        <td id="L756" class="blob-num js-line-number" data-line-number="756"></td>
        <td id="LC756" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CircleGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CircleGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CircleGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CircleGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.CircleGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">segments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaLength</span>)};</td>
      </tr>
      <tr>
        <td id="L757" class="blob-num js-line-number" data-line-number="757"></td>
        <td id="LC757" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CircleBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CircleBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,thetaStart<span class="pl-k">:</span>c,thetaLength<span class="pl-k">:</span>d};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">50</span>;b<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,b)<span class="pl-k">:</span><span class="pl-c1">8</span>;c<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>e),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>e),e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>e);f[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;e[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">.5</span>;e[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">.5</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-c1">3</span>,k<span class="pl-k">=</span><span class="pl-c1">2</span>;h<span class="pl-k">&lt;=</span>b;h<span class="pl-k">++</span>,l<span class="pl-k">+=</span><span class="pl-c1">3</span>,k<span class="pl-k">+=</span><span class="pl-c1">2</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>c<span class="pl-k">+</span>h<span class="pl-k">/</span>b<span class="pl-k">*</span>d;g[l]<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(m);g[l<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(m);f[l<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;e[k]<span class="pl-k">=</span>(g[l]<span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;e[k<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>(g[l<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>}c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L758" class="blob-num js-line-number" data-line-number="758"></td>
        <td id="LC758" class="blob-code blob-code-inner js-file-line">[];<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;=</span>b;l<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(l,l<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(c),<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(g,<span class="pl-c1">3</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(f,<span class="pl-c1">3</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(e,<span class="pl-c1">2</span>));<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">CircleBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CircleBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CircleBufferGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L759" class="blob-num js-line-number" data-line-number="759"></td>
        <td id="LC759" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CircleBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.CircleBufferGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">segments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaLength</span>)};</td>
      </tr>
      <tr>
        <td id="L760" class="blob-num js-line-number" data-line-number="760"></td>
        <td id="LC760" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CylinderGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CylinderGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radiusTop<span class="pl-k">:</span>a,radiusBottom<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c,radialSegments<span class="pl-k">:</span>d,heightSegments<span class="pl-k">:</span>e,openEnded<span class="pl-k">:</span>g,thetaStart<span class="pl-k">:</span>f,thetaLength<span class="pl-k">:</span>h};a<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">20</span>;b<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">20</span>;c<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">100</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">1</span>;g<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">0</span>;h<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">?</span>h<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">var</span> l<span class="pl-k">=</span>c<span class="pl-k">/</span><span class="pl-c1">2</span>,k,m,p<span class="pl-k">=</span>[],n<span class="pl-k">=</span>[];<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;=</span>e;m<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>[],s<span class="pl-k">=</span>[],t<span class="pl-k">=</span>m<span class="pl-k">/</span>e,v<span class="pl-k">=</span>t<span class="pl-k">*</span>(b<span class="pl-k">-</span>a)<span class="pl-k">+</span>a;<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;=</span>d;k<span class="pl-k">++</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span>k<span class="pl-k">/</span>d,w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">w</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>v<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(u<span class="pl-k">*</span>h<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L761" class="blob-num js-line-number" data-line-number="761"></td>
        <td id="LC761" class="blob-code blob-code-inner js-file-line">f);<span class="pl-smi">w</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>t<span class="pl-k">*</span>c<span class="pl-k">+</span>l;<span class="pl-smi">w</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>v<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(u<span class="pl-k">*</span>h<span class="pl-k">+</span>f);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(w);<span class="pl-smi">q</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">s</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(u,<span class="pl-c1">1</span><span class="pl-k">-</span>t))}<span class="pl-smi">p</span>.<span class="pl-c1">push</span>(q);<span class="pl-smi">n</span>.<span class="pl-c1">push</span>(s)}c<span class="pl-k">=</span>(b<span class="pl-k">-</span>a)<span class="pl-k">/</span>c;<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span>d;k<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>(f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[p[<span class="pl-c1">0</span>][k]].<span class="pl-en">clone</span>(),h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[p[<span class="pl-c1">0</span>][k<span class="pl-k">+</span><span class="pl-c1">1</span>]].<span class="pl-en">clone</span>())<span class="pl-k">:</span>(f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[p[<span class="pl-c1">1</span>][k]].<span class="pl-en">clone</span>(),h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[p[<span class="pl-c1">1</span>][k<span class="pl-k">+</span><span class="pl-c1">1</span>]].<span class="pl-en">clone</span>()),<span class="pl-smi">f</span>.<span class="pl-en">setY</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>c).<span class="pl-c1">normalize</span>(),<span class="pl-smi">h</span>.<span class="pl-en">setY</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>c).<span class="pl-c1">normalize</span>(),m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>e;m<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>p[m][k],s<span class="pl-k">=</span>p[m<span class="pl-k">+</span><span class="pl-c1">1</span>][k],t<span class="pl-k">=</span>p[m<span class="pl-k">+</span><span class="pl-c1">1</span>][k<span class="pl-k">+</span><span class="pl-c1">1</span>],v<span class="pl-k">=</span>p[m][k<span class="pl-k">+</span><span class="pl-c1">1</span>],u<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">clone</span>(),w<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">clone</span>(),</td>
      </tr>
      <tr>
        <td id="L762" class="blob-num js-line-number" data-line-number="762"></td>
        <td id="LC762" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),x<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">B</span><span class="pl-k">=</span>n[m][k].<span class="pl-en">clone</span>(),y<span class="pl-k">=</span>n[m<span class="pl-k">+</span><span class="pl-c1">1</span>][k].<span class="pl-en">clone</span>(),z<span class="pl-k">=</span>n[m<span class="pl-k">+</span><span class="pl-c1">1</span>][k<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),<span class="pl-c1">A</span><span class="pl-k">=</span>n[m][k<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>();<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(q,s,v,[u,w,x]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-c1">B</span>,y,<span class="pl-c1">A</span>]);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(s,t,v,[<span class="pl-smi">w</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">D</span>,<span class="pl-smi">x</span>.<span class="pl-en">clone</span>()]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-smi">y</span>.<span class="pl-en">clone</span>(),z,<span class="pl-c1">A</span>.<span class="pl-en">clone</span>()])}<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a)<span class="pl-k">for</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,l,<span class="pl-c1">0</span>)),k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span>d;k<span class="pl-k">++</span>)q<span class="pl-k">=</span>p[<span class="pl-c1">0</span>][k],s<span class="pl-k">=</span>p[<span class="pl-c1">0</span>][k<span class="pl-k">+</span><span class="pl-c1">1</span>],t<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L763" class="blob-num js-line-number" data-line-number="763"></td>
        <td id="LC763" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">B</span><span class="pl-k">=</span>n[<span class="pl-c1">0</span>][k].<span class="pl-en">clone</span>(),y<span class="pl-k">=</span>n[<span class="pl-c1">0</span>][k<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">y</span>.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(q,s,t,[u,w,<span class="pl-c1">D</span>],<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">1</span>)),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-c1">B</span>,y,z]);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>b)<span class="pl-k">for</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>l,<span class="pl-c1">0</span>)),k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span>d;k<span class="pl-k">++</span>)q<span class="pl-k">=</span>p[e][k<span class="pl-k">+</span><span class="pl-c1">1</span>],s<span class="pl-k">=</span>p[e][k],t<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">B</span><span class="pl-k">=</span>n[e][k<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),y<span class="pl-k">=</span>n[e][k].<span class="pl-en">clone</span>(),z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">y</span>.<span class="pl-c1">x</span>,<span class="pl-c1">1</span>),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(q,s,t,[u,w,<span class="pl-c1">D</span>],<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">2</span>)),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-c1">B</span>,</td>
      </tr>
      <tr>
        <td id="L764" class="blob-num js-line-number" data-line-number="764"></td>
        <td id="LC764" class="blob-code blob-code-inner js-file-line">y,z]);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">CylinderGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CylinderGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CylinderGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CylinderGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radiusTop</span>,<span class="pl-smi">a</span>.<span class="pl-smi">radiusBottom</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-smi">a</span>.<span class="pl-smi">radialSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">openEnded</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaLength</span>)};</td>
      </tr>
      <tr>
        <td id="L765" class="blob-num js-line-number" data-line-number="765"></td>
        <td id="LC765" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">EdgesGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">-</span>b}<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">degToRad</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>)),e<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],g<span class="pl-k">=</span>{},f<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>],h;a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,<span class="pl-smi">h</span>.<span class="pl-en">fromBufferGeometry</span>(a))<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">clone</span>();<span class="pl-smi">h</span>.<span class="pl-en">mergeVertices</span>();<span class="pl-smi">h</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">vertices</span>;h<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">faces</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span>h[k],n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>n;n<span class="pl-k">++</span>){e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>p[f[n]];e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>p[f[(n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>]];<span class="pl-smi">e</span>.<span class="pl-c1">sort</span>(c);<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">toString</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g[q]<span class="pl-k">?</span>g[q]<span class="pl-k">=</span>{vert1<span class="pl-k">:</span>e[<span class="pl-c1">0</span>],vert2<span class="pl-k">:</span>e[<span class="pl-c1">1</span>],face1<span class="pl-k">:</span>k,</td>
      </tr>
      <tr>
        <td id="L766" class="blob-num js-line-number" data-line-number="766"></td>
        <td id="LC766" class="blob-code blob-code-inner js-file-line">face2<span class="pl-k">:</span><span class="pl-k">void</span> <span class="pl-c1">0</span>}<span class="pl-k">:</span>g[q].<span class="pl-smi">face2</span><span class="pl-k">=</span>k}e<span class="pl-k">=</span>[];<span class="pl-k">for</span>(q <span class="pl-k">in</span> g)<span class="pl-k">if</span>(f<span class="pl-k">=</span>g[q],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-smi">face2</span><span class="pl-k">||</span>h[<span class="pl-smi">f</span>.<span class="pl-smi">face1</span>].<span class="pl-smi">normal</span>.<span class="pl-en">dot</span>(h[<span class="pl-smi">f</span>.<span class="pl-smi">face2</span>].<span class="pl-smi">normal</span>)<span class="pl-k">&lt;=</span>d)k<span class="pl-k">=</span>l[<span class="pl-smi">f</span>.<span class="pl-smi">vert1</span>],<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-c1">x</span>),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-c1">y</span>),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-c1">z</span>),k<span class="pl-k">=</span>l[<span class="pl-smi">f</span>.<span class="pl-smi">vert2</span>],<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-c1">x</span>),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-c1">y</span>),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(e),<span class="pl-c1">3</span>))};<span class="pl-c1">THREE</span>.<span class="pl-smi">EdgesGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">EdgesGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">EdgesGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L767" class="blob-num js-line-number" data-line-number="767"></td>
        <td id="LC767" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ExtrudeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-k">typeof</span> a<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>),<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ExtrudeGeometry<span class="pl-pds">&quot;</span></span>,a<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(a)<span class="pl-k">?</span>a<span class="pl-k">:</span>[a],<span class="pl-c1">this</span>.<span class="pl-en">addShapeList</span>(a,b),<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>())};<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShapeList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c;d<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">addShape</span>(a[d],b)};</td>
      </tr>
      <tr>
        <td id="L768" class="blob-num js-line-number" data-line-number="768"></td>
        <td id="LC768" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ExtrudeGeometry: vec does not exist<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-en">clone</span>().<span class="pl-en">multiplyScalar</span>(c).<span class="pl-c1">add</span>(a)}function d(a,b,c){var d=1,d=a.x-b.x,e=a.y-b.y,f=c.x-a.x,g=c.y-a.y,h=d*d+e*e;if(Math.abs(d*g-e*f)&gt;Number.EPSILON){var k=Math.sqrt(h),l=Math.sqrt(f*f+g*g),h=b.x-e/k;b=b.y+d/k;f=((c.x-g/l-h)*g-(c.y+f/l-b)*f)/(d*g-e*f);c=h+d*f-a.x;a=b+e*f-a.y;d=c*c+a*a;if(2&gt;=d)return new THREE.Vector2(c,a);d=Math.sqrt(d/2)}else a=!1,d&gt;Number.EPSILON?</td>
      </tr>
      <tr>
        <td id="L769" class="blob-num js-line-number" data-line-number="769"></td>
        <td id="LC769" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>d<span class="pl-k">&lt;</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">?</span>f<span class="pl-k">&lt;</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">sign</span>(e)<span class="pl-k">===</span><span class="pl-c1">Math</span>.<span class="pl-c1">sign</span>(g)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),a<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-k">-</span>e,a<span class="pl-k">=</span>d,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h))<span class="pl-k">:</span>(c<span class="pl-k">=</span>d,a<span class="pl-k">=</span>e,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h<span class="pl-k">/</span><span class="pl-c1">2</span>));<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c<span class="pl-k">/</span>d,a<span class="pl-k">/</span>d)}function e(a,b){var c,d;for(G=a.length;0&lt;=--G;){c=G;d=G-1;0&gt;d&amp;&amp;(d=a.length-1);for(var e=0,f=q+2*m,e=0;e&lt;f;e++){var g=T*e,h=T*(e+1),k=b+c+g,g=b+d+g,l=b+d+h,h=b+c+h,k=k+F,g=g+F,l=l+F,h=h+F;J.faces.push(new THREE.Face3(k,g,h,null,null,1));J.faces.push(new THREE.Face3(g,l,h,null,null,1));k=u.generateSideWallUV(J,</td>
      </tr>
      <tr>
        <td id="L770" class="blob-num js-line-number" data-line-number="770"></td>
        <td id="LC770" class="blob-code blob-code-inner js-file-line">k,g,l,h);<span class="pl-c1">J</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([k[<span class="pl-c1">0</span>],k[<span class="pl-c1">1</span>],k[<span class="pl-c1">3</span>]]);<span class="pl-c1">J</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([k[<span class="pl-c1">1</span>],k[<span class="pl-c1">2</span>],k[<span class="pl-c1">3</span>]])}}}function g(a,b,c){J.vertices.push(new THREE.Vector3(a,b,c))}function f(a,b,c){a+=F;b+=F;c+=F;J.faces.push(new THREE.Face3(a,b,c,null,null,0));a=u.generateTopUV(J,a,b,c);J.faceVertexUvs[0].push(a)}var h=void 0!==b.amount?b.amount:100,l=void 0!==b.bevelThickness?b.bevelThickness:6,k=void 0!==b.bevelSize?b.bevelSize:l-2,m=void 0!==b.bevelSegments?b.bevelSegments:3,p=void 0!==b.bevelEnabled?b.bevelEnabled:!0,</td>
      </tr>
      <tr>
        <td id="L771" class="blob-num js-line-number" data-line-number="771"></td>
        <td id="LC771" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">curveSegments</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">curveSegments</span><span class="pl-k">:</span><span class="pl-c1">12</span>,q<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">steps</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">steps</span><span class="pl-k">:</span><span class="pl-c1">1</span>,s<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">extrudePath</span>,t,v<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">WorldUVGenerator</span>,w,<span class="pl-c1">D</span>,x,<span class="pl-c1">B</span>;s<span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-en">getSpacedPoints</span>(q),v<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,w<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">frames</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">frames</span><span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.TubeGeometry.FrenetFrames</span>(s,q,<span class="pl-k">!</span><span class="pl-c1">1</span>),<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);p<span class="pl-k">||</span>(k<span class="pl-k">=</span>l<span class="pl-k">=</span>m<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> y,z,<span class="pl-c1">A</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">this</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>,s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">extractPoints</span>(n),n<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">shape</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">holes</span>;<span class="pl-k">if</span>(s<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">isClockWise</span>(n)){n<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-c1">reverse</span>();</td>
      </tr>
      <tr>
        <td id="L772" class="blob-num js-line-number" data-line-number="772"></td>
        <td id="LC772" class="blob-code blob-code-inner js-file-line">z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;z<span class="pl-k">++</span>)y<span class="pl-k">=</span><span class="pl-c1">C</span>[z],<span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">isClockWise</span>(y)<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">C</span>[z]<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">reverse</span>());s<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">var</span> <span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">triangulateShape</span>(n,<span class="pl-c1">C</span>),<span class="pl-c1">L</span><span class="pl-k">=</span>n;z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;z<span class="pl-k">++</span>)y<span class="pl-k">=</span><span class="pl-c1">C</span>[z],n<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-c1">concat</span>(y);<span class="pl-k">var</span> <span class="pl-c1">Q</span>,<span class="pl-c1">M</span>,<span class="pl-c1">K</span>,<span class="pl-c1">E</span>,<span class="pl-c1">O</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-c1">length</span>,<span class="pl-c1">H</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">length</span>,s<span class="pl-k">=</span>[],<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">length</span>;<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">G</span><span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>,<span class="pl-c1">Q</span><span class="pl-k">++</span>,<span class="pl-c1">M</span><span class="pl-k">++</span>)<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">K</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>),<span class="pl-c1">M</span><span class="pl-k">===</span><span class="pl-c1">K</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">0</span>),s[<span class="pl-c1">G</span>]<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">L</span>[<span class="pl-c1">G</span>],<span class="pl-c1">L</span>[<span class="pl-c1">Q</span>],<span class="pl-c1">L</span>[<span class="pl-c1">M</span>]);<span class="pl-k">var</span> ia<span class="pl-k">=</span>[],<span class="pl-c1">U</span>,<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">concat</span>();z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;z<span class="pl-k">++</span>){y<span class="pl-k">=</span><span class="pl-c1">C</span>[z];<span class="pl-c1">U</span><span class="pl-k">=</span>[];<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">length</span>;<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">G</span><span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>,<span class="pl-c1">Q</span><span class="pl-k">++</span>,<span class="pl-c1">M</span><span class="pl-k">++</span>)<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">K</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>),<span class="pl-c1">M</span><span class="pl-k">===</span><span class="pl-c1">K</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">0</span>),<span class="pl-c1">U</span>[<span class="pl-c1">G</span>]<span class="pl-k">=</span><span class="pl-en">d</span>(y[<span class="pl-c1">G</span>],y[<span class="pl-c1">Q</span>],y[<span class="pl-c1">M</span>]);<span class="pl-smi">ia</span>.<span class="pl-c1">push</span>(<span class="pl-c1">U</span>);<span class="pl-c1">X</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L773" class="blob-num js-line-number" data-line-number="773"></td>
        <td id="LC773" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">X</span>.<span class="pl-c1">concat</span>(<span class="pl-c1">U</span>)}<span class="pl-k">for</span>(<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">Q</span><span class="pl-k">&lt;</span>m;<span class="pl-c1">Q</span><span class="pl-k">++</span>){<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">Q</span><span class="pl-k">/</span>m;<span class="pl-c1">E</span><span class="pl-k">=</span>l<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">K</span>);<span class="pl-c1">M</span><span class="pl-k">=</span>k<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-c1">K</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">length</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-c1">L</span>[<span class="pl-c1">G</span>],s[<span class="pl-c1">G</span>],<span class="pl-c1">M</span>),<span class="pl-en">g</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">E</span>);z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;z<span class="pl-k">++</span>)<span class="pl-k">for</span>(y<span class="pl-k">=</span><span class="pl-c1">C</span>[z],<span class="pl-c1">U</span><span class="pl-k">=</span>ia[z],<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">length</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-en">c</span>(y[<span class="pl-c1">G</span>],<span class="pl-c1">U</span>[<span class="pl-c1">G</span>],<span class="pl-c1">M</span>),<span class="pl-en">g</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">E</span>)}<span class="pl-c1">M</span><span class="pl-k">=</span>k;<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">T</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">O</span><span class="pl-k">=</span>p<span class="pl-k">?</span><span class="pl-en">c</span>(n[<span class="pl-c1">G</span>],<span class="pl-c1">X</span>[<span class="pl-c1">G</span>],<span class="pl-c1">M</span>)<span class="pl-k">:</span>n[<span class="pl-c1">G</span>],v<span class="pl-k">?</span>(<span class="pl-smi">x</span>.<span class="pl-en">copy</span>(<span class="pl-smi">w</span>.<span class="pl-smi">normals</span>[<span class="pl-c1">0</span>]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>),<span class="pl-c1">D</span>.<span class="pl-en">copy</span>(<span class="pl-smi">w</span>.<span class="pl-smi">binormals</span>[<span class="pl-c1">0</span>]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">O</span>.<span class="pl-c1">y</span>),<span class="pl-c1">B</span>.<span class="pl-en">copy</span>(t[<span class="pl-c1">0</span>]).<span class="pl-c1">add</span>(x).<span class="pl-c1">add</span>(<span class="pl-c1">D</span>),<span class="pl-en">g</span>(<span class="pl-c1">B</span>.<span class="pl-c1">x</span>,<span class="pl-c1">B</span>.<span class="pl-c1">y</span>,<span class="pl-c1">B</span>.<span class="pl-c1">z</span>))<span class="pl-k">:</span><span class="pl-en">g</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">K</span><span class="pl-k">&lt;=</span>q;<span class="pl-c1">K</span><span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">T</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">O</span><span class="pl-k">=</span>p<span class="pl-k">?</span><span class="pl-en">c</span>(n[<span class="pl-c1">G</span>],<span class="pl-c1">X</span>[<span class="pl-c1">G</span>],<span class="pl-c1">M</span>)<span class="pl-k">:</span>n[<span class="pl-c1">G</span>],v<span class="pl-k">?</span>(<span class="pl-smi">x</span>.<span class="pl-en">copy</span>(<span class="pl-smi">w</span>.<span class="pl-smi">normals</span>[<span class="pl-c1">K</span>]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>),</td>
      </tr>
      <tr>
        <td id="L774" class="blob-num js-line-number" data-line-number="774"></td>
        <td id="LC774" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>.<span class="pl-en">copy</span>(<span class="pl-smi">w</span>.<span class="pl-smi">binormals</span>[<span class="pl-c1">K</span>]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">O</span>.<span class="pl-c1">y</span>),<span class="pl-c1">B</span>.<span class="pl-en">copy</span>(t[<span class="pl-c1">K</span>]).<span class="pl-c1">add</span>(x).<span class="pl-c1">add</span>(<span class="pl-c1">D</span>),<span class="pl-en">g</span>(<span class="pl-c1">B</span>.<span class="pl-c1">x</span>,<span class="pl-c1">B</span>.<span class="pl-c1">y</span>,<span class="pl-c1">B</span>.<span class="pl-c1">z</span>))<span class="pl-k">:</span><span class="pl-en">g</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span>.<span class="pl-c1">y</span>,h<span class="pl-k">/</span>q<span class="pl-k">*</span><span class="pl-c1">K</span>);<span class="pl-k">for</span>(<span class="pl-c1">Q</span><span class="pl-k">=</span>m<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-c1">Q</span>;<span class="pl-c1">Q</span><span class="pl-k">--</span>){<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">Q</span><span class="pl-k">/</span>m;<span class="pl-c1">E</span><span class="pl-k">=</span>l<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">K</span>);<span class="pl-c1">M</span><span class="pl-k">=</span>k<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-c1">K</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">length</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-c1">L</span>[<span class="pl-c1">G</span>],s[<span class="pl-c1">G</span>],<span class="pl-c1">M</span>),<span class="pl-en">g</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span>.<span class="pl-c1">y</span>,h<span class="pl-k">+</span><span class="pl-c1">E</span>);z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;z<span class="pl-k">++</span>)<span class="pl-k">for</span>(y<span class="pl-k">=</span><span class="pl-c1">C</span>[z],<span class="pl-c1">U</span><span class="pl-k">=</span>ia[z],<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">length</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-en">c</span>(y[<span class="pl-c1">G</span>],<span class="pl-c1">U</span>[<span class="pl-c1">G</span>],<span class="pl-c1">M</span>),v<span class="pl-k">?</span><span class="pl-en">g</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>t[q<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">y</span>,t[q<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">E</span>)<span class="pl-k">:</span><span class="pl-en">g</span>(<span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span>.<span class="pl-c1">y</span>,h<span class="pl-k">+</span><span class="pl-c1">E</span>)}(<span class="pl-k">function</span>(){<span class="pl-k">if</span>(p){<span class="pl-k">var</span> a;a<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">*</span><span class="pl-c1">T</span>;<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">R</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">N</span>[<span class="pl-c1">G</span>],<span class="pl-en">f</span>(<span class="pl-c1">H</span>[<span class="pl-c1">2</span>]<span class="pl-k">+</span>a,<span class="pl-c1">H</span>[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a,<span class="pl-c1">H</span>[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a);a<span class="pl-k">=</span>q<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>m;a<span class="pl-k">*=</span><span class="pl-c1">T</span>;<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">R</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">N</span>[<span class="pl-c1">G</span>],<span class="pl-en">f</span>(<span class="pl-c1">H</span>[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a,<span class="pl-c1">H</span>[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a,<span class="pl-c1">H</span>[<span class="pl-c1">2</span>]<span class="pl-k">+</span>a)}<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L775" class="blob-num js-line-number" data-line-number="775"></td>
        <td id="LC775" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">R</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">N</span>[<span class="pl-c1">G</span>],<span class="pl-en">f</span>(<span class="pl-c1">H</span>[<span class="pl-c1">2</span>],<span class="pl-c1">H</span>[<span class="pl-c1">1</span>],<span class="pl-c1">H</span>[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">G</span><span class="pl-k">&lt;</span><span class="pl-c1">R</span>;<span class="pl-c1">G</span><span class="pl-k">++</span>)<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">N</span>[<span class="pl-c1">G</span>],<span class="pl-en">f</span>(<span class="pl-c1">H</span>[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">T</span><span class="pl-k">*</span>q,<span class="pl-c1">H</span>[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">T</span><span class="pl-k">*</span>q,<span class="pl-c1">H</span>[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">T</span><span class="pl-k">*</span>q)}})();(<span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-en">e</span>(<span class="pl-c1">L</span>,a);a<span class="pl-k">+=</span><span class="pl-c1">L</span>.<span class="pl-c1">length</span>;z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;z<span class="pl-k">++</span>)y<span class="pl-k">=</span><span class="pl-c1">C</span>[z],<span class="pl-en">e</span>(y,a),a<span class="pl-k">+=</span><span class="pl-smi">y</span>.<span class="pl-c1">length</span>})()};</td>
      </tr>
      <tr>
        <td id="L776" class="blob-num js-line-number" data-line-number="776"></td>
        <td id="LC776" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">WorldUVGenerator</span><span class="pl-k">=</span>{<span class="pl-en">generateTopUV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>;b<span class="pl-k">=</span>a[b];c<span class="pl-k">=</span>a[c];d<span class="pl-k">=</span>a[d];<span class="pl-k">return</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span>,<span class="pl-smi">d</span>.<span class="pl-c1">y</span>)]},<span class="pl-en">generateSideWallUV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>;b<span class="pl-k">=</span>a[b];c<span class="pl-k">=</span>a[c];d<span class="pl-k">=</span>a[d];e<span class="pl-k">=</span>a[e];<span class="pl-k">return</span>.<span class="pl-ii">01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>)<span class="pl-k">?</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">e</span>.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span>)]<span class="pl-k">:</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">d</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L777" class="blob-num js-line-number" data-line-number="777"></td>
        <td id="LC777" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">e</span>.<span class="pl-c1">y</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span>)]}};<span class="pl-c1">THREE</span>.<span class="pl-en">ShapeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ShapeGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(a)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[a]);<span class="pl-c1">this</span>.<span class="pl-en">addShapeList</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShapeList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">addShape</span>(a[c],b);<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L778" class="blob-num js-line-number" data-line-number="778"></td>
        <td id="LC778" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span>{});<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">material</span>,d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">WorldUVGenerator</span><span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span>,e,g,f,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">extractPoints</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-smi">curveSegments</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">curveSegments</span><span class="pl-k">:</span><span class="pl-c1">12</span>);<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">shape</span>,k<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">holes</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">isClockWise</span>(l))<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">reverse</span>(),e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)f<span class="pl-k">=</span>k[e],<span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">isClockWise</span>(f)<span class="pl-k">&amp;&amp;</span>(k[e]<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">reverse</span>());<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeUtils</span>.<span class="pl-en">triangulateShape</span>(l,k);e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)f<span class="pl-k">=</span>k[e],l<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">concat</span>(f);</td>
      </tr>
      <tr>
        <td id="L779" class="blob-num js-line-number" data-line-number="779"></td>
        <td id="LC779" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;g<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>k;e<span class="pl-k">++</span>)f<span class="pl-k">=</span>l[e],<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>));<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)k<span class="pl-k">=</span>m[e],l<span class="pl-k">=</span>k[<span class="pl-c1">0</span>]<span class="pl-k">+</span>h,f<span class="pl-k">=</span>k[<span class="pl-c1">1</span>]<span class="pl-k">+</span>h,k<span class="pl-k">=</span>k[<span class="pl-c1">2</span>]<span class="pl-k">+</span>h,<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(l,f,k,<span class="pl-c1">null</span>,<span class="pl-c1">null</span>,c)),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>(<span class="pl-smi">d</span>.<span class="pl-en">generateTopUV</span>(<span class="pl-c1">this</span>,l,f,k))};</td>
      </tr>
      <tr>
        <td id="L780" class="blob-num js-line-number" data-line-number="780"></td>
        <td id="LC780" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LatheGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LatheGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{points<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,phiStart<span class="pl-k">:</span>c,phiLength<span class="pl-k">:</span>d};b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">12</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>),g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>b,f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>b;f<span class="pl-k">&lt;=</span>h;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span>c<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>d,k<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(l),m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(l),l<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>p;l<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span>a[l],q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>k<span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>m<span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>k<span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;<span class="pl-smi">q</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(q)}c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span>b;f<span class="pl-k">&lt;</span>h;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;</span>p;l<span class="pl-k">++</span>){b<span class="pl-k">=</span>m<span class="pl-k">=</span>l<span class="pl-k">+</span>c<span class="pl-k">*</span>f;d<span class="pl-k">=</span>m<span class="pl-k">+</span>c;<span class="pl-k">var</span> k<span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>c,m<span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">1</span>,n<span class="pl-k">=</span>f<span class="pl-k">*</span>g,q<span class="pl-k">=</span>l<span class="pl-k">*</span>e,s<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L781" class="blob-num js-line-number" data-line-number="781"></td>
        <td id="LC781" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">+</span>g,t<span class="pl-k">=</span>q<span class="pl-k">+</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(b,d,m));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(n,q),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(s,q),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(n,t)]);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(d,k,m));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(s,q),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(s,t),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(n,t)])}<span class="pl-c1">this</span>.<span class="pl-en">mergeVertices</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">LatheGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">LatheGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LatheGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L782" class="blob-num js-line-number" data-line-number="782"></td>
        <td id="LC782" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PlaneGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PlaneGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{width<span class="pl-k">:</span>a,height<span class="pl-k">:</span>b,widthSegments<span class="pl-k">:</span>c,heightSegments<span class="pl-k">:</span>d};<span class="pl-c1">this</span>.<span class="pl-en">fromBufferGeometry</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.PlaneBufferGeometry</span>(a,b,c,d))};<span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PlaneGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-smi">a</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">heightSegments</span>)};</td>
      </tr>
      <tr>
        <td id="L783" class="blob-num js-line-number" data-line-number="783"></td>
        <td id="LC783" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PlaneBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PlaneBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{width<span class="pl-k">:</span>a,height<span class="pl-k">:</span>b,widthSegments<span class="pl-k">:</span>c,heightSegments<span class="pl-k">:</span>d};<span class="pl-k">var</span> e<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>;c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(c)<span class="pl-k">||</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(d)<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>,l<span class="pl-k">=</span>a<span class="pl-k">/</span>c,k<span class="pl-k">=</span>b<span class="pl-k">/</span>d;b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(f<span class="pl-k">*</span>h<span class="pl-k">*</span><span class="pl-c1">3</span>);a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(f<span class="pl-k">*</span>h<span class="pl-k">*</span><span class="pl-c1">3</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(f<span class="pl-k">*</span>h<span class="pl-k">*</span><span class="pl-c1">2</span>),p<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>h;q<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> s<span class="pl-k">=</span>q<span class="pl-k">*</span>k<span class="pl-k">-</span>g,t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;</span>f;t<span class="pl-k">++</span>)b[p]<span class="pl-k">=</span>t<span class="pl-k">*</span>l<span class="pl-k">-</span>e,b[p<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-k">-</span>s,a[p<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>,m[n]<span class="pl-k">=</span>t<span class="pl-k">/</span>c,m[n<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>q<span class="pl-k">/</span>d,p<span class="pl-k">+=</span><span class="pl-c1">3</span>,n<span class="pl-k">+=</span><span class="pl-c1">2</span>;p<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">=</span><span class="pl-k">new</span> (<span class="pl-c1">65535</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-c1">Uint32Array</span><span class="pl-k">:</span><span class="pl-c1">Uint16Array</span>)(c<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L784" class="blob-num js-line-number" data-line-number="784"></td>
        <td id="LC784" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">*</span><span class="pl-c1">6</span>);<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>d;q<span class="pl-k">++</span>)<span class="pl-k">for</span>(t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;</span>c;t<span class="pl-k">++</span>)g<span class="pl-k">=</span>t<span class="pl-k">+</span>f<span class="pl-k">*</span>(q<span class="pl-k">+</span><span class="pl-c1">1</span>),h<span class="pl-k">=</span>t<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>f<span class="pl-k">*</span>(q<span class="pl-k">+</span><span class="pl-c1">1</span>),l<span class="pl-k">=</span>t<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>f<span class="pl-k">*</span>q,e[p]<span class="pl-k">=</span>t<span class="pl-k">+</span>f<span class="pl-k">*</span>q,e[p<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>g,e[p<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>l,e[p<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>g,e[p<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>h,e[p<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>l,p<span class="pl-k">+=</span><span class="pl-c1">6</span>;<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(e,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(a,<span class="pl-c1">3</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(m,<span class="pl-c1">2</span>))};<span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneBufferGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L785" class="blob-num js-line-number" data-line-number="785"></td>
        <td id="LC785" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PlaneBufferGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-smi">a</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">heightSegments</span>)};</td>
      </tr>
      <tr>
        <td id="L786" class="blob-num js-line-number" data-line-number="786"></td>
        <td id="LC786" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">RingGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>RingGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{innerRadius<span class="pl-k">:</span>a,outerRadius<span class="pl-k">:</span>b,thetaSegments<span class="pl-k">:</span>c,phiSegments<span class="pl-k">:</span>d,thetaStart<span class="pl-k">:</span>e,thetaLength<span class="pl-k">:</span>g};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">50</span>;e<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">0</span>;g<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;c<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,c)<span class="pl-k">:</span><span class="pl-c1">8</span>;d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">1</span>,d)<span class="pl-k">:</span><span class="pl-c1">8</span>;<span class="pl-k">var</span> f,h<span class="pl-k">=</span>[],l<span class="pl-k">=</span>a,k<span class="pl-k">=</span>(b<span class="pl-k">-</span>a)<span class="pl-k">/</span>d;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>;a<span class="pl-k">++</span>){<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span>e<span class="pl-k">+</span>f<span class="pl-k">/</span>c<span class="pl-k">*</span>g;<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>l<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p);<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>l<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(m);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">/</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,</td>
      </tr>
      <tr>
        <td id="L787" class="blob-num js-line-number" data-line-number="787"></td>
        <td id="LC787" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">/</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>))}l<span class="pl-k">+=</span>k}b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>d;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span>a<span class="pl-k">*</span>(c<span class="pl-k">+</span><span class="pl-c1">1</span>),f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>)g<span class="pl-k">=</span>p<span class="pl-k">=</span>f<span class="pl-k">+</span>e,k<span class="pl-k">=</span>p<span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>,m<span class="pl-k">=</span>p<span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>,<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(g,k,m,[<span class="pl-smi">b</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">b</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">b</span>.<span class="pl-en">clone</span>()])),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([h[g].<span class="pl-en">clone</span>(),h[k].<span class="pl-en">clone</span>(),h[m].<span class="pl-en">clone</span>()]),g<span class="pl-k">=</span>p,k<span class="pl-k">=</span>p<span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>,m<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(g,k,m,[<span class="pl-smi">b</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">b</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">b</span>.<span class="pl-en">clone</span>()])),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([h[g].<span class="pl-en">clone</span>(),h[k].<span class="pl-en">clone</span>(),h[m].<span class="pl-en">clone</span>()]);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l)};</td>
      </tr>
      <tr>
        <td id="L788" class="blob-num js-line-number" data-line-number="788"></td>
        <td id="LC788" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">RingGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">RingGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RingGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RingGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.RingGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">innerRadius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">outerRadius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">phiSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaLength</span>)};</td>
      </tr>
      <tr>
        <td id="L789" class="blob-num js-line-number" data-line-number="789"></td>
        <td id="LC789" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SphereGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SphereGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,widthSegments<span class="pl-k">:</span>b,heightSegments<span class="pl-k">:</span>c,phiStart<span class="pl-k">:</span>d,phiLength<span class="pl-k">:</span>e,thetaStart<span class="pl-k">:</span>g,thetaLength<span class="pl-k">:</span>f};<span class="pl-c1">this</span>.<span class="pl-en">fromBufferGeometry</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.SphereBufferGeometry</span>(a,b,c,d,e,g,f))};<span class="pl-c1">THREE</span>.<span class="pl-smi">SphereGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SphereGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SphereGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L790" class="blob-num js-line-number" data-line-number="790"></td>
        <td id="LC790" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SphereGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">phiStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">phiLength</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaLength</span>)};</td>
      </tr>
      <tr>
        <td id="L791" class="blob-num js-line-number" data-line-number="791"></td>
        <td id="LC791" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SphereBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SphereBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,widthSegments<span class="pl-k">:</span>b,heightSegments<span class="pl-k">:</span>c,phiStart<span class="pl-k">:</span>d,phiLength<span class="pl-k">:</span>e,thetaStart<span class="pl-k">:</span>g,thetaLength<span class="pl-k">:</span>f};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">50</span>;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b)<span class="pl-k">||</span><span class="pl-c1">8</span>);c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">2</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(c)<span class="pl-k">||</span><span class="pl-c1">6</span>);d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">0</span>;e<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;g<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>g<span class="pl-k">+</span>f,l<span class="pl-k">=</span>(b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(c<span class="pl-k">+</span><span class="pl-c1">1</span>),k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>l),<span class="pl-c1">3</span>),m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L792" class="blob-num js-line-number" data-line-number="792"></td>
        <td id="LC792" class="blob-code blob-code-inner js-file-line">l),<span class="pl-c1">3</span>),l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>l),<span class="pl-c1">2</span>),p<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>[],q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,s<span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">&lt;=</span>c;s<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span>[],v<span class="pl-k">=</span>s<span class="pl-k">/</span>c,u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;=</span>b;u<span class="pl-k">++</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>u<span class="pl-k">/</span>b,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-k">-</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(d<span class="pl-k">+</span>w<span class="pl-k">*</span>e)<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(g<span class="pl-k">+</span>v<span class="pl-k">*</span>f),x<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(g<span class="pl-k">+</span>v<span class="pl-k">*</span>f),<span class="pl-c1">B</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(d<span class="pl-k">+</span>w<span class="pl-k">*</span>e)<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(g<span class="pl-k">+</span>v<span class="pl-k">*</span>f);<span class="pl-smi">q</span>.<span class="pl-c1">set</span>(<span class="pl-c1">D</span>,x,<span class="pl-c1">B</span>).<span class="pl-c1">normalize</span>();<span class="pl-smi">k</span>.<span class="pl-en">setXYZ</span>(p,<span class="pl-c1">D</span>,x,<span class="pl-c1">B</span>);<span class="pl-smi">m</span>.<span class="pl-en">setXYZ</span>(p,<span class="pl-smi">q</span>.<span class="pl-c1">x</span>,<span class="pl-smi">q</span>.<span class="pl-c1">y</span>,<span class="pl-smi">q</span>.<span class="pl-c1">z</span>);<span class="pl-smi">l</span>.<span class="pl-en">setXY</span>(p,w,<span class="pl-c1">1</span><span class="pl-k">-</span>v);<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(p);p<span class="pl-k">++</span>}<span class="pl-smi">n</span>.<span class="pl-c1">push</span>(t)}d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(s<span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">&lt;</span>c;s<span class="pl-k">++</span>)<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span>b;u<span class="pl-k">++</span>)e<span class="pl-k">=</span>n[s][u<span class="pl-k">+</span><span class="pl-c1">1</span>],f<span class="pl-k">=</span>n[s][u],p<span class="pl-k">=</span>n[s<span class="pl-k">+</span><span class="pl-c1">1</span>][u],q<span class="pl-k">=</span>n[s<span class="pl-k">+</span><span class="pl-c1">1</span>][u<span class="pl-k">+</span><span class="pl-c1">1</span>],(<span class="pl-c1">0</span><span class="pl-k">!==</span>s<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">push</span>(e,f,q),(s<span class="pl-k">!==</span>c<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">||</span>h<span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">push</span>(f,p,q);<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span>(<span class="pl-k">new</span> (<span class="pl-c1">65535</span><span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L793" class="blob-num js-line-number" data-line-number="793"></td>
        <td id="LC793" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-smi">count</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Uint32Attribute</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Uint16Attribute</span>)(d,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,k);<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,m);<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,l);<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">SphereBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SphereBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SphereBufferGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L794" class="blob-num js-line-number" data-line-number="794"></td>
        <td id="LC794" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SphereBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.SphereBufferGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">widthSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">heightSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">phiStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">phiLength</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaStart</span>,<span class="pl-smi">a</span>.<span class="pl-smi">thetaLength</span>)};</td>
      </tr>
      <tr>
        <td id="L795" class="blob-num js-line-number" data-line-number="795"></td>
        <td id="LC795" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TorusGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TorusGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,tube<span class="pl-k">:</span>b,radialSegments<span class="pl-k">:</span>c,tubularSegments<span class="pl-k">:</span>d,arc<span class="pl-k">:</span>e};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">100</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">40</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">8</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">6</span>;e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,f<span class="pl-k">=</span>[],h<span class="pl-k">=</span>[],l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;=</span>c;l<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;=</span>d;k<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>k<span class="pl-k">/</span>d<span class="pl-k">*</span>e,p<span class="pl-k">=</span>l<span class="pl-k">/</span>c<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>;<span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(m);<span class="pl-smi">g</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(m);<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p))<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(m);<span class="pl-smi">n</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p))<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(m);<span class="pl-smi">n</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(n);<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(k<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L796" class="blob-num js-line-number" data-line-number="796"></td>
        <td id="LC796" class="blob-code blob-code-inner js-file-line">d,l<span class="pl-k">/</span>c));<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">n</span>.<span class="pl-en">clone</span>().<span class="pl-c1">sub</span>(g).<span class="pl-c1">normalize</span>())}<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;=</span>c;l<span class="pl-k">++</span>)<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">1</span>;k<span class="pl-k">&lt;=</span>d;k<span class="pl-k">++</span>)a<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>l<span class="pl-k">+</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(l<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(l<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>k,g<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>l<span class="pl-k">+</span>k,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,g,[h[a].<span class="pl-en">clone</span>(),h[b].<span class="pl-en">clone</span>(),h[g].<span class="pl-en">clone</span>()]),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(m),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([f[a].<span class="pl-en">clone</span>(),f[b].<span class="pl-en">clone</span>(),f[g].<span class="pl-en">clone</span>()]),m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(b,e,g,[h[b].<span class="pl-en">clone</span>(),h[e].<span class="pl-en">clone</span>(),h[g].<span class="pl-en">clone</span>()]),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(m),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([f[b].<span class="pl-en">clone</span>(),f[e].<span class="pl-en">clone</span>(),f[g].<span class="pl-en">clone</span>()]);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>()};</td>
      </tr>
      <tr>
        <td id="L797" class="blob-num js-line-number" data-line-number="797"></td>
        <td id="LC797" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">TorusGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">TorusGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TorusGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">TorusGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.TorusGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">tube</span>,<span class="pl-smi">a</span>.<span class="pl-smi">radialSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">tubularSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">arc</span>)};</td>
      </tr>
      <tr>
        <td id="L798" class="blob-num js-line-number" data-line-number="798"></td>
        <td id="LC798" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TorusKnotGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);a<span class="pl-k">*=</span>b<span class="pl-k">/</span>c;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);f<span class="pl-k">*=</span>d<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">+</span>b)<span class="pl-k">*</span><span class="pl-c1">.5</span>;g<span class="pl-k">=</span>d<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">+</span>b)<span class="pl-k">*</span>g<span class="pl-k">*</span><span class="pl-c1">.5</span>;d<span class="pl-k">=</span>e<span class="pl-k">*</span>d<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a)<span class="pl-k">*</span><span class="pl-c1">.5</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(f,g,d)}<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TorusKnotGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,tube<span class="pl-k">:</span>b,radialSegments<span class="pl-k">:</span>c,tubularSegments<span class="pl-k">:</span>d,p<span class="pl-k">:</span>e,q<span class="pl-k">:</span>g,heightScale<span class="pl-k">:</span>f};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">100</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">40</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">64</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">2</span>;g<span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">3</span>;f<span class="pl-k">=</span>f<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">Array</span>(c),k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>c;<span class="pl-k">++</span>n){l[n]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L799" class="blob-num js-line-number" data-line-number="799"></td>
        <td id="LC799" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Array</span>(d);<span class="pl-k">var</span> q<span class="pl-k">=</span>n<span class="pl-k">/</span>c<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,s<span class="pl-k">=</span><span class="pl-en">h</span>(q,g,e,a,f),q<span class="pl-k">=</span><span class="pl-en">h</span>(q<span class="pl-k">+</span><span class="pl-c1">.01</span>,g,e,a,f);<span class="pl-smi">k</span>.<span class="pl-en">subVectors</span>(q,s);<span class="pl-smi">m</span>.<span class="pl-en">addVectors</span>(q,s);<span class="pl-smi">p</span>.<span class="pl-en">crossVectors</span>(k,m);<span class="pl-smi">m</span>.<span class="pl-en">crossVectors</span>(p,k);<span class="pl-smi">p</span>.<span class="pl-c1">normalize</span>();<span class="pl-smi">m</span>.<span class="pl-c1">normalize</span>();<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>d;<span class="pl-k">++</span>q){<span class="pl-k">var</span> t<span class="pl-k">=</span>q<span class="pl-k">/</span>d<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,v<span class="pl-k">=</span><span class="pl-k">-</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(t),t<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(t),u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>;<span class="pl-smi">u</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">z</span>;l[n][q]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(u)<span class="pl-k">-</span><span class="pl-c1">1</span>}}<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>c;<span class="pl-k">++</span>n)<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>d;<span class="pl-k">++</span>q)e<span class="pl-k">=</span>(n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>c,g<span class="pl-k">=</span>(q<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>d,a<span class="pl-k">=</span>l[n][q],b<span class="pl-k">=</span>l[e][q],e<span class="pl-k">=</span>l[e][g],g<span class="pl-k">=</span>l[n][g],f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(n<span class="pl-k">/</span>c,q<span class="pl-k">/</span>d),k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c,</td>
      </tr>
      <tr>
        <td id="L800" class="blob-num js-line-number" data-line-number="800"></td>
        <td id="LC800" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">/</span>d),m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c,(q<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(n<span class="pl-k">/</span>c,(q<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,g)),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([f,k,p]),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(b,e,g)),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-smi">k</span>.<span class="pl-en">clone</span>(),m,<span class="pl-smi">p</span>.<span class="pl-en">clone</span>()]);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">TorusKnotGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">TorusKnotGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TorusKnotGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L801" class="blob-num js-line-number" data-line-number="801"></td>
        <td id="LC801" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">TorusKnotGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.TorusKnotGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">tube</span>,<span class="pl-smi">a</span>.<span class="pl-smi">radialSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">tubularSegments</span>,<span class="pl-smi">a</span>.<span class="pl-smi">p</span>,<span class="pl-smi">a</span>.<span class="pl-smi">q</span>,<span class="pl-smi">a</span>.<span class="pl-smi">heightScale</span>)};</td>
      </tr>
      <tr>
        <td id="L802" class="blob-num js-line-number" data-line-number="802"></td>
        <td id="LC802" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TubeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TubeGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{path<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,radius<span class="pl-k">:</span>c,radialSegments<span class="pl-k">:</span>d,closed<span class="pl-k">:</span>e,taper<span class="pl-k">:</span>g};b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">64</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;e<span class="pl-k">=</span>e<span class="pl-k">||!</span><span class="pl-c1">1</span>;g<span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-smi">NoTaper</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span>[],h,l,k<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>,m,p,n,q,s,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,v,u,w;v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TubeGeometry.FrenetFrames</span>(a,b,e);u<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">normals</span>;w<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">binormals</span>;<span class="pl-c1">this</span>.<span class="pl-smi">tangents</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">tangents</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normals</span><span class="pl-k">=</span>u;<span class="pl-c1">this</span>.<span class="pl-smi">binormals</span><span class="pl-k">=</span>w;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>k;v<span class="pl-k">++</span>)<span class="pl-k">for</span>(f[v]<span class="pl-k">=</span>[],m<span class="pl-k">=</span>v<span class="pl-k">/</span>(k<span class="pl-k">-</span><span class="pl-c1">1</span>),s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getPointAt</span>(m),h<span class="pl-k">=</span>u[v],l<span class="pl-k">=</span>w[v],n<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-en">g</span>(m),m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L803" class="blob-num js-line-number" data-line-number="803"></td>
        <td id="LC803" class="blob-code blob-code-inner js-file-line">d;m<span class="pl-k">++</span>)p<span class="pl-k">=</span>m<span class="pl-k">/</span>d<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,q<span class="pl-k">=</span><span class="pl-k">-</span>n<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p),p<span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p),<span class="pl-smi">t</span>.<span class="pl-en">copy</span>(s),<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>q<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span>,<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>q<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span>,<span class="pl-smi">t</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>q<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-smi">l</span>.<span class="pl-c1">z</span>,f[v][m]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">t</span>.<span class="pl-c1">x</span>,<span class="pl-smi">t</span>.<span class="pl-c1">y</span>,<span class="pl-smi">t</span>.<span class="pl-c1">z</span>))<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>b;v<span class="pl-k">++</span>)<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>d;m<span class="pl-k">++</span>)g<span class="pl-k">=</span>e<span class="pl-k">?</span>(v<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>b<span class="pl-k">:</span>v<span class="pl-k">+</span><span class="pl-c1">1</span>,k<span class="pl-k">=</span>(m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>d,a<span class="pl-k">=</span>f[v][m],c<span class="pl-k">=</span>f[g][m],g<span class="pl-k">=</span>f[g][k],k<span class="pl-k">=</span>f[v][k],t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(v<span class="pl-k">/</span>b,m<span class="pl-k">/</span>d),u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((v<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,m<span class="pl-k">/</span>d),w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((v<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,(m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(v<span class="pl-k">/</span>b,(m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,c,k)),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([t,u,h]),<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(c,</td>
      </tr>
      <tr>
        <td id="L804" class="blob-num js-line-number" data-line-number="804"></td>
        <td id="LC804" class="blob-code blob-code-inner js-file-line">g,k)),<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-smi">u</span>.<span class="pl-en">clone</span>(),w,<span class="pl-smi">h</span>.<span class="pl-en">clone</span>()]);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">path</span>,<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">segments</span>,<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">radius</span>,<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">radialSegments</span>,<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>.<span class="pl-c1">closed</span>,<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">taper</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-en">NoTaper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L805" class="blob-num js-line-number" data-line-number="805"></td>
        <td id="LC805" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-en">SinusoidalTaper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span>a)};</td>
      </tr>
      <tr>
        <td id="L806" class="blob-num js-line-number" data-line-number="806"></td>
        <td id="LC806" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-en">FrenetFrames</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,e<span class="pl-k">=</span>[],g<span class="pl-k">=</span>[],f<span class="pl-k">=</span>[],h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;b<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> k,m,p;<span class="pl-c1">this</span>.<span class="pl-smi">tangents</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">normals</span><span class="pl-k">=</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">binormals</span><span class="pl-k">=</span>f;<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span>b;k<span class="pl-k">++</span>)m<span class="pl-k">=</span>k<span class="pl-k">/</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>),e[k]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getTangentAt</span>(m),e[k].<span class="pl-c1">normalize</span>();g[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;k<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>);m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>);p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">z</span>);k<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>k,<span class="pl-smi">d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));m<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>m,<span class="pl-smi">d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));p<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">h</span>.<span class="pl-en">crossVectors</span>(e[<span class="pl-c1">0</span>],d).<span class="pl-c1">normalize</span>();g[<span class="pl-c1">0</span>].<span class="pl-en">crossVectors</span>(e[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L807" class="blob-num js-line-number" data-line-number="807"></td>
        <td id="LC807" class="blob-code blob-code-inner js-file-line">h);f[<span class="pl-c1">0</span>].<span class="pl-en">crossVectors</span>(e[<span class="pl-c1">0</span>],g[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">1</span>;k<span class="pl-k">&lt;</span>b;k<span class="pl-k">++</span>)g[k]<span class="pl-k">=</span>g[k<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),f[k]<span class="pl-k">=</span>f[k<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">h</span>.<span class="pl-en">crossVectors</span>(e[k<span class="pl-k">-</span><span class="pl-c1">1</span>],e[k]),<span class="pl-smi">h</span>.<span class="pl-c1">length</span>()<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">EPSILON</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-c1">normalize</span>(),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(e[k<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">dot</span>(e[k]),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),g[k].<span class="pl-en">applyMatrix4</span>(<span class="pl-smi">l</span>.<span class="pl-en">makeRotationAxis</span>(h,d))),f[k].<span class="pl-en">crossVectors</span>(e[k],g[k]);<span class="pl-k">if</span>(c)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(g[<span class="pl-c1">0</span>].<span class="pl-en">dot</span>(g[b<span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),d<span class="pl-k">/=</span>b<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span><span class="pl-k">&lt;</span>e[<span class="pl-c1">0</span>].<span class="pl-en">dot</span>(<span class="pl-smi">h</span>.<span class="pl-en">crossVectors</span>(g[<span class="pl-c1">0</span>],g[b<span class="pl-k">-</span><span class="pl-c1">1</span>]))<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-k">-</span>d),k<span class="pl-k">=</span><span class="pl-c1">1</span>;k<span class="pl-k">&lt;</span>b;k<span class="pl-k">++</span>)g[k].<span class="pl-en">applyMatrix4</span>(<span class="pl-smi">l</span>.<span class="pl-en">makeRotationAxis</span>(e[k],d<span class="pl-k">*</span>k)),f[k].<span class="pl-en">crossVectors</span>(e[k],g[k])};</td>
      </tr>
      <tr>
        <td id="L808" class="blob-num js-line-number" data-line-number="808"></td>
        <td id="LC808" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PolyhedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">normalize</span>().<span class="pl-en">clone</span>();<span class="pl-smi">b</span>.<span class="pl-c1">index</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(b)<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span>,<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span><span class="pl-c1">.5</span>;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>))<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span><span class="pl-c1">.5</span>;<span class="pl-smi">b</span>.<span class="pl-smi">uv</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,<span class="pl-c1">1</span><span class="pl-k">-</span>a);<span class="pl-k">return</span> b}function g(a,b,c,d){d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()],void 0,d);l.faces.push(d);v.copy(a).add(b).add(c).divideScalar(3);d=Math.atan2(v.z,-v.x);l.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])}function f(a,</td>
      </tr>
      <tr>
        <td id="L809" class="blob-num js-line-number" data-line-number="809"></td>
        <td id="LC809" class="blob-code blob-code-inner js-file-line">b){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>,b),d<span class="pl-k">=</span><span class="pl-en">e</span>(<span class="pl-smi">l</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">a</span>]),f<span class="pl-k">=</span><span class="pl-en">e</span>(<span class="pl-smi">l</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">b</span>]),h<span class="pl-k">=</span><span class="pl-en">e</span>(<span class="pl-smi">l</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">c</span>]),k<span class="pl-k">=</span>[],n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materialIndex</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;=</span>c;m<span class="pl-k">++</span>){k[m]<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-en">e</span>(<span class="pl-smi">d</span>.<span class="pl-en">clone</span>().<span class="pl-en">lerp</span>(h,m<span class="pl-k">/</span>c)),q<span class="pl-k">=</span><span class="pl-en">e</span>(<span class="pl-smi">f</span>.<span class="pl-en">clone</span>().<span class="pl-en">lerp</span>(h,m<span class="pl-k">/</span>c)),s<span class="pl-k">=</span>c<span class="pl-k">-</span>m,t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;=</span>s;t<span class="pl-k">++</span>)k[m][t]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>t<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">===</span>c<span class="pl-k">?</span>p<span class="pl-k">:</span><span class="pl-en">e</span>(<span class="pl-smi">p</span>.<span class="pl-en">clone</span>().<span class="pl-en">lerp</span>(q,t<span class="pl-k">/</span>s))}<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>c;m<span class="pl-k">++</span>)<span class="pl-k">for</span>(t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>m)<span class="pl-k">-</span><span class="pl-c1">1</span>;t<span class="pl-k">++</span>)d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(t<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">0</span><span class="pl-k">===</span>t<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-en">g</span>(k[m][d<span class="pl-k">+</span><span class="pl-c1">1</span>],k[m<span class="pl-k">+</span><span class="pl-c1">1</span>][d],k[m][d],n)<span class="pl-k">:</span><span class="pl-en">g</span>(k[m][d<span class="pl-k">+</span><span class="pl-c1">1</span>],k[m<span class="pl-k">+</span><span class="pl-c1">1</span>][d<span class="pl-k">+</span><span class="pl-c1">1</span>],k[m<span class="pl-k">+</span><span class="pl-c1">1</span>][d],n)}function h(a,b,c){0&gt;c&amp;&amp;1===a.x&amp;&amp;(a=new THREE.Vector2(a.x-1,a.y));0===b.x&amp;&amp;0===b.z&amp;&amp;(a=new THREE.Vector2(c/</td>
      </tr>
      <tr>
        <td id="L810" class="blob-num js-line-number" data-line-number="810"></td>
        <td id="LC810" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span><span class="pl-c1">.5</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>));<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">clone</span>()}<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PolyhedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{vertices<span class="pl-k">:</span>a,indices<span class="pl-k">:</span>b,radius<span class="pl-k">:</span>c,detail<span class="pl-k">:</span>d};c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">this</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-en">e</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a[k],a[k<span class="pl-k">+</span><span class="pl-c1">1</span>],a[k<span class="pl-k">+</span><span class="pl-c1">2</span>]));a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span>[],n<span class="pl-k">=</span>k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">+=</span><span class="pl-c1">3</span>,n<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>a[b[k]],s<span class="pl-k">=</span>a[b[k<span class="pl-k">+</span><span class="pl-c1">1</span>]],t<span class="pl-k">=</span>a[b[k<span class="pl-k">+</span><span class="pl-c1">2</span>]];p[n]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(<span class="pl-smi">q</span>.<span class="pl-c1">index</span>,<span class="pl-smi">s</span>.<span class="pl-c1">index</span>,<span class="pl-smi">t</span>.<span class="pl-c1">index</span>,[<span class="pl-smi">q</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">t</span>.<span class="pl-en">clone</span>()],<span class="pl-k">void</span> <span class="pl-c1">0</span>,n)}<span class="pl-k">for</span>(<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">++</span>)<span class="pl-en">f</span>(p[k],d);k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L811" class="blob-num js-line-number" data-line-number="811"></td>
        <td id="LC811" class="blob-code blob-code-inner js-file-line">m;k<span class="pl-k">++</span>)b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>][k],d<span class="pl-k">=</span>b[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>,a<span class="pl-k">=</span>b[<span class="pl-c1">1</span>].<span class="pl-c1">x</span>,p<span class="pl-k">=</span>b[<span class="pl-c1">2</span>].<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(d,a,p),q<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(d,a,p),<span class="pl-c1">.9</span><span class="pl-k">&lt;</span>n<span class="pl-k">&amp;&amp;</span><span class="pl-c1">.1</span><span class="pl-k">&gt;</span>q<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">.2</span><span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(b[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1</span>),<span class="pl-c1">.2</span><span class="pl-k">&gt;</span>a<span class="pl-k">&amp;&amp;</span>(b[<span class="pl-c1">1</span>].<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1</span>),<span class="pl-c1">.2</span><span class="pl-k">&gt;</span>p<span class="pl-k">&amp;&amp;</span>(b[<span class="pl-c1">2</span>].<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1</span>));k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[k].<span class="pl-en">multiplyScalar</span>(c);<span class="pl-c1">this</span>.<span class="pl-en">mergeVertices</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c)};<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L812" class="blob-num js-line-number" data-line-number="812"></td>
        <td id="LC812" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PolyhedronGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,<span class="pl-smi">a</span>.<span class="pl-smi">indices</span>,<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">detail</span>)};</td>
      </tr>
      <tr>
        <td id="L813" class="blob-num js-line-number" data-line-number="813"></td>
        <td id="LC813" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DodecahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">5</span>))<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>c;<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,c,<span class="pl-c1">0</span>,d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,d,c,<span class="pl-k">-</span>d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,c,<span class="pl-c1">0</span>,d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,d,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,d,c,<span class="pl-c1">0</span>,d],[<span class="pl-c1">3</span>,<span class="pl-c1">11</span>,<span class="pl-c1">7</span>,<span class="pl-c1">3</span>,<span class="pl-c1">7</span>,<span class="pl-c1">15</span>,<span class="pl-c1">3</span>,<span class="pl-c1">15</span>,<span class="pl-c1">13</span>,<span class="pl-c1">7</span>,<span class="pl-c1">19</span>,<span class="pl-c1">17</span>,<span class="pl-c1">7</span>,<span class="pl-c1">17</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">6</span>,<span class="pl-c1">15</span>,<span class="pl-c1">17</span>,<span class="pl-c1">4</span>,<span class="pl-c1">8</span>,<span class="pl-c1">17</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>,<span class="pl-c1">17</span>,<span class="pl-c1">10</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">0</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">2</span>,<span class="pl-c1">8</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>,<span class="pl-c1">0</span>,<span class="pl-c1">12</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">18</span>,<span class="pl-c1">0</span>,<span class="pl-c1">18</span>,<span class="pl-c1">16</span>,<span class="pl-c1">6</span>,<span class="pl-c1">10</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>,<span class="pl-c1">13</span>,<span class="pl-c1">6</span>,<span class="pl-c1">13</span>,<span class="pl-c1">15</span>,<span class="pl-c1">2</span>,<span class="pl-c1">16</span>,<span class="pl-c1">18</span>,<span class="pl-c1">2</span>,<span class="pl-c1">18</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">13</span>,<span class="pl-c1">18</span>,<span class="pl-c1">1</span>,<span class="pl-c1">9</span>,<span class="pl-c1">18</span>,<span class="pl-c1">9</span>,<span class="pl-c1">11</span>,<span class="pl-c1">18</span>,<span class="pl-c1">11</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">14</span>,<span class="pl-c1">12</span>,<span class="pl-c1">4</span>,<span class="pl-c1">12</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">0</span>,<span class="pl-c1">8</span>,<span class="pl-c1">11</span>,<span class="pl-c1">9</span>,<span class="pl-c1">5</span>,<span class="pl-c1">11</span>,<span class="pl-c1">5</span>,<span class="pl-c1">19</span>,<span class="pl-c1">11</span>,<span class="pl-c1">19</span>,<span class="pl-c1">7</span>,<span class="pl-c1">19</span>,<span class="pl-c1">5</span>,<span class="pl-c1">14</span>,<span class="pl-c1">19</span>,<span class="pl-c1">14</span>,<span class="pl-c1">4</span>,<span class="pl-c1">19</span>,<span class="pl-c1">4</span>,<span class="pl-c1">17</span>,<span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L814" class="blob-num js-line-number" data-line-number="814"></td>
        <td id="LC814" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">12</span>,<span class="pl-c1">14</span>,<span class="pl-c1">1</span>,<span class="pl-c1">14</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>],a,b);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>DodecahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};<span class="pl-c1">THREE</span>.<span class="pl-smi">DodecahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">DodecahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DodecahedronGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">DodecahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.DodecahedronGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">detail</span>)};</td>
      </tr>
      <tr>
        <td id="L815" class="blob-num js-line-number" data-line-number="815"></td>
        <td id="LC815" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">IcosahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">5</span>))<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,[<span class="pl-k">-</span><span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>c,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">11</span>,<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">7</span>,<span class="pl-c1">0</span>,<span class="pl-c1">7</span>,<span class="pl-c1">10</span>,<span class="pl-c1">0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>,<span class="pl-c1">5</span>,<span class="pl-c1">11</span>,<span class="pl-c1">4</span>,<span class="pl-c1">11</span>,<span class="pl-c1">10</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>,<span class="pl-c1">7</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">1</span>,<span class="pl-c1">8</span>,<span class="pl-c1">3</span>,<span class="pl-c1">9</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">3</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">3</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">4</span>,<span class="pl-c1">9</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">11</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>,<span class="pl-c1">8</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">9</span>,<span class="pl-c1">8</span>,<span class="pl-c1">1</span>],a,b);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>IcosahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};<span class="pl-c1">THREE</span>.<span class="pl-smi">IcosahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L816" class="blob-num js-line-number" data-line-number="816"></td>
        <td id="LC816" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">IcosahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">IcosahedronGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">IcosahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.IcosahedronGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">detail</span>)};<span class="pl-c1">THREE</span>.<span class="pl-en">OctahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>],a,b);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>OctahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};<span class="pl-c1">THREE</span>.<span class="pl-smi">OctahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L817" class="blob-num js-line-number" data-line-number="817"></td>
        <td id="LC817" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">OctahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OctahedronGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OctahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.OctahedronGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">detail</span>)};<span class="pl-c1">THREE</span>.<span class="pl-en">TetrahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>],a,b);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TetrahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};<span class="pl-c1">THREE</span>.<span class="pl-smi">TetrahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L818" class="blob-num js-line-number" data-line-number="818"></td>
        <td id="LC818" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">TetrahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TetrahedronGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">TetrahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">parameters</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.TetrahedronGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">a</span>.<span class="pl-smi">detail</span>)};</td>
      </tr>
      <tr>
        <td id="L819" class="blob-num js-line-number" data-line-number="819"></td>
        <td id="LC819" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ParametricGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ParametricGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">parameters</span><span class="pl-k">=</span>{func<span class="pl-k">:</span>a,slices<span class="pl-k">:</span>b,stacks<span class="pl-k">:</span>c};<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],f,h,l,k,m<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;=</span>c;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(k<span class="pl-k">=</span>f<span class="pl-k">/</span>c,h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;=</span>b;h<span class="pl-k">++</span>)l<span class="pl-k">=</span>h<span class="pl-k">/</span>b,l<span class="pl-k">=</span><span class="pl-en">a</span>(l,k),<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(l);<span class="pl-k">var</span> p,n,q,s;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>b;h<span class="pl-k">++</span>)a<span class="pl-k">=</span>f<span class="pl-k">*</span>m<span class="pl-k">+</span>h,d<span class="pl-k">=</span>f<span class="pl-k">*</span>m<span class="pl-k">+</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>,k<span class="pl-k">=</span>(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>m<span class="pl-k">+</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>,l<span class="pl-k">=</span>(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>m<span class="pl-k">+</span>h,p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(h<span class="pl-k">/</span>b,f<span class="pl-k">/</span>c),n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,f<span class="pl-k">/</span>c),q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c),s<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(h<span class="pl-k">/</span>b,(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,</td>
      </tr>
      <tr>
        <td id="L820" class="blob-num js-line-number" data-line-number="820"></td>
        <td id="LC820" class="blob-code blob-code-inner js-file-line">d,l)),<span class="pl-smi">g</span>.<span class="pl-c1">push</span>([p,n,s]),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(d,k,l)),<span class="pl-smi">g</span>.<span class="pl-c1">push</span>([<span class="pl-smi">n</span>.<span class="pl-en">clone</span>(),q,<span class="pl-smi">s</span>.<span class="pl-en">clone</span>()]);<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">ParametricGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ParametricGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ParametricGeometry</span>;</td>
      </tr>
      <tr>
        <td id="L821" class="blob-num js-line-number" data-line-number="821"></td>
        <td id="LC821" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WireframeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">-</span>b}<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],d<span class="pl-k">=</span>{},e<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>k;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>f[a],p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>){c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>m[e[p]];c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>m[e[(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>]];<span class="pl-smi">c</span>.<span class="pl-c1">sort</span>(b);<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">toString</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d[n]<span class="pl-k">&amp;&amp;</span>(l[<span class="pl-c1">2</span><span class="pl-k">*</span>h]<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],l[<span class="pl-c1">2</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],d[n]<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,h<span class="pl-k">++</span>)}c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>h);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span>h;a<span class="pl-k">&lt;</span>k;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">2</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)d<span class="pl-k">=</span>g[l[<span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">+</span>p]],h<span class="pl-k">=</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>p,c[h<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span>,c[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L822" class="blob-num js-line-number" data-line-number="822"></td>
        <td id="LC822" class="blob-code blob-code-inner js-file-line">c[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">3</span>))}<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">index</span>){k<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">index</span>.<span class="pl-smi">array</span>;g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>;e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">drawcalls</span>;h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-en">addGroup</span>(<span class="pl-c1">0</span>,<span class="pl-smi">k</span>.<span class="pl-c1">length</span>);l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>);f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>m;<span class="pl-k">++</span>f){a<span class="pl-k">=</span>e[f];p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">start</span>;n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">count</span>;a<span class="pl-k">=</span>p;<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span>p<span class="pl-k">+</span>n;a<span class="pl-k">&lt;</span>q;a<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>k[a<span class="pl-k">+</span>p],c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>k[a<span class="pl-k">+</span>(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>],<span class="pl-smi">c</span>.<span class="pl-c1">sort</span>(b),n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">toString</span>(),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d[n]<span class="pl-k">&amp;&amp;</span>(l[<span class="pl-c1">2</span><span class="pl-k">*</span>h]<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],l[<span class="pl-c1">2</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],d[n]<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,h<span class="pl-k">++</span>)}c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>h);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L823" class="blob-num js-line-number" data-line-number="823"></td>
        <td id="LC823" class="blob-code blob-code-inner js-file-line">h;a<span class="pl-k">&lt;</span>k;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">2</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)h<span class="pl-k">=</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>p,d<span class="pl-k">=</span>l[<span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">+</span>p],c[h<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">getX</span>(d),c[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">getY</span>(d),c[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">getZ</span>(d)}<span class="pl-k">else</span> <span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,h<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>,l<span class="pl-k">=</span>h<span class="pl-k">/</span><span class="pl-c1">3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>h),a<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span>l;a<span class="pl-k">&lt;</span>k;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)h<span class="pl-k">=</span><span class="pl-c1">18</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>p,l<span class="pl-k">=</span><span class="pl-c1">9</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>p,c[h<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>g[l],c[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>g[l<span class="pl-k">+</span><span class="pl-c1">1</span>],c[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>g[l<span class="pl-k">+</span><span class="pl-c1">2</span>],d<span class="pl-k">=</span><span class="pl-c1">9</span><span class="pl-k">*</span>a<span class="pl-k">+</span>(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">3</span>,c[h<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>g[d],c[h<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>g[d<span class="pl-k">+</span><span class="pl-c1">1</span>],c[h<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>g[d<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-c1">this</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">3</span>))}};<span class="pl-c1">THREE</span>.<span class="pl-smi">WireframeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L824" class="blob-num js-line-number" data-line-number="824"></td>
        <td id="LC824" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">WireframeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">WireframeGeometry</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">AxisHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a]),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">.6</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.6</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">.6</span>,<span class="pl-c1">1</span>]);a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;<span class="pl-smi">a</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>));<span class="pl-smi">a</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">3</span>));b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>});<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">AxisHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L825" class="blob-num js-line-number" data-line-number="825"></td>
        <td id="LC825" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AxisHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AxisHelper</span>;</td>
      </tr>
      <tr>
        <td id="L826" class="blob-num js-line-number" data-line-number="826"></td>
        <td id="LC826" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ArrowHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-c1">0</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-en">translate</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">16776960</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-c1">.2</span><span class="pl-k">*</span>e);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-c1">.2</span><span class="pl-k">*</span>f);<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">copy</span>(d);f<span class="pl-k">&lt;</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">line</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(a,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>g})),<span class="pl-c1">this</span>.<span class="pl-smi">line</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">line</span>));<span class="pl-c1">this</span>.<span class="pl-smi">cone</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(b,<span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span>g}));</td>
      </tr>
      <tr>
        <td id="L827" class="blob-num js-line-number" data-line-number="827"></td>
        <td id="LC827" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>);<span class="pl-c1">this</span>.<span class="pl-en">setDirection</span>(c);<span class="pl-c1">this</span>.<span class="pl-en">setLength</span>(e,f,h)}}();<span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-c1">.99999</span><span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">.99999</span><span class="pl-k">&gt;</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)<span class="pl-k">:</span>(<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(<span class="pl-smi">c</span>.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>).<span class="pl-c1">normalize</span>(),b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span>),<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">setFromAxisAngle</span>(a,b))}}();</td>
      </tr>
      <tr>
        <td id="L828" class="blob-num js-line-number" data-line-number="828"></td>
        <td id="LC828" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">.2</span><span class="pl-k">*</span>a);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">.2</span><span class="pl-k">*</span>b);b<span class="pl-k">&lt;</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">line</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,a<span class="pl-k">-</span>b,<span class="pl-c1">1</span>),<span class="pl-c1">this</span>.<span class="pl-smi">line</span>.<span class="pl-en">updateMatrix</span>());<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(c,b,c);<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-en">updateMatrix</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">line</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">line</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-c1">set</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-c1">set</span>(a)};</td>
      </tr>
      <tr>
        <td id="L829" class="blob-num js-line-number" data-line-number="829"></td>
        <td id="LC829" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BoxHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">7</span>,<span class="pl-c1">4</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">3</span>,<span class="pl-c1">7</span>]),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">24</span>),d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;<span class="pl-smi">d</span>.<span class="pl-en">setIndex</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">1</span>));<span class="pl-smi">d</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">3</span>));<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16776960</span>}));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">update</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">BoxHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">BoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BoxHelper</span>;</td>
      </tr>
      <tr>
        <td id="L830" class="blob-num js-line-number" data-line-number="830"></td>
        <td id="LC830" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-en">setFromObject</span>(b);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">a</span>.<span class="pl-en">empty</span>()){b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">min</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">max</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">array</span>;e[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;e[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;e[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;e[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;e[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;e[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">16</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">17</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;e[<span class="pl-c1">18</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">19</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">20</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;e[<span class="pl-c1">21</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;e[<span class="pl-c1">22</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;e[<span class="pl-c1">23</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-smi">d</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">computeBoundingSphere</span>()}}}();</td>
      </tr>
      <tr>
        <td id="L831" class="blob-num js-line-number" data-line-number="831"></td>
        <td id="LC831" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BoundingBoxHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">8947848</span>;<span class="pl-c1">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">box</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BoxGeometry</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span>c,wireframe<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>}))};<span class="pl-c1">THREE</span>.<span class="pl-smi">BoundingBoxHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">BoundingBoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BoundingBoxHelper</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">BoundingBoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">box</span>.<span class="pl-en">setFromObject</span>(<span class="pl-c1">this</span>.<span class="pl-c1">object</span>);<span class="pl-c1">this</span>.<span class="pl-smi">box</span>.<span class="pl-c1">size</span>(<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>);<span class="pl-c1">this</span>.<span class="pl-smi">box</span>.<span class="pl-en">center</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>)};</td>
      </tr>
      <tr>
        <td id="L832" class="blob-num js-line-number" data-line-number="832"></td>
        <td id="LC832" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CameraHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">d</span>){<span class="pl-en">c</span>(a,d);<span class="pl-en">c</span>(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===g[a]&amp;&amp;(g[a]=[]);g[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),g={};b(&quot;n1&quot;,&quot;n2&quot;,16755200);b(&quot;n2&quot;,&quot;n4&quot;,16755200);b(&quot;n4&quot;,&quot;n3&quot;,16755200);b(&quot;n3&quot;,&quot;n1&quot;,16755200);b(&quot;f1&quot;,&quot;f2&quot;,16755200);b(&quot;f2&quot;,&quot;f4&quot;,16755200);b(&quot;f4&quot;,&quot;f3&quot;,16755200);b(&quot;f3&quot;,&quot;f1&quot;,16755200);b(&quot;n1&quot;,&quot;f1&quot;,16755200);</td>
      </tr>
      <tr>
        <td id="L833" class="blob-num js-line-number" data-line-number="833"></td>
        <td id="LC833" class="blob-code blob-code-inner js-file-line"><span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16777215</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cn2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cn4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cf2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cf4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d,e);<span class="pl-c1">this</span>.<span class="pl-smi">camera</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">camera</span>.<span class="pl-en">updateProjectionMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">pointMap</span><span class="pl-k">=</span>g;<span class="pl-c1">this</span>.<span class="pl-en">update</span>()};</td>
      </tr>
      <tr>
        <td id="L834" class="blob-num js-line-number" data-line-number="834"></td>
        <td id="LC834" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>;</td>
      </tr>
      <tr>
        <td id="L835" class="blob-num js-line-number" data-line-number="835"></td>
        <td id="LC835" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-smi">d</span>.<span class="pl-c1">set</span>(f,h,l).<span class="pl-en">unproject</span>(e);a<span class="pl-k">=</span>c[a];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>h;f<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[a[f]].<span class="pl-en">copy</span>(d)}<span class="pl-k">var</span> b,c,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Camera</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">pointMap</span>;<span class="pl-smi">e</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">camera</span>.<span class="pl-smi">projectionMatrix</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">.7</span>,<span class="pl-c1">1.1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">.7</span>,<span class="pl-c1">1.1</span>,</td>
      </tr>
      <tr>
        <td id="L836" class="blob-num js-line-number" data-line-number="836"></td>
        <td id="LC836" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}();</td>
      </tr>
      <tr>
        <td id="L837" class="blob-num js-line-number" data-line-number="837"></td>
        <td id="LC837" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DirectionalLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">light</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-smi">c</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>b,b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(b,b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(b,<span class="pl-k">-</span>b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>b,<span class="pl-k">-</span>b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>b,b,<span class="pl-c1">0</span>));<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({fog<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>});<span class="pl-smi">d</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">color</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">lightPlane</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(c,d);<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">lightPlane</span>);</td>
      </tr>
      <tr>
        <td id="L838" class="blob-num js-line-number" data-line-number="838"></td>
        <td id="LC838" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-smi">c</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({fog<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>});<span class="pl-smi">d</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">color</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">targetLine</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(c,d);<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">targetLine</span>);<span class="pl-c1">this</span>.<span class="pl-en">update</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLightHelper</span>;</td>
      </tr>
      <tr>
        <td id="L839" class="blob-num js-line-number" data-line-number="839"></td>
        <td id="LC839" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">lightPlane</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">dispose</span>();<span class="pl-c1">this</span>.<span class="pl-smi">lightPlane</span>.<span class="pl-smi">material</span>.<span class="pl-en">dispose</span>();<span class="pl-c1">this</span>.<span class="pl-smi">targetLine</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">dispose</span>();<span class="pl-c1">this</span>.<span class="pl-smi">targetLine</span>.<span class="pl-smi">material</span>.<span class="pl-en">dispose</span>()};</td>
      </tr>
      <tr>
        <td id="L840" class="blob-num js-line-number" data-line-number="840"></td>
        <td id="LC840" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">c</span>.<span class="pl-en">subVectors</span>(b,a);<span class="pl-c1">this</span>.<span class="pl-smi">lightPlane</span>.<span class="pl-en">lookAt</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">lightPlane</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">color</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">targetLine</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">vertices</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">targetLine</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">targetLine</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">lightPlane</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>)}}();</td>
      </tr>
      <tr>
        <td id="L841" class="blob-num js-line-number" data-line-number="841"></td>
        <td id="LC841" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">EdgesHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">16777215</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.EdgesGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>,c),<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>b}));<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">EdgesHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">EdgesHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">EdgesHelper</span>;</td>
      </tr>
      <tr>
        <td id="L842" class="blob-num js-line-number" data-line-number="842"></td>
        <td id="LC842" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">FaceNormalsHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">16776960</span>;d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">geometry</span>;c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span><span class="pl-k">?</span>b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span><span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.<span class="pl-pds">&quot;</span></span>);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>b,<span class="pl-c1">3</span>);<span class="pl-smi">c</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,b);<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,c,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>a,linewidth<span class="pl-k">:</span>d}));<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L843" class="blob-num js-line-number" data-line-number="843"></td>
        <td id="LC843" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">update</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">FaceNormalsHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">FaceNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceNormalsHelper</span>;</td>
      </tr>
      <tr>
        <td id="L844" class="blob-num js-line-number" data-line-number="844"></td>
        <td id="LC844" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">c</span>.<span class="pl-en">getNormalMatrix</span>(<span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">matrixWorld</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">geometry</span>,f<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">vertices</span>,g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">faces</span>,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>k;l<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>g[l],p<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">normal</span>;<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(f[<span class="pl-smi">m</span>.<span class="pl-smi">a</span>]).<span class="pl-c1">add</span>(f[<span class="pl-smi">m</span>.<span class="pl-smi">b</span>]).<span class="pl-c1">add</span>(f[<span class="pl-smi">m</span>.<span class="pl-smi">c</span>]).<span class="pl-en">divideScalar</span>(<span class="pl-c1">3</span>).<span class="pl-en">applyMatrix4</span>(d);<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(p).<span class="pl-en">applyMatrix3</span>(c).<span class="pl-c1">normalize</span>().<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">size</span>).<span class="pl-c1">add</span>(a);</td>
      </tr>
      <tr>
        <td id="L845" class="blob-num js-line-number" data-line-number="845"></td>
        <td id="LC845" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-en">setXYZ</span>(h,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);h<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-smi">e</span>.<span class="pl-en">setXYZ</span>(h,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>);h<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-smi">e</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>}}();</td>
      </tr>
      <tr>
        <td id="L846" class="blob-num js-line-number" data-line-number="846"></td>
        <td id="LC846" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">GridHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>});<span class="pl-c1">this</span>.<span class="pl-smi">color1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">4473924</span>);<span class="pl-c1">this</span>.<span class="pl-smi">color2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">8947848</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">-</span>a;e<span class="pl-k">&lt;=</span>a;e<span class="pl-k">+=</span>b){<span class="pl-smi">c</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,e),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a,<span class="pl-c1">0</span>,e),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(e,<span class="pl-c1">0</span>,<span class="pl-k">-</span>a),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(e,<span class="pl-c1">0</span>,a));<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">color1</span><span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">color2</span>;<span class="pl-smi">c</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">push</span>(g,g,g,g)}<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,c,d)};<span class="pl-c1">THREE</span>.<span class="pl-smi">GridHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L847" class="blob-num js-line-number" data-line-number="847"></td>
        <td id="LC847" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">GridHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GridHelper</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">GridHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setColors</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">color1</span>.<span class="pl-c1">set</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">color2</span>.<span class="pl-c1">set</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L848" class="blob-num js-line-number" data-line-number="848"></td>
        <td id="LC848" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">HemisphereLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">light</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">colors</span><span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>];<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(b,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>);<span class="pl-smi">c</span>.<span class="pl-en">rotateX</span>(<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">8</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-smi">faces</span>[d].<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">colors</span>[<span class="pl-c1">4</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>];d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span>,wireframe<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>});<span class="pl-c1">this</span>.<span class="pl-smi">lightSphere</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(c,d);<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">lightSphere</span>);<span class="pl-c1">this</span>.<span class="pl-en">update</span>()};</td>
      </tr>
      <tr>
        <td id="L849" class="blob-num js-line-number" data-line-number="849"></td>
        <td id="LC849" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLightHelper</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">lightSphere</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">dispose</span>();<span class="pl-c1">this</span>.<span class="pl-smi">lightSphere</span>.<span class="pl-smi">material</span>.<span class="pl-en">dispose</span>()};</td>
      </tr>
      <tr>
        <td id="L850" class="blob-num js-line-number" data-line-number="850"></td>
        <td id="LC850" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">colors</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">color</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">colors</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">groundColor</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">lightSphere</span>.<span class="pl-en">lookAt</span>(<span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">matrixWorld</span>).<span class="pl-en">negate</span>());<span class="pl-c1">this</span>.<span class="pl-smi">lightSphere</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}();</td>
      </tr>
      <tr>
        <td id="L851" class="blob-num js-line-number" data-line-number="851"></td>
        <td id="LC851" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PointLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">light</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(b,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>),d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({wireframe<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,fog<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>});<span class="pl-smi">d</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">color</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,c,d);<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">PointLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PointLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PointLightHelper</span>;</td>
      </tr>
      <tr>
        <td id="L852" class="blob-num js-line-number" data-line-number="852"></td>
        <td id="LC852" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PointLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">dispose</span>();<span class="pl-c1">this</span>.<span class="pl-smi">material</span>.<span class="pl-en">dispose</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">PointLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">color</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>)};</td>
      </tr>
      <tr>
        <td id="L853" class="blob-num js-line-number" data-line-number="853"></td>
        <td id="LC853" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SkeletonHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bones</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getBoneList</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[c].<span class="pl-c1">parent</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>),<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>),<span class="pl-smi">b</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)),<span class="pl-smi">b</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)));<span class="pl-smi">b</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>,depthTest<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,depthWrite<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,transparent<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>});<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,b,c);<span class="pl-c1">this</span>.<span class="pl-smi">root</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>;</td>
      </tr>
      <tr>
        <td id="L854" class="blob-num js-line-number" data-line-number="854"></td>
        <td id="LC854" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">update</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">SkeletonHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SkeletonHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SkeletonHelper</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SkeletonHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getBoneList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>[];a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">push</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(b,<span class="pl-c1">this</span>.<span class="pl-en">getBoneList</span>(<span class="pl-smi">a</span>.<span class="pl-smi">children</span>[c]));<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L855" class="blob-num js-line-number" data-line-number="855"></td>
        <td id="LC855" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SkeletonHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,b<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">root</span>.<span class="pl-smi">matrixWorld</span>),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[e];<span class="pl-smi">g</span>.<span class="pl-c1">parent</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-en">multiplyMatrices</span>(b,<span class="pl-smi">g</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[d].<span class="pl-en">setFromMatrixPosition</span>(c),<span class="pl-smi">c</span>.<span class="pl-en">multiplyMatrices</span>(b,<span class="pl-smi">g</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">matrixWorld</span>),<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[d<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">setFromMatrixPosition</span>(c),d<span class="pl-k">+=</span><span class="pl-c1">2</span>)}<span class="pl-smi">a</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">a</span>.<span class="pl-en">computeBoundingSphere</span>()};</td>
      </tr>
      <tr>
        <td id="L856" class="blob-num js-line-number" data-line-number="856"></td>
        <td id="LC856" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpotLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">light</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">8</span>,<span class="pl-c1">1</span>,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">a</span>.<span class="pl-en">translate</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">.5</span>,<span class="pl-c1">0</span>);<span class="pl-smi">a</span>.<span class="pl-en">rotateX</span>(<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({wireframe<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,fog<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>});<span class="pl-c1">this</span>.<span class="pl-smi">cone</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>);<span class="pl-c1">this</span>.<span class="pl-en">update</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLightHelper</span>;</td>
      </tr>
      <tr>
        <td id="L857" class="blob-num js-line-number" data-line-number="857"></td>
        <td id="LC857" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">dispose</span>();<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">material</span>.<span class="pl-en">dispose</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">distance</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">distance</span><span class="pl-k">:</span><span class="pl-c1">1E4</span>,d<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">angle</span>);<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(d,d,c);<span class="pl-smi">a</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">setFromMatrixPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-en">lookAt</span>(<span class="pl-smi">b</span>.<span class="pl-c1">sub</span>(a));<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-c1">color</span>).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-smi">light</span>.<span class="pl-smi">intensity</span>)}}();</td>
      </tr>
      <tr>
        <td id="L858" class="blob-num js-line-number" data-line-number="858"></td>
        <td id="LC858" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">VertexNormalsHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">16711680</span>;d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">geometry</span>;c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span><span class="pl-k">?</span>b<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span><span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">count</span>);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>b,<span class="pl-c1">3</span>);<span class="pl-smi">c</span>.<span class="pl-en">addAttribute</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,b);<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,c,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>a,linewidth<span class="pl-k">:</span>d}));<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">update</span>()};</td>
      </tr>
      <tr>
        <td id="L859" class="blob-num js-line-number" data-line-number="859"></td>
        <td id="LC859" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexNormalsHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">VertexNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexNormalsHelper</span>;</td>
      </tr>
      <tr>
        <td id="L860" class="blob-num js-line-number" data-line-number="860"></td>
        <td id="LC860" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>];<span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">c</span>.<span class="pl-en">getNormalMatrix</span>(<span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">matrixWorld</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span>.<span class="pl-smi">geometry</span>;<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">vertices</span>,l<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">faces</span>,k<span class="pl-k">=</span>f<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>m;k<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span>l[k],n<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>q;n<span class="pl-k">++</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">vertexNormals</span>[n];<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(h[p[d[n]]]).<span class="pl-en">applyMatrix4</span>(e);</td>
      </tr>
      <tr>
        <td id="L861" class="blob-num js-line-number" data-line-number="861"></td>
        <td id="LC861" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">copy</span>(s).<span class="pl-en">applyMatrix3</span>(c).<span class="pl-c1">normalize</span>().<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">size</span>).<span class="pl-c1">add</span>(a);<span class="pl-smi">g</span>.<span class="pl-en">setXYZ</span>(f,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>);f<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-smi">g</span>.<span class="pl-en">setXYZ</span>(f,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>);f<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>,n<span class="pl-k">=</span>f<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">count</span>;n<span class="pl-k">&lt;</span>q;n<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-c1">set</span>(<span class="pl-smi">d</span>.<span class="pl-en">getX</span>(n),<span class="pl-smi">d</span>.<span class="pl-en">getY</span>(n),<span class="pl-smi">d</span>.<span class="pl-en">getZ</span>(n)).<span class="pl-en">applyMatrix4</span>(e),<span class="pl-smi">b</span>.<span class="pl-c1">set</span>(<span class="pl-smi">h</span>.<span class="pl-en">getX</span>(n),<span class="pl-smi">h</span>.<span class="pl-en">getY</span>(n),<span class="pl-smi">h</span>.<span class="pl-en">getZ</span>(n)),<span class="pl-smi">b</span>.<span class="pl-en">applyMatrix3</span>(c).<span class="pl-c1">normalize</span>().<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">size</span>).<span class="pl-c1">add</span>(a),<span class="pl-smi">g</span>.<span class="pl-en">setXYZ</span>(f,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">z</span>),f<span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-smi">g</span>.<span class="pl-en">setXYZ</span>(f,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>),f<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-smi">g</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>}}();</td>
      </tr>
      <tr>
        <td id="L862" class="blob-num js-line-number" data-line-number="862"></td>
        <td id="LC862" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WireframeHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">16777215</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.WireframeGeometry</span>(<span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>c}));<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">WireframeHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">LineSegments</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">WireframeHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">WireframeHelper</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">ImmediateRenderObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){}};</td>
      </tr>
      <tr>
        <td id="L863" class="blob-num js-line-number" data-line-number="863"></td>
        <td id="LC863" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ImmediateRenderObject</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ImmediateRenderObject</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ImmediateRenderObject</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">MorphBlendMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span><span class="pl-k">=</span>[];<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;<span class="pl-c1">this</span>.<span class="pl-en">createAnimation</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>__default<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,c<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">/</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-en">setAnimationWeight</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>__default<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>;</td>
      </tr>
      <tr>
        <td id="L864" class="blob-num js-line-number" data-line-number="864"></td>
        <td id="LC864" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){b<span class="pl-k">=</span>{start<span class="pl-k">:</span>b,end<span class="pl-k">:</span>c,length<span class="pl-k">:</span>c<span class="pl-k">-</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>,fps<span class="pl-k">:</span>d,duration<span class="pl-k">:</span>(c<span class="pl-k">-</span>b)<span class="pl-k">/</span>d,lastFrame<span class="pl-k">:</span><span class="pl-c1">0</span>,currentFrame<span class="pl-k">:</span><span class="pl-c1">0</span>,active<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,time<span class="pl-k">:</span><span class="pl-c1">0</span>,direction<span class="pl-k">:</span><span class="pl-c1">1</span>,weight<span class="pl-k">:</span><span class="pl-c1">1</span>,directionBackwards<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,mirroredLoop<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span>.<span class="pl-c1">push</span>(b)};</td>
      </tr>
      <tr>
        <td id="L865" class="blob-num js-line-number" data-line-number="865"></td>
        <td id="LC865" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">autoCreateAnimations</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>)_<span class="pl-k">?</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-pds">/</span></span>,c,d<span class="pl-k">=</span>{},e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span>[g].<span class="pl-c1">name</span>.<span class="pl-c1">match</span>(b);<span class="pl-k">if</span>(h<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>h[<span class="pl-c1">1</span>];d[l]<span class="pl-k">||</span>(d[l]<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">Infinity</span>,end<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">Infinity</span>});h<span class="pl-k">=</span>d[l];g<span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">start</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-c1">start</span><span class="pl-k">=</span>g);g<span class="pl-k">&gt;</span><span class="pl-smi">h</span>.<span class="pl-smi">end</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">end</span><span class="pl-k">=</span>g);c<span class="pl-k">||</span>(c<span class="pl-k">=</span>l)}}<span class="pl-k">for</span>(l <span class="pl-k">in</span> d)h<span class="pl-k">=</span>d[l],<span class="pl-c1">this</span>.<span class="pl-en">createAnimation</span>(l,<span class="pl-smi">h</span>.<span class="pl-c1">start</span>,<span class="pl-smi">h</span>.<span class="pl-smi">end</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">firstAnimation</span><span class="pl-k">=</span>c};</td>
      </tr>
      <tr>
        <td id="L866" class="blob-num js-line-number" data-line-number="866"></td>
        <td id="LC866" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDirectionForward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])<span class="pl-smi">a</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDirectionBackward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])<span class="pl-smi">a</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationFPS</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">fps</span><span class="pl-k">=</span>b,<span class="pl-smi">c</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span>(<span class="pl-smi">c</span>.<span class="pl-smi">end</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">start</span>)<span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-smi">fps</span>)};</td>
      </tr>
      <tr>
        <td id="L867" class="blob-num js-line-number" data-line-number="867"></td>
        <td id="LC867" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDuration</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span>b,<span class="pl-smi">c</span>.<span class="pl-smi">fps</span><span class="pl-k">=</span>(<span class="pl-smi">c</span>.<span class="pl-smi">end</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">start</span>)<span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-smi">duration</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationWeight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">weight</span><span class="pl-k">=</span>b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">=</span>b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getAnimationTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">time</span>;<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L868" class="blob-num js-line-number" data-line-number="868"></td>
        <td id="LC868" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getAnimationDuration</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">duration</span>;<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">playAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];b<span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-smi">b</span>.<span class="pl-smi">active</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.MorphBlendMesh: animation[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] undefined in .playAnimation()<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stopAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])<span class="pl-smi">a</span>.<span class="pl-smi">active</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L869" class="blob-num js-line-number" data-line-number="869"></td>
        <td id="LC869" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span>[b];<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">active</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span><span class="pl-k">/</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">direction</span><span class="pl-k">*</span>a;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">mirroredLoop</span>){<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span>)<span class="pl-smi">d</span>.<span class="pl-smi">direction</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>,<span class="pl-smi">d</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-smi">d</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>)}<span class="pl-k">else</span> <span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">%=</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>,<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">start</span><span class="pl-k">+</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">/</span>e),<span class="pl-c1">0</span>,<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>),f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">weight</span>;g<span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L870" class="blob-num js-line-number" data-line-number="870"></td>
        <td id="LC870" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">lastFrame</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">*</span>f,<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[g]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-smi">d</span>.<span class="pl-smi">lastFrame</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>,<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span><span class="pl-k">=</span>g);e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">%</span>e<span class="pl-k">/</span>e;<span class="pl-smi">d</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>e);<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">lastFrame</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span>f,<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">lastFrame</span>]<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>e)<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>]<span class="pl-k">=</span>f}}};</td>
      </tr>
      <tr>
        <td id="L871" class="blob-num js-line-number" data-line-number="871"></td>
        <td id="LC871" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L872" class="blob-num js-line-number" data-line-number="872"></td>
        <td id="LC872" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Export the THREE object for **Node.js**, with</span></td>
      </tr>
      <tr>
        <td id="L873" class="blob-num js-line-number" data-line-number="873"></td>
        <td id="LC873" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> backwards-compatibility for the old `require()` API. If we&#39;re in</span></td>
      </tr>
      <tr>
        <td id="L874" class="blob-num js-line-number" data-line-number="874"></td>
        <td id="LC874" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> the browser, add `_` as a global object via a string identifier,</span></td>
      </tr>
      <tr>
        <td id="L875" class="blob-num js-line-number" data-line-number="875"></td>
        <td id="LC875" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> for Closure Compiler &quot;advanced&quot; mode.</span></td>
      </tr>
      <tr>
        <td id="L876" class="blob-num js-line-number" data-line-number="876"></td>
        <td id="LC876" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">exports</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L877" class="blob-num js-line-number" data-line-number="877"></td>
        <td id="LC877" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">module</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">module</span>.<span class="pl-smi">exports</span>) {</td>
      </tr>
      <tr>
        <td id="L878" class="blob-num js-line-number" data-line-number="878"></td>
        <td id="LC878" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">exports</span> <span class="pl-k">=</span> <span class="pl-c1">module</span>.<span class="pl-smi">exports</span> <span class="pl-k">=</span> <span class="pl-c1">THREE</span>;</td>
      </tr>
      <tr>
        <td id="L879" class="blob-num js-line-number" data-line-number="879"></td>
        <td id="LC879" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L880" class="blob-num js-line-number" data-line-number="880"></td>
        <td id="LC880" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">exports</span>.<span class="pl-c1">THREE</span> <span class="pl-k">=</span> <span class="pl-c1">THREE</span>;</td>
      </tr>
      <tr>
        <td id="L881" class="blob-num js-line-number" data-line-number="881"></td>
        <td id="LC881" class="blob-code blob-code-inner js-file-line">} <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L882" class="blob-num js-line-number" data-line-number="882"></td>
        <td id="LC882" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>THREE<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">THREE</span>;</td>
      </tr>
      <tr>
        <td id="L883" class="blob-num js-line-number" data-line-number="883"></td>
        <td id="LC883" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

</div>

<button type="button" data-facebox="#jump-to-line" data-facebox-class="linejump" data-hotkey="l" class="d-none">Jump to Line</button>
<div id="jump-to-line" style="display:none">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <input class="form-control linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
    <button type="submit" class="btn">Go</button>
</form></div>

  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div>




    </div>
  </div>

  </div>

      <div class="container site-footer-container">
  <div class="site-footer" role="contentinfo">
    <ul class="site-footer-links float-right">
        <li><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact GitHub</a></li>
      <li><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>

    </ul>

    <a href="https://github.com" aria-label="Homepage" class="site-footer-mark" title="GitHub">
      <svg aria-hidden="true" class="octicon octicon-mark-github" height="24" version="1.1" viewBox="0 0 16 16" width="24"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
    <ul class="site-footer-links">
      <li>&copy; 2017 <span title="2.40893s from github-fe129-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="https://github.com/site/terms" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li><a href="https://github.com/security" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>
  </div>
</div>



  

  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <button type="button" class="flash-close js-flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
    You can't perform that action at this time.
  </div>


    <script crossorigin="anonymous" integrity="sha256-ikMY/+oJoM24IUt2zykmufagztMYoxe+1BnbGSFMaQ0=" src="https://assets-cdn.github.com/assets/compat-8a4318ffea09a0cdb8214b76cf2926b9f6a0ced318a317bed419db19214c690d.js"></script>
    <script crossorigin="anonymous" integrity="sha256-bRCeda2EcbpBUIJybADDX7kpzquXUIJJKDXxHsqMB9k=" src="https://assets-cdn.github.com/assets/frameworks-6d109e75ad8471ba415082726c00c35fb929ceab975082492835f11eca8c07d9.js"></script>
    <script async="async" crossorigin="anonymous" integrity="sha256-0y7szlSDi3HPfjpQ2SbCAoqkXKRuDAGE2Cup76cCVfM=" src="https://assets-cdn.github.com/assets/github-d32eecce54838b71cf7e3a50d926c2028aa45ca46e0c0184d82ba9efa70255f3.js"></script>
    
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
  </div>
</div>


  </body>
</html>

